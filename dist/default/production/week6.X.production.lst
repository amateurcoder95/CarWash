

Microchip Technology PIC LITE Macro Assembler V1.35 build -356382666 
                                                                                               Tue Apr 12 15:03:05 2016

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2
    38                           	psect	text24,local,class=CODE,merge=1,delta=2
    39                           	psect	text25,local,class=CODE,merge=1,delta=2
    40                           	psect	text26,local,class=CODE,merge=1,delta=2
    41                           	psect	text27,local,class=CODE,merge=1,delta=2
    42                           	psect	text28,local,class=CODE,merge=1,delta=2
    43                           	psect	text29,local,class=CODE,merge=1,delta=2
    44                           	psect	text30,local,class=CODE,merge=1,delta=2
    45                           	psect	text31,local,class=CODE,merge=1,delta=2
    46                           	psect	text32,local,class=CODE,merge=1,delta=2
    47                           	psect	text33,local,class=CODE,merge=1,delta=2
    48                           	psect	text34,local,class=CODE,merge=1,delta=2
    49                           	psect	text35,local,class=CODE,merge=1,delta=2
    50                           	psect	text36,local,class=CODE,merge=1,delta=2
    51                           	psect	text37,local,class=CODE,merge=1,delta=2
    52                           	psect	text38,local,class=CODE,merge=1,delta=2
    53                           	dabs	1,0x7E,2
    54  0000                     	;# 
    55  0001                     	;# 
    56  0002                     	;# 
    57  0003                     	;# 
    58  0004                     	;# 
    59  0005                     	;# 
    60  0006                     	;# 
    61  0007                     	;# 
    62  0008                     	;# 
    63  0009                     	;# 
    64  000A                     	;# 
    65  000B                     	;# 
    66  000C                     	;# 
    67  000D                     	;# 
    68  000E                     	;# 
    69  000E                     	;# 
    70  000F                     	;# 
    71  0010                     	;# 
    72  0011                     	;# 
    73  0012                     	;# 
    74  0013                     	;# 
    75  0014                     	;# 
    76  0015                     	;# 
    77  0015                     	;# 
    78  0016                     	;# 
    79  0017                     	;# 
    80  0018                     	;# 
    81  0019                     	;# 
    82  001A                     	;# 
    83  001B                     	;# 
    84  001B                     	;# 
    85  001C                     	;# 
    86  001D                     	;# 
    87  001E                     	;# 
    88  001F                     	;# 
    89  0081                     	;# 
    90  0085                     	;# 
    91  0086                     	;# 
    92  0087                     	;# 
    93  0088                     	;# 
    94  0089                     	;# 
    95  008C                     	;# 
    96  008D                     	;# 
    97  008E                     	;# 
    98  0091                     	;# 
    99  0092                     	;# 
   100  0093                     	;# 
   101  0094                     	;# 
   102  0098                     	;# 
   103  0099                     	;# 
   104  009C                     	;# 
   105  009D                     	;# 
   106  009E                     	;# 
   107  009F                     	;# 
   108  010C                     	;# 
   109  010D                     	;# 
   110  010E                     	;# 
   111  010F                     	;# 
   112  018C                     	;# 
   113  018D                     	;# 
   114  0000                     	;# 
   115  0001                     	;# 
   116  0002                     	;# 
   117  0003                     	;# 
   118  0004                     	;# 
   119  0005                     	;# 
   120  0006                     	;# 
   121  0007                     	;# 
   122  0008                     	;# 
   123  0009                     	;# 
   124  000A                     	;# 
   125  000B                     	;# 
   126  000C                     	;# 
   127  000D                     	;# 
   128  000E                     	;# 
   129  000E                     	;# 
   130  000F                     	;# 
   131  0010                     	;# 
   132  0011                     	;# 
   133  0012                     	;# 
   134  0013                     	;# 
   135  0014                     	;# 
   136  0015                     	;# 
   137  0015                     	;# 
   138  0016                     	;# 
   139  0017                     	;# 
   140  0018                     	;# 
   141  0019                     	;# 
   142  001A                     	;# 
   143  001B                     	;# 
   144  001B                     	;# 
   145  001C                     	;# 
   146  001D                     	;# 
   147  001E                     	;# 
   148  001F                     	;# 
   149  0081                     	;# 
   150  0085                     	;# 
   151  0086                     	;# 
   152  0087                     	;# 
   153  0088                     	;# 
   154  0089                     	;# 
   155  008C                     	;# 
   156  008D                     	;# 
   157  008E                     	;# 
   158  0091                     	;# 
   159  0092                     	;# 
   160  0093                     	;# 
   161  0094                     	;# 
   162  0098                     	;# 
   163  0099                     	;# 
   164  009C                     	;# 
   165  009D                     	;# 
   166  009E                     	;# 
   167  009F                     	;# 
   168  010C                     	;# 
   169  010D                     	;# 
   170  010E                     	;# 
   171  010F                     	;# 
   172  018C                     	;# 
   173  018D                     	;# 
   174  0000                     	;# 
   175  0001                     	;# 
   176  0002                     	;# 
   177  0003                     	;# 
   178  0004                     	;# 
   179  0005                     	;# 
   180  0006                     	;# 
   181  0007                     	;# 
   182  0008                     	;# 
   183  0009                     	;# 
   184  000A                     	;# 
   185  000B                     	;# 
   186  000C                     	;# 
   187  000D                     	;# 
   188  000E                     	;# 
   189  000E                     	;# 
   190  000F                     	;# 
   191  0010                     	;# 
   192  0011                     	;# 
   193  0012                     	;# 
   194  0013                     	;# 
   195  0014                     	;# 
   196  0015                     	;# 
   197  0015                     	;# 
   198  0016                     	;# 
   199  0017                     	;# 
   200  0018                     	;# 
   201  0019                     	;# 
   202  001A                     	;# 
   203  001B                     	;# 
   204  001B                     	;# 
   205  001C                     	;# 
   206  001D                     	;# 
   207  001E                     	;# 
   208  001F                     	;# 
   209  0081                     	;# 
   210  0085                     	;# 
   211  0086                     	;# 
   212  0087                     	;# 
   213  0088                     	;# 
   214  0089                     	;# 
   215  008C                     	;# 
   216  008D                     	;# 
   217  008E                     	;# 
   218  0091                     	;# 
   219  0092                     	;# 
   220  0093                     	;# 
   221  0094                     	;# 
   222  0098                     	;# 
   223  0099                     	;# 
   224  009C                     	;# 
   225  009D                     	;# 
   226  009E                     	;# 
   227  009F                     	;# 
   228  010C                     	;# 
   229  010D                     	;# 
   230  010E                     	;# 
   231  010F                     	;# 
   232  018C                     	;# 
   233  018D                     	;# 
   234  0000                     	;# 
   235  0001                     	;# 
   236  0002                     	;# 
   237  0003                     	;# 
   238  0004                     	;# 
   239  0005                     	;# 
   240  0006                     	;# 
   241  0007                     	;# 
   242  0008                     	;# 
   243  0009                     	;# 
   244  000A                     	;# 
   245  000B                     	;# 
   246  000C                     	;# 
   247  000D                     	;# 
   248  000E                     	;# 
   249  000E                     	;# 
   250  000F                     	;# 
   251  0010                     	;# 
   252  0011                     	;# 
   253  0012                     	;# 
   254  0013                     	;# 
   255  0014                     	;# 
   256  0015                     	;# 
   257  0015                     	;# 
   258  0016                     	;# 
   259  0017                     	;# 
   260  0018                     	;# 
   261  0019                     	;# 
   262  001A                     	;# 
   263  001B                     	;# 
   264  001B                     	;# 
   265  001C                     	;# 
   266  001D                     	;# 
   267  001E                     	;# 
   268  001F                     	;# 
   269  0081                     	;# 
   270  0085                     	;# 
   271  0086                     	;# 
   272  0087                     	;# 
   273  0088                     	;# 
   274  0089                     	;# 
   275  008C                     	;# 
   276  008D                     	;# 
   277  008E                     	;# 
   278  0091                     	;# 
   279  0092                     	;# 
   280  0093                     	;# 
   281  0094                     	;# 
   282  0098                     	;# 
   283  0099                     	;# 
   284  009C                     	;# 
   285  009D                     	;# 
   286  009E                     	;# 
   287  009F                     	;# 
   288  010C                     	;# 
   289  010D                     	;# 
   290  010E                     	;# 
   291  010F                     	;# 
   292  018C                     	;# 
   293  018D                     	;# 
   294                           
   295                           	psect	idataBANK0
   296  0008                     __pidataBANK0:	
   297                           
   298                           ;initializer for _state
   299  0008  3401               	retlw	1
   300  0009  3400               	retlw	0
   301  001F                     _ADCON0bits	set	31
   302  001E                     _ADRESH	set	30
   303  0006                     _PORTB	set	6
   304  0013                     _SSPBUF	set	19
   305  0014                     _SSPCON	set	20
   306  00FB                     _CHS0	set	251
   307  00FC                     _CHS1	set	252
   308  00FD                     _CHS2	set	253
   309  0029                     _RA1	set	41
   310  002A                     _RA2	set	42
   311  002B                     _RA3	set	43
   312  002C                     _RA4	set	44
   313  0030                     _RB0	set	48
   314  0031                     _RB1	set	49
   315  0034                     _RB4	set	52
   316  0035                     _RB5	set	53
   317  0036                     _RB6	set	54
   318  0037                     _RB7	set	55
   319  0040                     _RD0	set	64
   320  0063                     _SSPIF	set	99
   321  009F                     _ADCON1bits	set	159
   322  009E                     _ADRESL	set	158
   323  0093                     _SSPADD	set	147
   324  0094                     _SSPSTAT	set	148
   325  0085                     _TRISA	set	133
   326  0087                     _TRISC	set	135
   327  0088                     _TRISD	set	136
   328  048D                     _ACKDT	set	1165
   329  048C                     _ACKEN	set	1164
   330  048E                     _ACKSTAT	set	1166
   331  048A                     _PEN	set	1162
   332  048B                     _RCEN	set	1163
   333  0489                     _RSEN	set	1161
   334  0488                     _SEN	set	1160
   335  0430                     _TRISB0	set	1072
   336  0431                     _TRISB1	set	1073
   337  0434                     _TRISB4	set	1076
   338  0435                     _TRISB5	set	1077
   339  0436                     _TRISB6	set	1078
   340  0437                     _TRISB7	set	1079
   341  043B                     _TRISC3	set	1083
   342  043C                     _TRISC4	set	1084
   343                           
   344                           	psect	strings
   345  110F                     __pstrings:	
   346  110F                     stringtab:	
   347  110F                     __stringtab:	
   348                           
   349                           ;	String table - string pointers are 2 bytes each
   350  110F  1BFF               	btfsc	btemp+1,7
   351  1110  2919               	ljmp	stringcode
   352  1111  1383               	bcf	3,7
   353  1112  187F               	btfsc	btemp+1,0
   354  1113  1783               	bsf	3,7
   355  1114  0800               	movf	0,w
   356  1115  0A84               	incf	4,f
   357  1116  1903               	skipnz
   358  1117  0AFF               	incf	btemp+1,f
   359  1118  0008               	return
   360  1119                     stringcode:	
   361  1119  087F               	movf	btemp+1,w
   362  111A  397F               	andlw	127
   363  111B  008A               	movwf	10
   364  111C  0804               	movf	4,w
   365  111D  0A84               	incf	4,f
   366  111E  1903               	skipnz
   367  111F  0AFF               	incf	btemp+1,f
   368  1120  0082               	movwf	2
   369  1121                     __stringbase:	
   370  1121                     __end_of__stringtab:	
   371                           
   372                           	psect	stringtext
   373  1000                     __pstringtext:	
   374  1000                     STR_6:	
   375  1000  3420               	retlw	32	;' '
   376  1001  3420               	retlw	32	;' '
   377  1002  3420               	retlw	32	;' '
   378  1003  3443               	retlw	67	;'C'
   379  1004  3448               	retlw	72	;'H'
   380  1005  3441               	retlw	65	;'A'
   381  1006  344E               	retlw	78	;'N'
   382  1007  3447               	retlw	71	;'G'
   383  1008  3445               	retlw	69	;'E'
   384  1009  3420               	retlw	32	;' '
   385  100A  3448               	retlw	72	;'H'
   386  100B  344F               	retlw	79	;'O'
   387  100C  3455               	retlw	85	;'U'
   388  100D  3452               	retlw	82	;'R'
   389  100E  3420               	retlw	32	;' '
   390  100F  3420               	retlw	32	;' '
   391  1010  3420               	retlw	32	;' '
   392  1011  3420               	retlw	32	;' '
   393  1012  3420               	retlw	32	;' '
   394  1013  3400               	retlw	0
   395  1014                     STR_22:	
   396  1014  3420               	retlw	32	;' '
   397  1015  3420               	retlw	32	;' '
   398  1016  3420               	retlw	32	;' '
   399  1017  3443               	retlw	67	;'C'
   400  1018  3448               	retlw	72	;'H'
   401  1019  3441               	retlw	65	;'A'
   402  101A  344E               	retlw	78	;'N'
   403  101B  3447               	retlw	71	;'G'
   404  101C  3445               	retlw	69	;'E'
   405  101D  3420               	retlw	32	;' '
   406  101E  344D               	retlw	77	;'M'
   407  101F  344F               	retlw	79	;'O'
   408  1020  344E               	retlw	78	;'N'
   409  1021  3454               	retlw	84	;'T'
   410  1022  3448               	retlw	72	;'H'
   411  1023  3420               	retlw	32	;' '
   412  1024  3420               	retlw	32	;' '
   413  1025  3420               	retlw	32	;' '
   414  1026  3420               	retlw	32	;' '
   415  1027  3400               	retlw	0
   416  1028                     STR_7:	
   417  1028  3420               	retlw	32	;' '
   418  1029  3420               	retlw	32	;' '
   419  102A  3420               	retlw	32	;' '
   420  102B  3443               	retlw	67	;'C'
   421  102C  3448               	retlw	72	;'H'
   422  102D  3441               	retlw	65	;'A'
   423  102E  344E               	retlw	78	;'N'
   424  102F  3447               	retlw	71	;'G'
   425  1030  3445               	retlw	69	;'E'
   426  1031  3420               	retlw	32	;' '
   427  1032  344D               	retlw	77	;'M'
   428  1033  3449               	retlw	73	;'I'
   429  1034  344E               	retlw	78	;'N'
   430  1035  3455               	retlw	85	;'U'
   431  1036  3454               	retlw	84	;'T'
   432  1037  3445               	retlw	69	;'E'
   433  1038  3420               	retlw	32	;' '
   434  1039  3420               	retlw	32	;' '
   435  103A  3420               	retlw	32	;' '
   436  103B  3400               	retlw	0
   437  103C                     STR_24:	
   438  103C  3420               	retlw	32	;' '
   439  103D  3443               	retlw	67	;'C'
   440  103E  3448               	retlw	72	;'H'
   441  103F  3441               	retlw	65	;'A'
   442  1040  344E               	retlw	78	;'N'
   443  1041  3447               	retlw	71	;'G'
   444  1042  3445               	retlw	69	;'E'
   445  1043  3420               	retlw	32	;' '
   446  1044  3457               	retlw	87	;'W'
   447  1045  3445               	retlw	69	;'E'
   448  1046  3445               	retlw	69	;'E'
   449  1047  344B               	retlw	75	;'K'
   450  1048  3420               	retlw	32	;' '
   451  1049  3444               	retlw	68	;'D'
   452  104A  3441               	retlw	65	;'A'
   453  104B  3459               	retlw	89	;'Y'
   454  104C  3420               	retlw	32	;' '
   455  104D  3420               	retlw	32	;' '
   456  104E  3400               	retlw	0
   457  104F                     STR_9:	
   458  104F  3420               	retlw	32	;' '
   459  1050  3420               	retlw	32	;' '
   460  1051  3453               	retlw	83	;'S'
   461  1052  3445               	retlw	69	;'E'
   462  1053  3454               	retlw	84	;'T'
   463  1054  3454               	retlw	84	;'T'
   464  1055  3449               	retlw	73	;'I'
   465  1056  344E               	retlw	78	;'N'
   466  1057  3447               	retlw	71	;'G'
   467  1058  3420               	retlw	32	;' '
   468  1059  3444               	retlw	68	;'D'
   469  105A  3441               	retlw	65	;'A'
   470  105B  3454               	retlw	84	;'T'
   471  105C  3445               	retlw	69	;'E'
   472  105D  3420               	retlw	32	;' '
   473  105E  3420               	retlw	32	;' '
   474  105F  3420               	retlw	32	;' '
   475  1060  3400               	retlw	0
   476  1061                     STR_8:	
   477  1061  3420               	retlw	32	;' '
   478  1062  3420               	retlw	32	;' '
   479  1063  3443               	retlw	67	;'C'
   480  1064  3448               	retlw	72	;'H'
   481  1065  3441               	retlw	65	;'A'
   482  1066  344E               	retlw	78	;'N'
   483  1067  3447               	retlw	71	;'G'
   484  1068  3445               	retlw	69	;'E'
   485  1069  3420               	retlw	32	;' '
   486  106A  3453               	retlw	83	;'S'
   487  106B  3445               	retlw	69	;'E'
   488  106C  3443               	retlw	67	;'C'
   489  106D  344F               	retlw	79	;'O'
   490  106E  344E               	retlw	78	;'N'
   491  106F  3444               	retlw	68	;'D'
   492  1070  3420               	retlw	32	;' '
   493  1071  3420               	retlw	32	;' '
   494  1072  3400               	retlw	0
   495  1073                     STR_33:	
   496  1073  3420               	retlw	32	;' '
   497  1074  3420               	retlw	32	;' '
   498  1075  3420               	retlw	32	;' '
   499  1076  3420               	retlw	32	;' '
   500  1077  3420               	retlw	32	;' '
   501  1078  3441               	retlw	65	;'A'
   502  1079  344C               	retlw	76	;'L'
   503  107A  3441               	retlw	65	;'A'
   504  107B  3452               	retlw	82	;'R'
   505  107C  344D               	retlw	77	;'M'
   506  107D  3420               	retlw	32	;' '
   507  107E  3420               	retlw	32	;' '
   508  107F  3420               	retlw	32	;' '
   509  1080  3420               	retlw	32	;' '
   510  1081  3420               	retlw	32	;' '
   511  1082  3400               	retlw	0
   512  1083                     STR_37:	
   513  1083  3420               	retlw	32	;' '
   514  1084  3420               	retlw	32	;' '
   515  1085  3420               	retlw	32	;' '
   516  1086  3420               	retlw	32	;' '
   517  1087  3420               	retlw	32	;' '
   518  1088  344D               	retlw	77	;'M'
   519  1089  3449               	retlw	73	;'I'
   520  108A  344E               	retlw	78	;'N'
   521  108B  3455               	retlw	85	;'U'
   522  108C  3454               	retlw	84	;'T'
   523  108D  3445               	retlw	69	;'E'
   524  108E  3420               	retlw	32	;' '
   525  108F  3420               	retlw	32	;' '
   526  1090  3420               	retlw	32	;' '
   527  1091  3420               	retlw	32	;' '
   528  1092  3400               	retlw	0
   529  1093                     STR_21:	
   530  1093  3420               	retlw	32	;' '
   531  1094  3420               	retlw	32	;' '
   532  1095  3443               	retlw	67	;'C'
   533  1096  3448               	retlw	72	;'H'
   534  1097  3441               	retlw	65	;'A'
   535  1098  344E               	retlw	78	;'N'
   536  1099  3447               	retlw	71	;'G'
   537  109A  3445               	retlw	69	;'E'
   538  109B  3420               	retlw	32	;' '
   539  109C  3444               	retlw	68	;'D'
   540  109D  3441               	retlw	65	;'A'
   541  109E  3459               	retlw	89	;'Y'
   542  109F  3420               	retlw	32	;' '
   543  10A0  3420               	retlw	32	;' '
   544  10A1  3420               	retlw	32	;' '
   545  10A2  3400               	retlw	0
   546  10A3                     STR_23:	
   547  10A3  3420               	retlw	32	;' '
   548  10A4  3420               	retlw	32	;' '
   549  10A5  3443               	retlw	67	;'C'
   550  10A6  3448               	retlw	72	;'H'
   551  10A7  3441               	retlw	65	;'A'
   552  10A8  344E               	retlw	78	;'N'
   553  10A9  3447               	retlw	71	;'G'
   554  10AA  3445               	retlw	69	;'E'
   555  10AB  3420               	retlw	32	;' '
   556  10AC  3459               	retlw	89	;'Y'
   557  10AD  3445               	retlw	69	;'E'
   558  10AE  3441               	retlw	65	;'A'
   559  10AF  3452               	retlw	82	;'R'
   560  10B0  3420               	retlw	32	;' '
   561  10B1  3420               	retlw	32	;' '
   562  10B2  3400               	retlw	0
   563  10B3                     STR_3:	
   564  10B3  3420               	retlw	32	;' '
   565  10B4  3420               	retlw	32	;' '
   566  10B5  3453               	retlw	83	;'S'
   567  10B6  3445               	retlw	69	;'E'
   568  10B7  3454               	retlw	84	;'T'
   569  10B8  3454               	retlw	84	;'T'
   570  10B9  3449               	retlw	73	;'I'
   571  10BA  344E               	retlw	78	;'N'
   572  10BB  3447               	retlw	71	;'G'
   573  10BC  3420               	retlw	32	;' '
   574  10BD  3454               	retlw	84	;'T'
   575  10BE  3449               	retlw	73	;'I'
   576  10BF  344D               	retlw	77	;'M'
   577  10C0  3445               	retlw	69	;'E'
   578  10C1  3400               	retlw	0
   579  10C2                     STR_36:	
   580  10C2  3420               	retlw	32	;' '
   581  10C3  3420               	retlw	32	;' '
   582  10C4  3420               	retlw	32	;' '
   583  10C5  3420               	retlw	32	;' '
   584  10C6  3448               	retlw	72	;'H'
   585  10C7  344F               	retlw	79	;'O'
   586  10C8  3455               	retlw	85	;'U'
   587  10C9  3452               	retlw	82	;'R'
   588  10CA  3420               	retlw	32	;' '
   589  10CB  3420               	retlw	32	;' '
   590  10CC  3420               	retlw	32	;' '
   591  10CD  3420               	retlw	32	;' '
   592  10CE  3420               	retlw	32	;' '
   593  10CF  3400               	retlw	0
   594  10D0                     STR_38:	
   595  10D0  3420               	retlw	32	;' '
   596  10D1  3420               	retlw	32	;' '
   597  10D2  3420               	retlw	32	;' '
   598  10D3  3420               	retlw	32	;' '
   599  10D4  3453               	retlw	83	;'S'
   600  10D5  3445               	retlw	69	;'E'
   601  10D6  3443               	retlw	67	;'C'
   602  10D7  344F               	retlw	79	;'O'
   603  10D8  344E               	retlw	78	;'N'
   604  10D9  3444               	retlw	68	;'D'
   605  10DA  3420               	retlw	32	;' '
   606  10DB  3420               	retlw	32	;' '
   607  10DC  3420               	retlw	32	;' '
   608  10DD  3400               	retlw	0
   609  10DE                     STR_1:	
   610  10DE  3454               	retlw	84	;'T'
   611  10DF  3445               	retlw	69	;'E'
   612  10E0  344D               	retlw	77	;'M'
   613  10E1  3450               	retlw	80	;'P'
   614  10E2  343A               	retlw	58	;':'
   615  10E3  3420               	retlw	32	;' '
   616  10E4  3400               	retlw	0
   617  10E5                     STR_20:	
   618  10E5  343F               	retlw	63	;'?'
   619  10E6  343F               	retlw	63	;'?'
   620  10E7  343F               	retlw	63	;'?'
   621  10E8  3400               	retlw	0
   622  10E9                     STR_15:	
   623  10E9  3457               	retlw	87	;'W'
   624  10EA  3445               	retlw	69	;'E'
   625  10EB  3444               	retlw	68	;'D'
   626  10EC  3400               	retlw	0
   627  10ED                     STR_14:	
   628  10ED  3454               	retlw	84	;'T'
   629  10EE  3455               	retlw	85	;'U'
   630  10EF  3445               	retlw	69	;'E'
   631  10F0  3400               	retlw	0
   632  10F1                     STR_17:	
   633  10F1  3446               	retlw	70	;'F'
   634  10F2  3452               	retlw	82	;'R'
   635  10F3  3449               	retlw	73	;'I'
   636  10F4  3400               	retlw	0
   637  10F5                     STR_13:	
   638  10F5  344D               	retlw	77	;'M'
   639  10F6  344F               	retlw	79	;'O'
   640  10F7  344E               	retlw	78	;'N'
   641  10F8  3400               	retlw	0
   642  10F9                     STR_19:	
   643  10F9  3453               	retlw	83	;'S'
   644  10FA  3455               	retlw	85	;'U'
   645  10FB  344E               	retlw	78	;'N'
   646  10FC  3400               	retlw	0
   647  10FD                     STR_18:	
   648  10FD  3453               	retlw	83	;'S'
   649  10FE  3441               	retlw	65	;'A'
   650  10FF  3454               	retlw	84	;'T'
   651  1100  3400               	retlw	0
   652  1101                     STR_16:	
   653  1101  3454               	retlw	84	;'T'
   654  1102  3448               	retlw	72	;'H'
   655  1103  3455               	retlw	85	;'U'
   656  1104  3400               	retlw	0
   657  1105                     STR_39:	
   658  1105  3441               	retlw	65	;'A'
   659  1106  344D               	retlw	77	;'M'
   660  1107  3400               	retlw	0
   661  1108                     STR_40:	
   662  1108  3450               	retlw	80	;'P'
   663  1109  344D               	retlw	77	;'M'
   664  110A  3400               	retlw	0
   665  110B                     STR_4:	
   666  110B  343A               	retlw	58	;':'
   667  110C  3400               	retlw	0
   668  110D                     STR_2:	
   669  110D  3443               	retlw	67	;'C'
   670  110E  3400               	retlw	0
   671  1081                     
   672                           ; #config settings
   673  0000                     
   674                           	psect	cinit
   675  07E8                     start_initialization:	
   676  07E8                     __initialization:	
   677                           
   678                           ; Clear objects allocated to COMMON
   679  07E8  01FD               	clrf	__pbssCOMMON& (0+127)
   680                           
   681                           ; Clear objects allocated to BANK0
   682  07E9  1383               	bcf	3,7	;select IRP bank0
   683  07EA  3044               	movlw	low __pbssBANK0
   684  07EB  0084               	movwf	4
   685  07EC  3056               	movlw	low (__pbssBANK0+18)
   686  07ED  160A  118A  24FF  120A  118A  	fcall	clear_ram0
   687                           
   688                           ; Initialize objects allocated to BANK0
   689  07F2  120A  118A  2008  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   690  07F7  00D6               	movwf	__pdataBANK0& (0+127)
   691  07F8  120A  118A  2009   	fcall	__pidataBANK0+1	;fetch initializer
   692  07FB  00D7               	movwf	(__pdataBANK0+1)& (0+127)
   693  07FC                     end_of_initialization:	
   694                           ;End of C runtime variable initialization code
   695                           
   696  07FC                     __end_of__initialization:	
   697  07FC  0183               	clrf	3
   698  07FD  120A  158A  2874   	ljmp	_main	;jump to C main() function
   699                           
   700                           	psect	bssCOMMON
   701  007D                     __pbssCOMMON:	
   702  007D                     _Temp:	
   703  007D                     	ds	1
   704                           
   705                           	psect	bssBANK0
   706  0044                     __pbssBANK0:	
   707  0044                     _f:	
   708  0044                     	ds	2
   709  0046                     _h_alarm:	
   710  0046                     	ds	2
   711  0048                     _m_alarm:	
   712  0048                     	ds	2
   713  004A                     _s_alarm:	
   714  004A                     	ds	2
   715  004C                     _switch_state:	
   716  004C                     	ds	2
   717  004E                     _voltage:	
   718  004E                     	ds	2
   719  0050                     _pRTCArray:	
   720  0050                     	ds	4
   721  0054                     _ADCvalue:	
   722  0054                     	ds	2
   723                           
   724                           	psect	dataBANK0
   725  0056                     __pdataBANK0:	
   726  0056                     _state:	
   727  0056                     	ds	2
   728                           
   729                           	psect	clrtext
   730  14FF                     clear_ram0:	
   731                           ;	Called with FSR containing the base address, and
   732                           ;	W with the last address+1
   733                           
   734  14FF  0064               	clrwdt	;clear the watchdog before getting into this loop
   735  1500                     clrloop0:	
   736  1500  0180               	clrf	0	;clear RAM location pointed to by FSR
   737  1501  0A84               	incf	4,f	;increment pointer
   738  1502  0604               	xorwf	4,w	;XOR with final address
   739  1503  1903               	btfsc	3,2	;have we reached the end yet?
   740  1504  3400               	retlw	0	;all done for this memory range, return
   741  1505  0604               	xorwf	4,w	;XOR again to restore value
   742  1506  2D00               	goto	clrloop0	;do the next byte
   743                           
   744                           	psect	cstackCOMMON
   745  0070                     __pcstackCOMMON:	
   746  0070                     ?_InitLCD:	
   747  0070                     ?_InitI2C:	
   748                           ; 0 bytes @ 0x0
   749                           
   750  0070                     ??_InitI2C:	
   751                           ; 0 bytes @ 0x0
   752                           
   753  0070                     ?_DisplayFirstTimeToLCD:	
   754                           ; 0 bytes @ 0x0
   755                           
   756  0070                     ?_displayState1:	
   757                           ; 0 bytes @ 0x0
   758                           
   759  0070                     ?_displayState2:	
   760                           ; 0 bytes @ 0x0
   761                           
   762  0070                     ?_displayState3:	
   763                           ; 0 bytes @ 0x0
   764                           
   765  0070                     ?_displayState4:	
   766                           ; 0 bytes @ 0x0
   767                           
   768  0070                     ?_DisplayTimeToLCD:	
   769                           ; 0 bytes @ 0x0
   770                           
   771  0070                     ?_WriteCommandToLCD:	
   772                           ; 0 bytes @ 0x0
   773                           
   774  0070                     ?_DisplayDateOnLCD:	
   775                           ; 0 bytes @ 0x0
   776                           
   777  0070                     ?_WriteDataToLCD:	
   778                           ; 0 bytes @ 0x0
   779                           
   780  0070                     ?_ClearLCDScreen:	
   781                           ; 0 bytes @ 0x0
   782                           
   783  0070                     ?_I2C_Start:	
   784                           ; 0 bytes @ 0x0
   785                           
   786  0070                     ??_I2C_Start:	
   787                           ; 0 bytes @ 0x0
   788                           
   789  0070                     ?_I2C_Write_Byte:	
   790                           ; 0 bytes @ 0x0
   791                           
   792  0070                     ??_I2C_Write_Byte:	
   793                           ; 1 bit 
   794                           
   795  0070                     ?_I2C_Stop:	
   796                           ; 0 bytes @ 0x0
   797                           
   798  0070                     ??_I2C_Stop:	
   799                           ; 0 bytes @ 0x0
   800                           
   801  0070                     ?_I2C_ReStart:	
   802                           ; 0 bytes @ 0x0
   803                           
   804  0070                     ??_I2C_ReStart:	
   805                           ; 0 bytes @ 0x0
   806                           
   807  0070                     ??_I2C_Read_Byte:	
   808                           ; 0 bytes @ 0x0
   809                           
   810  0070                     ?_I2C_Send_NACK:	
   811                           ; 0 bytes @ 0x0
   812                           
   813  0070                     ??_I2C_Send_NACK:	
   814                           ; 0 bytes @ 0x0
   815                           
   816  0070                     ?_I2C_Send_ACK:	
   817                           ; 0 bytes @ 0x0
   818                           
   819  0070                     ??_I2C_Send_ACK:	
   820                           ; 0 bytes @ 0x0
   821                           
   822  0070                     ?_main:	
   823                           ; 0 bytes @ 0x0
   824                           
   825  0070                     ?_ADCinit:	
   826                           ; 0 bytes @ 0x0
   827                           
   828  0070                     ??_ADCinit:	
   829                           ; 0 bytes @ 0x0
   830                           
   831  0070                     ?_ToggleEpinOfLCD:	
   832                           ; 0 bytes @ 0x0
   833                           
   834  0070                     ??_ToggleEpinOfLCD:	
   835                           ; 0 bytes @ 0x0
   836                           
   837  0070                     ?_Get_DS1307_RTC_Time:	
   838                           ; 0 bytes @ 0x0
   839                           
   840  0070                     ?_Get_DS1307_RTC_Date:	
   841                           ; 1 bytes @ 0x0
   842                           
   843  0070                     ?_I2C_Read_Byte:	
   844                           ; 1 bytes @ 0x0
   845                           
   846  0070                     ?___bmul:	
   847                           ; 1 bytes @ 0x0
   848                           
   849  0070                     ?_ReadADC:	
   850                           ; 1 bytes @ 0x0
   851                           
   852  0070                     ?___awdiv:	
   853                           ; 2 bytes @ 0x0
   854                           
   855  0070                     ?___awmod:	
   856                           ; 2 bytes @ 0x0
   857                           
   858  0070                     ?___lwdiv:	
   859                           ; 2 bytes @ 0x0
   860                           
   861  0070                     ?___ftpack:	
   862                           ; 2 bytes @ 0x0
   863                           
   864  0070                     I2C_Write_Byte@Byte:	
   865                           ; 3 bytes @ 0x0
   866                           
   867  0070                     ___bmul@multiplicand:	
   868                           ; 1 bytes @ 0x0
   869                           
   870  0070                     ___awdiv@divisor:	
   871                           ; 1 bytes @ 0x0
   872                           
   873  0070                     ___awmod@divisor:	
   874                           ; 2 bytes @ 0x0
   875                           
   876  0070                     ___lwdiv@divisor:	
   877                           ; 2 bytes @ 0x0
   878                           
   879  0070                     ___ftpack@arg:	
   880                           ; 2 bytes @ 0x0
   881                           
   882                           
   883                           ; 3 bytes @ 0x0
   884  0070                     	ds	1
   885  0071                     ??_WriteCommandToLCD:	
   886  0071                     ??_WriteDataToLCD:	
   887                           ; 0 bytes @ 0x1
   888                           
   889  0071                     ?_Write_Bytes_To_DS1307_RTC:	
   890                           ; 0 bytes @ 0x1
   891                           
   892  0071                     ?_Read_Bytes_From_DS1307_RTC:	
   893                           ; 0 bytes @ 0x1
   894                           
   895  0071                     ??___bmul:	
   896                           ; 0 bytes @ 0x1
   897                           
   898  0071                     Write_Bytes_To_DS1307_RTC@pData:	
   899                           ; 0 bytes @ 0x1
   900                           
   901  0071                     Read_Bytes_From_DS1307_RTC@pData:	
   902                           ; 1 bytes @ 0x1
   903                           
   904                           
   905                           ; 1 bytes @ 0x1
   906  0071                     	ds	1
   907  0072                     ??_ReadADC:	
   908  0072                     Write_Bytes_To_DS1307_RTC@NoOfBytes:	
   909                           ; 0 bytes @ 0x2
   910                           
   911  0072                     ___bmul@product:	
   912                           ; 1 bytes @ 0x2
   913                           
   914  0072                     ReadADC@nhietdo:	
   915                           ; 1 bytes @ 0x2
   916                           
   917  0072                     Read_Bytes_From_DS1307_RTC@NoOfBytes:	
   918                           ; 2 bytes @ 0x2
   919                           
   920  0072                     ___awdiv@dividend:	
   921                           ; 2 bytes @ 0x2
   922                           
   923  0072                     ___awmod@dividend:	
   924                           ; 2 bytes @ 0x2
   925                           
   926  0072                     ___lwdiv@dividend:	
   927                           ; 2 bytes @ 0x2
   928                           
   929                           
   930                           ; 2 bytes @ 0x2
   931  0072                     	ds	1
   932  0073                     ??_Write_Bytes_To_DS1307_RTC:	
   933  0073                     WriteCommandToLCD@Command:	
   934                           ; 0 bytes @ 0x3
   935                           
   936  0073                     WriteDataToLCD@LCDChar:	
   937                           ; 1 bytes @ 0x3
   938                           
   939  0073                     ___bmul@multiplier:	
   940                           ; 1 bytes @ 0x3
   941                           
   942  0073                     ___ftpack@exp:	
   943                           ; 1 bytes @ 0x3
   944                           
   945                           
   946                           ; 1 bytes @ 0x3
   947  0073                     	ds	1
   948  0074                     ??_InitLCD:	
   949  0074                     ?_WriteStringToLCD:	
   950                           ; 0 bytes @ 0x4
   951                           
   952  0074                     ??_ClearLCDScreen:	
   953                           ; 0 bytes @ 0x4
   954                           
   955  0074                     ??_Read_Bytes_From_DS1307_RTC:	
   956                           ; 0 bytes @ 0x4
   957                           
   958  0074                     ??___awdiv:	
   959                           ; 0 bytes @ 0x4
   960                           
   961  0074                     ??___awmod:	
   962                           ; 0 bytes @ 0x4
   963                           
   964  0074                     ??___lwdiv:	
   965                           ; 0 bytes @ 0x4
   966                           
   967  0074                     ___ftpack@sign:	
   968                           ; 0 bytes @ 0x4
   969                           
   970  0074                     WriteStringToLCD@s:	
   971                           ; 1 bytes @ 0x4
   972                           
   973                           
   974                           ; 2 bytes @ 0x4
   975  0074                     	ds	1
   976  0075                     ??___ftpack:	
   977  0075                     Write_Bytes_To_DS1307_RTC@Address:	
   978                           ; 0 bytes @ 0x5
   979                           
   980  0075                     ___awdiv@counter:	
   981                           ; 1 bytes @ 0x5
   982                           
   983  0075                     ___awmod@counter:	
   984                           ; 1 bytes @ 0x5
   985                           
   986  0075                     ___lwdiv@quotient:	
   987                           ; 1 bytes @ 0x5
   988                           
   989                           
   990                           ; 2 bytes @ 0x5
   991  0075                     	ds	1
   992  0076                     ??_WriteStringToLCD:	
   993  0076                     Read_Bytes_From_DS1307_RTC@Address:	
   994                           ; 0 bytes @ 0x6
   995                           
   996  0076                     ___awdiv@sign:	
   997                           ; 1 bytes @ 0x6
   998                           
   999  0076                     ___awmod@sign:	
  1000                           ; 1 bytes @ 0x6
  1001                           
  1002  0076                     Write_Bytes_To_DS1307_RTC@i:	
  1003                           ; 1 bytes @ 0x6
  1004                           
  1005                           
  1006                           ; 2 bytes @ 0x6
  1007  0076                     	ds	1
  1008  0077                     ___lwdiv@counter:	
  1009  0077                     Read_Bytes_From_DS1307_RTC@i:	
  1010                           ; 1 bytes @ 0x7
  1011                           
  1012  0077                     ___awdiv@quotient:	
  1013                           ; 2 bytes @ 0x7
  1014                           
  1015                           
  1016                           ; 2 bytes @ 0x7
  1017  0077                     	ds	1
  1018  0078                     ?___lwtoft:	
  1019  0078                     ___lwtoft@c:	
  1020                           ; 3 bytes @ 0x8
  1021                           
  1022                           
  1023                           ; 2 bytes @ 0x8
  1024  0078                     	ds	1
  1025  0079                     ?_Set_DS1307_RTC_Time:	
  1026  0079                     ?_Set_DS1307_RTC_Date:	
  1027                           ; 0 bytes @ 0x9
  1028                           
  1029  0079                     ??_DisplayFirstTimeToLCD:	
  1030                           ; 0 bytes @ 0x9
  1031                           
  1032  0079                     ??_Get_DS1307_RTC_Time:	
  1033                           ; 0 bytes @ 0x9
  1034                           
  1035  0079                     ??_DisplayTimeToLCD:	
  1036                           ; 0 bytes @ 0x9
  1037                           
  1038  0079                     ??_DisplayDateOnLCD:	
  1039                           ; 0 bytes @ 0x9
  1040                           
  1041  0079                     ??_Get_DS1307_RTC_Date:	
  1042                           ; 0 bytes @ 0x9
  1043                           
  1044  0079                     ?_WriteTempToLCD:	
  1045                           ; 0 bytes @ 0x9
  1046                           
  1047  0079                     Set_DS1307_RTC_Time@Hours:	
  1048                           ; 0 bytes @ 0x9
  1049                           
  1050  0079                     Set_DS1307_RTC_Date@Month:	
  1051                           ; 1 bytes @ 0x9
  1052                           
  1053  0079                     WriteTempToLCD@Temp:	
  1054                           ; 1 bytes @ 0x9
  1055                           
  1056                           
  1057                           ; 2 bytes @ 0x9
  1058  0079                     	ds	1
  1059  007A                     Set_DS1307_RTC_Time@Mins:	
  1060  007A                     Set_DS1307_RTC_Date@Year:	
  1061                           ; 1 bytes @ 0xA
  1062                           
  1063                           
  1064                           ; 1 bytes @ 0xA
  1065  007A                     	ds	1
  1066  007B                     ??_WriteTempToLCD:	
  1067  007B                     ??___lwtoft:	
  1068                           ; 0 bytes @ 0xB
  1069                           
  1070  007B                     Set_DS1307_RTC_Time@Secs:	
  1071                           ; 0 bytes @ 0xB
  1072                           
  1073  007B                     Set_DS1307_RTC_Date@Day:	
  1074                           ; 1 bytes @ 0xB
  1075                           
  1076  007B                     DisplayTimeToLCD@pTimeArray:	
  1077                           ; 1 bytes @ 0xB
  1078                           
  1079  007B                     DisplayDateOnLCD@pDateArray:	
  1080                           ; 1 bytes @ 0xB
  1081                           
  1082  007B                     DisplayFirstTimeToLCD@pTimeArray:	
  1083                           ; 1 bytes @ 0xB
  1084                           
  1085                           
  1086                           ; 1 bytes @ 0xB
  1087  007B                     	ds	1
  1088  007C                     Set_DS1307_RTC_Time@Mode:	
  1089  007C                     Set_DS1307_RTC_Date@Date:	
  1090                           ; 1 bytes @ 0xC
  1091                           
  1092                           
  1093                           ; 1 bytes @ 0xC
  1094  007C                     	ds	1
  1095  007D                     ??_displayState4:	
  1096                           
  1097                           	psect	cstackBANK0
  1098  0020                     __pcstackBANK0:	
  1099                           ; 0 bytes @ 0xD
  1100                           
  1101  0020                     ??_Set_DS1307_RTC_Time:	
  1102  0020                     ??_Set_DS1307_RTC_Date:	
  1103                           ; 0 bytes @ 0x0
  1104                           
  1105  0020                     ?___ftmul:	
  1106                           ; 0 bytes @ 0x0
  1107                           
  1108  0020                     displayState4@s:	
  1109                           ; 3 bytes @ 0x0
  1110                           
  1111  0020                     ___ftmul@f1:	
  1112                           ; 2 bytes @ 0x0
  1113                           
  1114                           
  1115                           ; 3 bytes @ 0x0
  1116  0020                     	ds	2
  1117  0022                     displayState4@h:	
  1118                           
  1119                           ; 2 bytes @ 0x2
  1120  0022                     	ds	1
  1121  0023                     ___ftmul@f2:	
  1122                           
  1123                           ; 3 bytes @ 0x3
  1124  0023                     	ds	1
  1125  0024                     displayState4@m:	
  1126                           
  1127                           ; 2 bytes @ 0x4
  1128  0024                     	ds	2
  1129  0026                     ??___ftmul:	
  1130                           
  1131                           ; 0 bytes @ 0x6
  1132  0026                     	ds	2
  1133  0028                     ??_displayState2:	
  1134  0028                     ??_displayState3:	
  1135                           ; 0 bytes @ 0x8
  1136                           
  1137                           
  1138                           ; 0 bytes @ 0x8
  1139  0028                     	ds	2
  1140  002A                     ___ftmul@exp:	
  1141                           
  1142                           ; 1 bytes @ 0xA
  1143  002A                     	ds	1
  1144  002B                     displayState2@s:	
  1145  002B                     displayState3@y:	
  1146                           ; 2 bytes @ 0xB
  1147                           
  1148  002B                     ___ftmul@f3_as_product:	
  1149                           ; 2 bytes @ 0xB
  1150                           
  1151                           
  1152                           ; 3 bytes @ 0xB
  1153  002B                     	ds	2
  1154  002D                     displayState2@h:	
  1155  002D                     displayState3@w:	
  1156                           ; 2 bytes @ 0xD
  1157                           
  1158                           
  1159                           ; 2 bytes @ 0xD
  1160  002D                     	ds	1
  1161  002E                     ___ftmul@cntr:	
  1162                           
  1163                           ; 1 bytes @ 0xE
  1164  002E                     	ds	1
  1165  002F                     ___ftmul@sign:	
  1166  002F                     displayState2@m:	
  1167                           ; 1 bytes @ 0xF
  1168                           
  1169  002F                     displayState3@d:	
  1170                           ; 2 bytes @ 0xF
  1171                           
  1172                           
  1173                           ; 2 bytes @ 0xF
  1174  002F                     	ds	1
  1175  0030                     ?___fttol:	
  1176  0030                     ___fttol@f1:	
  1177                           ; 4 bytes @ 0x10
  1178                           
  1179                           
  1180                           ; 3 bytes @ 0x10
  1181  0030                     	ds	1
  1182  0031                     displayState3@m:	
  1183                           
  1184                           ; 2 bytes @ 0x11
  1185  0031                     	ds	3
  1186  0034                     ??___fttol:	
  1187                           
  1188                           ; 0 bytes @ 0x14
  1189  0034                     	ds	4
  1190  0038                     ___fttol@sign1:	
  1191                           
  1192                           ; 1 bytes @ 0x18
  1193  0038                     	ds	1
  1194  0039                     ___fttol@lval:	
  1195                           
  1196                           ; 4 bytes @ 0x19
  1197  0039                     	ds	4
  1198  003D                     ___fttol@exp1:	
  1199                           
  1200                           ; 1 bytes @ 0x1D
  1201  003D                     	ds	1
  1202  003E                     ??_displayState1:	
  1203                           
  1204                           ; 0 bytes @ 0x1E
  1205  003E                     	ds	3
  1206  0041                     ??_main:	
  1207                           
  1208                           ; 0 bytes @ 0x21
  1209  0041                     	ds	3
  1210                           
  1211                           	psect	maintext
  1212  0874                     __pmaintext:	
  1213 ;;
  1214 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1215 ;;
  1216 ;; *************** function _main *****************
  1217 ;; Defined at:
  1218 ;;		line 25 in file "main.c"
  1219 ;; Parameters:    Size  Location     Type
  1220 ;;		None
  1221 ;; Auto vars:     Size  Location     Type
  1222 ;;		None
  1223 ;; Return value:  Size  Location     Type
  1224 ;;		None               void
  1225 ;; Registers used:
  1226 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1227 ;; Tracked objects:
  1228 ;;		On entry : B00/0
  1229 ;;		On exit  : 0/0
  1230 ;;		Unchanged: 0/0
  1231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1232 ;;      Params:         0       0       0       0       0
  1233 ;;      Locals:         0       0       0       0       0
  1234 ;;      Temps:          0       3       0       0       0
  1235 ;;      Totals:         0       3       0       0       0
  1236 ;;Total ram usage:        3 bytes
  1237 ;; Hardware stack levels required when called:    5
  1238 ;; This function calls:
  1239 ;;		_DisplayFirstTimeToLCD
  1240 ;;		_Get_DS1307_RTC_Time
  1241 ;;		_InitI2C
  1242 ;;		_InitLCD
  1243 ;;		_Set_DS1307_RTC_Date
  1244 ;;		_Set_DS1307_RTC_Time
  1245 ;;		_displayState1
  1246 ;;		_displayState2
  1247 ;;		_displayState3
  1248 ;;		_displayState4
  1249 ;; This function is called by:
  1250 ;;		Startup code after reset
  1251 ;; This function uses a non-reentrant model
  1252 ;;
  1253                           
  1254                           
  1255                           ;psect for function _main
  1256  0874                     _main:	
  1257                           
  1258                           ;main.c: 26: TRISA = 0xff;
  1259                           
  1260                           ;incstack = 0
  1261                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1262  0874  30FF               	movlw	255
  1263  0875  1683               	bsf	3,5	;RP0=1, select bank1
  1264  0876  1303               	bcf	3,6	;RP1=0, select bank1
  1265  0877  0085               	movwf	5	;volatile
  1266                           
  1267                           ;main.c: 27: TRISC = 0X00;
  1268  0878  0187               	clrf	7	;volatile
  1269                           
  1270                           ;main.c: 28: TRISD = 0X00;
  1271  0879  0188               	clrf	8	;volatile
  1272                           
  1273                           ;main.c: 29: InitLCD();
  1274  087A  120A  158A  20E8  120A  158A  	fcall	_InitLCD
  1275                           
  1276                           ;main.c: 30: InitI2C();
  1277  087F  160A  118A  2522  120A  158A  	fcall	_InitI2C
  1278                           
  1279                           ;main.c: 31: state = 1;
  1280  0884  3001               	movlw	1
  1281  0885  1283               	bcf	3,5	;RP0=0, select bank0
  1282  0886  1303               	bcf	3,6	;RP1=0, select bank0
  1283  0887  00D6               	movwf	_state
  1284  0888  3000               	movlw	0
  1285  0889  00D7               	movwf	_state+1
  1286                           
  1287                           ;main.c: 34: Set_DS1307_RTC_Time(1, 2, 30, 30);
  1288  088A  3002               	movlw	2
  1289  088B  00C1               	movwf	??_main
  1290  088C  0841               	movf	??_main,w
  1291  088D  00F9               	movwf	Set_DS1307_RTC_Time@Hours
  1292  088E  301E               	movlw	30
  1293  088F  00C2               	movwf	??_main+1
  1294  0890  0842               	movf	??_main+1,w
  1295  0891  00FA               	movwf	Set_DS1307_RTC_Time@Mins
  1296  0892  301E               	movlw	30
  1297  0893  00C3               	movwf	??_main+2
  1298  0894  0843               	movf	??_main+2,w
  1299  0895  00FB               	movwf	Set_DS1307_RTC_Time@Secs
  1300  0896  3001               	movlw	1
  1301  0897  120A  158A  2298  120A  158A  	fcall	_Set_DS1307_RTC_Time
  1302                           
  1303                           ;main.c: 36: Set_DS1307_RTC_Date(04, 04, 16, 2);
  1304  089C  3004               	movlw	4
  1305  089D  1283               	bcf	3,5	;RP0=0, select bank0
  1306  089E  1303               	bcf	3,6	;RP1=0, select bank0
  1307  089F  00C1               	movwf	??_main
  1308  08A0  0841               	movf	??_main,w
  1309  08A1  00F9               	movwf	Set_DS1307_RTC_Date@Month
  1310  08A2  3010               	movlw	16
  1311  08A3  00C2               	movwf	??_main+1
  1312  08A4  0842               	movf	??_main+1,w
  1313  08A5  00FA               	movwf	Set_DS1307_RTC_Date@Year
  1314  08A6  3002               	movlw	2
  1315  08A7  00C3               	movwf	??_main+2
  1316  08A8  0843               	movf	??_main+2,w
  1317  08A9  00FB               	movwf	Set_DS1307_RTC_Date@Day
  1318  08AA  3004               	movlw	4
  1319  08AB  120A  158A  2506  120A  158A  	fcall	_Set_DS1307_RTC_Date
  1320                           
  1321                           ;main.c: 37: DisplayFirstTimeToLCD(Get_DS1307_RTC_Time());
  1322  08B0  120A  158A  21FD  120A  158A  	fcall	_Get_DS1307_RTC_Time
  1323  08B5  120A  158A  242D  120A  158A  	fcall	_DisplayFirstTimeToLCD
  1324                           
  1325                           ;main.c: 39: switch (state) {
  1326                           
  1327                           ;main.c: 38: while (1) {
  1328  08BA  28D2               	goto	l3314
  1329  08BB                     l3304:	
  1330                           ;main.c: 40: case 1:
  1331                           
  1332                           
  1333                           ;main.c: 41: displayState1();
  1334  08BB  120A  158A  25EE  120A  158A  	fcall	_displayState1
  1335                           
  1336                           ;main.c: 42: break;
  1337  08C0  28D2               	goto	l3314
  1338  08C1                     l3306:	
  1339                           ;main.c: 43: case 2:
  1340                           
  1341                           
  1342                           ;main.c: 44: displayState2();
  1343  08C1  120A  118A  233E  120A  158A  	fcall	_displayState2
  1344                           
  1345                           ;main.c: 45: break;
  1346  08C6  28D2               	goto	l3314
  1347  08C7                     l3308:	
  1348                           ;main.c: 46: case 3:
  1349                           
  1350                           
  1351                           ;main.c: 47: displayState3();
  1352  08C7  120A  118A  24FC  120A  158A  	fcall	_displayState3
  1353                           
  1354                           ;main.c: 48: break;
  1355  08CC  28D2               	goto	l3314
  1356  08CD                     l3310:	
  1357                           ;main.c: 49: case 4:
  1358                           
  1359                           
  1360                           ;main.c: 50: displayState4();
  1361  08CD  120A  118A  21AC  120A  158A  	fcall	_displayState4
  1362  08D2                     l3314:	
  1363                           ;main.c: 52: }
  1364                           
  1365                           ;main.c: 51: break;
  1366                           
  1367                           
  1368                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1369                           ; Switch size 1, requested type "space"
  1370                           ; Number of cases is 1, Range of values is 0 to 0
  1371                           ; switch strategies available:
  1372                           ; Name         Instructions Cycles
  1373                           ; simple_byte            4     3 (average)
  1374                           ; direct_byte           11     8 (fixed)
  1375                           ; jumptable            260     6 (fixed)
  1376                           ;	Chosen strategy is simple_byte
  1377  08D2  1283               	bcf	3,5	;RP0=0, select bank0
  1378  08D3  1303               	bcf	3,6	;RP1=0, select bank0
  1379  08D4  0857               	movf	_state+1,w
  1380  08D5  3A00               	xorlw	0	; case 0
  1381  08D6  1903               	skipnz
  1382  08D7  28D9               	goto	l3484
  1383  08D8  28D2               	goto	l3314
  1384  08D9                     l3484:	
  1385                           
  1386                           ; Switch size 1, requested type "space"
  1387                           ; Number of cases is 4, Range of values is 1 to 4
  1388                           ; switch strategies available:
  1389                           ; Name         Instructions Cycles
  1390                           ; simple_byte           13     7 (average)
  1391                           ; direct_byte           23    11 (fixed)
  1392                           ; jumptable            263     9 (fixed)
  1393                           ;	Chosen strategy is simple_byte
  1394  08D9  0856               	movf	_state,w
  1395  08DA  3A01               	xorlw	1	; case 1
  1396  08DB  1903               	skipnz
  1397  08DC  28BB               	goto	l3304
  1398  08DD  3A03               	xorlw	3	; case 2
  1399  08DE  1903               	skipnz
  1400  08DF  28C1               	goto	l3306
  1401  08E0  3A01               	xorlw	1	; case 3
  1402  08E1  1903               	skipnz
  1403  08E2  28C7               	goto	l3308
  1404  08E3  3A07               	xorlw	7	; case 4
  1405  08E4  1903               	skipnz
  1406  08E5  28CD               	goto	l3310
  1407  08E6  28D2               	goto	l3314
  1408  08E7  28D2               	goto	l3314
  1409  08E8                     __end_of_main:	
  1410                           
  1411                           	psect	text1
  1412  01AC                     __ptext1:	
  1413 ;; *************** function _displayState4 *****************
  1414 ;; Defined at:
  1415 ;;		line 355 in file "main.c"
  1416 ;; Parameters:    Size  Location     Type
  1417 ;;		None
  1418 ;; Auto vars:     Size  Location     Type
  1419 ;;  m               2    4[BANK0 ] unsigned int 
  1420 ;;  h               2    2[BANK0 ] unsigned int 
  1421 ;;  s               2    0[BANK0 ] unsigned int 
  1422 ;; Return value:  Size  Location     Type
  1423 ;;		None               void
  1424 ;; Registers used:
  1425 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1426 ;; Tracked objects:
  1427 ;;		On entry : 0/0
  1428 ;;		On exit  : 0/0
  1429 ;;		Unchanged: 0/0
  1430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1431 ;;      Params:         0       0       0       0       0
  1432 ;;      Locals:         0       6       0       0       0
  1433 ;;      Temps:          0       0       0       0       0
  1434 ;;      Totals:         0       6       0       0       0
  1435 ;;Total ram usage:        6 bytes
  1436 ;; Hardware stack levels used:    1
  1437 ;; Hardware stack levels required when called:    4
  1438 ;; This function calls:
  1439 ;;		_ClearLCDScreen
  1440 ;;		_DisplayFirstTimeToLCD
  1441 ;;		_Get_DS1307_RTC_Time
  1442 ;;		_WriteCommandToLCD
  1443 ;;		_WriteStringToLCD
  1444 ;;		_WriteTempToLCD
  1445 ;; This function is called by:
  1446 ;;		_main
  1447 ;; This function uses a non-reentrant model
  1448 ;;
  1449                           
  1450                           
  1451                           ;psect for function _displayState4
  1452  01AC                     _displayState4:	
  1453                           
  1454                           ;main.c: 356: ClearLCDScreen();
  1455                           
  1456                           ;incstack = 0
  1457                           ; Regs used in _displayState4: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1458  01AC  160A  118A  252F  120A  118A  	fcall	_ClearLCDScreen
  1459                           
  1460                           ;main.c: 357: unsigned int h;
  1461                           ;main.c: 358: unsigned int m;
  1462                           ;main.c: 359: unsigned int s;
  1463                           ;main.c: 360: h = 0;
  1464  01B1  1283               	bcf	3,5	;RP0=0, select bank0
  1465  01B2  1303               	bcf	3,6	;RP1=0, select bank0
  1466  01B3  01A2               	clrf	displayState4@h
  1467  01B4  01A3               	clrf	displayState4@h+1
  1468                           
  1469                           ;main.c: 361: m = 0;
  1470  01B5  01A4               	clrf	displayState4@m
  1471  01B6  01A5               	clrf	displayState4@m+1
  1472                           
  1473                           ;main.c: 362: s = 0;
  1474  01B7  01A0               	clrf	displayState4@s
  1475  01B8  01A1               	clrf	displayState4@s+1
  1476                           
  1477                           ;main.c: 363: if (!RA1) {
  1478  01B9  1885               	btfsc	5,1	;volatile
  1479  01BA  29CA               	goto	l3180
  1480                           
  1481                           ;main.c: 364: state++;
  1482  01BB  3001               	movlw	1
  1483  01BC  07D6               	addwf	_state,f
  1484  01BD  1803               	skipnc
  1485  01BE  0AD7               	incf	_state+1,f
  1486  01BF  3000               	movlw	0
  1487  01C0  07D7               	addwf	_state+1,f
  1488                           
  1489                           ;main.c: 365: if (state == 5) {
  1490  01C1  3005               	movlw	5
  1491  01C2  0656               	xorwf	_state,w
  1492  01C3  0457               	iorwf	_state+1,w
  1493  01C4  1D03               	btfss	3,2
  1494  01C5  29CA               	goto	l3180
  1495  01C6                     l3178:	
  1496                           
  1497                           ;main.c: 366: state = 1;
  1498  01C6  3001               	movlw	1
  1499  01C7  00D6               	movwf	_state
  1500  01C8  3000               	movlw	0
  1501  01C9  00D7               	movwf	_state+1
  1502  01CA                     l3180:	
  1503                           ;main.c: 367: }
  1504                           ;main.c: 368: }
  1505                           ;main.c: 369: while (1) {
  1506                           
  1507                           
  1508                           ;main.c: 370: WriteCommandToLCD(0x80);
  1509  01CA  3080               	movlw	128
  1510  01CB  160A  118A  25F9  120A  118A  	fcall	_WriteCommandToLCD
  1511                           
  1512                           ;main.c: 371: WriteStringToLCD("     ALARM     ");
  1513  01D0  3073               	movlw	low (STR_33| (0+32768))
  1514  01D1  00F4               	movwf	WriteStringToLCD@s
  1515  01D2  3090               	movlw	high (STR_33| (0+32768))
  1516  01D3  00F5               	movwf	WriteStringToLCD@s+1
  1517  01D4  160A  118A  25AF  120A  118A  	fcall	_WriteStringToLCD
  1518                           
  1519                           ;main.c: 372: WriteCommandToLCD(0xc0);
  1520  01D9  30C0               	movlw	192
  1521  01DA  160A  118A  25F9  120A  118A  	fcall	_WriteCommandToLCD
  1522                           
  1523                           ;main.c: 373: WriteTempToLCD(h);
  1524  01DF  1283               	bcf	3,5	;RP0=0, select bank0
  1525  01E0  1303               	bcf	3,6	;RP1=0, select bank0
  1526  01E1  0823               	movf	displayState4@h+1,w
  1527  01E2  00FA               	movwf	WriteTempToLCD@Temp+1
  1528  01E3  0822               	movf	displayState4@h,w
  1529  01E4  00F9               	movwf	WriteTempToLCD@Temp
  1530  01E5  160A  118A  25D2  120A  118A  	fcall	_WriteTempToLCD
  1531                           
  1532                           ;main.c: 374: WriteStringToLCD(":");
  1533  01EA  300B               	movlw	low (STR_4| (0+32768))
  1534  01EB  00F4               	movwf	WriteStringToLCD@s
  1535  01EC  3091               	movlw	high (STR_4| (0+32768))
  1536  01ED  00F5               	movwf	WriteStringToLCD@s+1
  1537  01EE  160A  118A  25AF  120A  118A  	fcall	_WriteStringToLCD
  1538                           
  1539                           ;main.c: 375: WriteTempToLCD(m);
  1540  01F3  1283               	bcf	3,5	;RP0=0, select bank0
  1541  01F4  1303               	bcf	3,6	;RP1=0, select bank0
  1542  01F5  0825               	movf	displayState4@m+1,w
  1543  01F6  00FA               	movwf	WriteTempToLCD@Temp+1
  1544  01F7  0824               	movf	displayState4@m,w
  1545  01F8  00F9               	movwf	WriteTempToLCD@Temp
  1546  01F9  160A  118A  25D2  120A  118A  	fcall	_WriteTempToLCD
  1547                           
  1548                           ;main.c: 376: WriteStringToLCD(":");
  1549  01FE  300B               	movlw	low (STR_4| (0+32768))
  1550  01FF  00F4               	movwf	WriteStringToLCD@s
  1551  0200  3091               	movlw	high (STR_4| (0+32768))
  1552  0201  00F5               	movwf	WriteStringToLCD@s+1
  1553  0202  160A  118A  25AF  120A  118A  	fcall	_WriteStringToLCD
  1554                           
  1555                           ;main.c: 377: WriteTempToLCD(s);
  1556  0207  1283               	bcf	3,5	;RP0=0, select bank0
  1557  0208  1303               	bcf	3,6	;RP1=0, select bank0
  1558  0209  0821               	movf	displayState4@s+1,w
  1559  020A  00FA               	movwf	WriteTempToLCD@Temp+1
  1560  020B  0820               	movf	displayState4@s,w
  1561  020C  00F9               	movwf	WriteTempToLCD@Temp
  1562  020D  160A  118A  25D2  120A  118A  	fcall	_WriteTempToLCD
  1563                           
  1564                           ;main.c: 378: if (!RA1) {
  1565  0212  1283               	bcf	3,5	;RP0=0, select bank0
  1566  0213  1303               	bcf	3,6	;RP1=0, select bank0
  1567  0214  1885               	btfsc	5,1	;volatile
  1568  0215  2A1F               	goto	l198
  1569                           
  1570                           ;main.c: 379: DisplayFirstTimeToLCD(Get_DS1307_RTC_Time());
  1571  0216  120A  158A  21FD  120A  118A  	fcall	_Get_DS1307_RTC_Time
  1572  021B  120A  158A  242D   	fcall	_DisplayFirstTimeToLCD
  1573                           
  1574                           ;main.c: 381: break;
  1575  021E  0008               	return
  1576  021F                     l198:	
  1577                           ;main.c: 382: }
  1578                           ;main.c: 383: while (1) {
  1579                           
  1580                           
  1581                           ;main.c: 384: if (RA4 == 0) {
  1582  021F  1283               	bcf	3,5	;RP0=0, select bank0
  1583  0220  1303               	bcf	3,6	;RP1=0, select bank0
  1584  0221  1A05               	btfsc	5,4	;volatile
  1585  0222  2A2E               	goto	l199
  1586                           
  1587                           ;main.c: 385: switch_state++;
  1588  0223  3001               	movlw	1
  1589  0224  07CC               	addwf	_switch_state,f
  1590  0225  1803               	skipnc
  1591  0226  0ACD               	incf	_switch_state+1,f
  1592  0227  3000               	movlw	0
  1593  0228  07CD               	addwf	_switch_state+1,f
  1594                           
  1595                           ;main.c: 386: if (switch_state == 4) {
  1596  0229  3004               	movlw	4
  1597  022A  064C               	xorwf	_switch_state,w
  1598  022B  044D               	iorwf	_switch_state+1,w
  1599  022C  1903               	btfsc	3,2
  1600  022D  29CA               	goto	l3180
  1601  022E                     l199:	
  1602                           ;main.c: 387: break;
  1603                           
  1604                           
  1605                           ;main.c: 388: }
  1606                           ;main.c: 389: }
  1607                           ;main.c: 390: if (RA1 == 0) {
  1608  022E  1885               	btfsc	5,1	;volatile
  1609  022F  2B1D               	goto	l3280
  1610  0230  29C6               	goto	l3178
  1611  0231                     l3208:	
  1612                           ;main.c: 395: case 1:
  1613                           
  1614                           ;main.c: 393: }
  1615                           ;main.c: 394: switch (switch_state) {
  1616                           
  1617                           ;main.c: 392: break;
  1618                           
  1619                           ;main.c: 391: state = 1;
  1620                           
  1621                           
  1622                           ;main.c: 396: WriteCommandToLCD(0x80);
  1623  0231  3080               	movlw	128
  1624  0232  160A  118A  25F9  120A  118A  	fcall	_WriteCommandToLCD
  1625                           
  1626                           ;main.c: 397: WriteStringToLCD("    HOUR     ");
  1627  0237  30C2               	movlw	low (STR_36| (0+32768))
  1628  0238  00F4               	movwf	WriteStringToLCD@s
  1629  0239  3090               	movlw	high (STR_36| (0+32768))
  1630  023A  00F5               	movwf	WriteStringToLCD@s+1
  1631  023B  160A  118A  25AF  120A  118A  	fcall	_WriteStringToLCD
  1632                           
  1633                           ;main.c: 398: if (RA2 == 0 && h < 24) {
  1634  0240  1283               	bcf	3,5	;RP0=0, select bank0
  1635  0241  1303               	bcf	3,6	;RP1=0, select bank0
  1636  0242  1905               	btfsc	5,2	;volatile
  1637  0243  2A62               	goto	l3222
  1638  0244  3000               	movlw	0
  1639  0245  0223               	subwf	displayState4@h+1,w
  1640  0246  3018               	movlw	24
  1641  0247  1903               	skipnz
  1642  0248  0222               	subwf	displayState4@h,w
  1643  0249  1803               	skipnc
  1644  024A  2A62               	goto	l3222
  1645                           
  1646                           ;main.c: 399: h++;
  1647  024B  3001               	movlw	1
  1648  024C  07A2               	addwf	displayState4@h,f
  1649  024D  1803               	skipnc
  1650  024E  0AA3               	incf	displayState4@h+1,f
  1651  024F  3000               	movlw	0
  1652  0250  07A3               	addwf	displayState4@h+1,f
  1653                           
  1654                           ;main.c: 400: WriteCommandToLCD(0xc0);
  1655  0251  30C0               	movlw	192
  1656  0252  160A  118A  25F9  120A  118A  	fcall	_WriteCommandToLCD
  1657                           
  1658                           ;main.c: 401: WriteTempToLCD(h);
  1659  0257  1283               	bcf	3,5	;RP0=0, select bank0
  1660  0258  1303               	bcf	3,6	;RP1=0, select bank0
  1661  0259  0823               	movf	displayState4@h+1,w
  1662  025A  00FA               	movwf	WriteTempToLCD@Temp+1
  1663  025B  0822               	movf	displayState4@h,w
  1664  025C  00F9               	movwf	WriteTempToLCD@Temp
  1665  025D  160A  118A  25D2  120A  118A  	fcall	_WriteTempToLCD
  1666  0262                     l3222:	
  1667                           
  1668                           ;main.c: 402: }
  1669                           ;main.c: 403: if (RA3 == 0 && h > 0) {
  1670  0262  1283               	bcf	3,5	;RP0=0, select bank0
  1671  0263  1303               	bcf	3,6	;RP1=0, select bank0
  1672  0264  1985               	btfsc	5,3	;volatile
  1673  0265  2B2F               	goto	l3282
  1674  0266  0822               	movf	displayState4@h,w
  1675  0267  0423               	iorwf	displayState4@h+1,w
  1676  0268  1903               	btfsc	3,2
  1677  0269  2B2F               	goto	l3282
  1678                           
  1679                           ;main.c: 404: h--;
  1680  026A  3001               	movlw	1
  1681  026B  02A2               	subwf	displayState4@h,f
  1682  026C  3000               	movlw	0
  1683  026D  1C03               	skipc
  1684  026E  03A3               	decf	displayState4@h+1,f
  1685  026F  02A3               	subwf	displayState4@h+1,f
  1686                           
  1687                           ;main.c: 405: WriteCommandToLCD(0xc0);
  1688  0270  30C0               	movlw	192
  1689  0271  160A  118A  25F9  120A  118A  	fcall	_WriteCommandToLCD
  1690                           
  1691                           ;main.c: 406: WriteTempToLCD(h);
  1692  0276  1283               	bcf	3,5	;RP0=0, select bank0
  1693  0277  1303               	bcf	3,6	;RP1=0, select bank0
  1694  0278  0823               	movf	displayState4@h+1,w
  1695  0279  00FA               	movwf	WriteTempToLCD@Temp+1
  1696  027A  0822               	movf	displayState4@h,w
  1697  027B  00F9               	movwf	WriteTempToLCD@Temp
  1698  027C  160A  118A  25D2  120A  118A  	fcall	_WriteTempToLCD
  1699                           
  1700                           ;main.c: 407: }
  1701                           ;main.c: 408: break;
  1702  0281  2B2F               	goto	l3282
  1703  0282                     l3232:	
  1704                           ;main.c: 410: case 2:
  1705                           
  1706                           
  1707                           ;main.c: 411: WriteCommandToLCD(0x80);
  1708  0282  3080               	movlw	128
  1709  0283  160A  118A  25F9  120A  118A  	fcall	_WriteCommandToLCD
  1710                           
  1711                           ;main.c: 412: WriteStringToLCD("     MINUTE    ");
  1712  0288  3083               	movlw	low (STR_37| (0+32768))
  1713  0289  00F4               	movwf	WriteStringToLCD@s
  1714  028A  3090               	movlw	high (STR_37| (0+32768))
  1715  028B  00F5               	movwf	WriteStringToLCD@s+1
  1716  028C  160A  118A  25AF  120A  118A  	fcall	_WriteStringToLCD
  1717                           
  1718                           ;main.c: 413: if (RA2 == 0 && m < 60) {
  1719  0291  1283               	bcf	3,5	;RP0=0, select bank0
  1720  0292  1303               	bcf	3,6	;RP1=0, select bank0
  1721  0293  1905               	btfsc	5,2	;volatile
  1722  0294  2AB3               	goto	l3246
  1723  0295  3000               	movlw	0
  1724  0296  0225               	subwf	displayState4@m+1,w
  1725  0297  303C               	movlw	60
  1726  0298  1903               	skipnz
  1727  0299  0224               	subwf	displayState4@m,w
  1728  029A  1803               	skipnc
  1729  029B  2AB3               	goto	l3246
  1730                           
  1731                           ;main.c: 414: m++;
  1732  029C  3001               	movlw	1
  1733  029D  07A4               	addwf	displayState4@m,f
  1734  029E  1803               	skipnc
  1735  029F  0AA5               	incf	displayState4@m+1,f
  1736  02A0  3000               	movlw	0
  1737  02A1  07A5               	addwf	displayState4@m+1,f
  1738                           
  1739                           ;main.c: 415: WriteCommandToLCD(0xc0 + 3);
  1740  02A2  30C3               	movlw	195
  1741  02A3  160A  118A  25F9  120A  118A  	fcall	_WriteCommandToLCD
  1742                           
  1743                           ;main.c: 416: WriteTempToLCD(m);
  1744  02A8  1283               	bcf	3,5	;RP0=0, select bank0
  1745  02A9  1303               	bcf	3,6	;RP1=0, select bank0
  1746  02AA  0825               	movf	displayState4@m+1,w
  1747  02AB  00FA               	movwf	WriteTempToLCD@Temp+1
  1748  02AC  0824               	movf	displayState4@m,w
  1749  02AD  00F9               	movwf	WriteTempToLCD@Temp
  1750  02AE  160A  118A  25D2  120A  118A  	fcall	_WriteTempToLCD
  1751  02B3                     l3246:	
  1752                           
  1753                           ;main.c: 417: }
  1754                           ;main.c: 418: if (RA3 == 0 && m > 0) {
  1755  02B3  1283               	bcf	3,5	;RP0=0, select bank0
  1756  02B4  1303               	bcf	3,6	;RP1=0, select bank0
  1757  02B5  1985               	btfsc	5,3	;volatile
  1758  02B6  2B2F               	goto	l3282
  1759  02B7  0824               	movf	displayState4@m,w
  1760  02B8  0425               	iorwf	displayState4@m+1,w
  1761  02B9  1903               	btfsc	3,2
  1762  02BA  2B2F               	goto	l3282
  1763                           
  1764                           ;main.c: 419: m--;
  1765  02BB  3001               	movlw	1
  1766  02BC  02A4               	subwf	displayState4@m,f
  1767  02BD  3000               	movlw	0
  1768  02BE  1C03               	skipc
  1769  02BF  03A5               	decf	displayState4@m+1,f
  1770  02C0  02A5               	subwf	displayState4@m+1,f
  1771                           
  1772                           ;main.c: 420: WriteCommandToLCD(0xc0 + 3);
  1773  02C1  30C3               	movlw	195
  1774  02C2  160A  118A  25F9  120A  118A  	fcall	_WriteCommandToLCD
  1775                           
  1776                           ;main.c: 421: WriteTempToLCD(m);
  1777  02C7  1283               	bcf	3,5	;RP0=0, select bank0
  1778  02C8  1303               	bcf	3,6	;RP1=0, select bank0
  1779  02C9  0825               	movf	displayState4@m+1,w
  1780  02CA  00FA               	movwf	WriteTempToLCD@Temp+1
  1781  02CB  0824               	movf	displayState4@m,w
  1782  02CC  00F9               	movwf	WriteTempToLCD@Temp
  1783  02CD  160A  118A  25D2  120A  118A  	fcall	_WriteTempToLCD
  1784                           
  1785                           ;main.c: 422: }
  1786                           ;main.c: 423: break;
  1787  02D2  2B2F               	goto	l3282
  1788  02D3                     l3256:	
  1789                           ;main.c: 424: case 3:
  1790                           
  1791                           
  1792                           ;main.c: 425: WriteCommandToLCD(0x80);
  1793  02D3  3080               	movlw	128
  1794  02D4  160A  118A  25F9  120A  118A  	fcall	_WriteCommandToLCD
  1795                           
  1796                           ;main.c: 426: WriteStringToLCD("    SECOND   ");
  1797  02D9  30D0               	movlw	low (STR_38| (0+32768))
  1798  02DA  00F4               	movwf	WriteStringToLCD@s
  1799  02DB  3090               	movlw	high (STR_38| (0+32768))
  1800  02DC  00F5               	movwf	WriteStringToLCD@s+1
  1801  02DD  160A  118A  25AF  120A  118A  	fcall	_WriteStringToLCD
  1802                           
  1803                           ;main.c: 427: if (RA2 == 0) {
  1804  02E2  1283               	bcf	3,5	;RP0=0, select bank0
  1805  02E3  1303               	bcf	3,6	;RP1=0, select bank0
  1806  02E4  1905               	btfsc	5,2	;volatile
  1807  02E5  2AFD               	goto	l3268
  1808                           
  1809                           ;main.c: 428: s++;
  1810  02E6  3001               	movlw	1
  1811  02E7  07A0               	addwf	displayState4@s,f
  1812  02E8  1803               	skipnc
  1813  02E9  0AA1               	incf	displayState4@s+1,f
  1814  02EA  3000               	movlw	0
  1815  02EB  07A1               	addwf	displayState4@s+1,f
  1816                           
  1817                           ;main.c: 429: WriteCommandToLCD(0xc0 + 6);
  1818  02EC  30C6               	movlw	198
  1819  02ED  160A  118A  25F9  120A  118A  	fcall	_WriteCommandToLCD
  1820                           
  1821                           ;main.c: 430: WriteTempToLCD(s);
  1822  02F2  1283               	bcf	3,5	;RP0=0, select bank0
  1823  02F3  1303               	bcf	3,6	;RP1=0, select bank0
  1824  02F4  0821               	movf	displayState4@s+1,w
  1825  02F5  00FA               	movwf	WriteTempToLCD@Temp+1
  1826  02F6  0820               	movf	displayState4@s,w
  1827  02F7  00F9               	movwf	WriteTempToLCD@Temp
  1828  02F8  160A  118A  25D2  120A  118A  	fcall	_WriteTempToLCD
  1829  02FD                     l3268:	
  1830                           
  1831                           ;main.c: 431: }
  1832                           ;main.c: 432: if (RA3 == 0 && s > 0) {
  1833  02FD  1283               	bcf	3,5	;RP0=0, select bank0
  1834  02FE  1303               	bcf	3,6	;RP1=0, select bank0
  1835  02FF  1985               	btfsc	5,3	;volatile
  1836  0300  2B2F               	goto	l3282
  1837  0301  0820               	movf	displayState4@s,w
  1838  0302  0421               	iorwf	displayState4@s+1,w
  1839  0303  1903               	btfsc	3,2
  1840  0304  2B2F               	goto	l3282
  1841                           
  1842                           ;main.c: 433: s--;
  1843  0305  3001               	movlw	1
  1844  0306  02A0               	subwf	displayState4@s,f
  1845  0307  3000               	movlw	0
  1846  0308  1C03               	skipc
  1847  0309  03A1               	decf	displayState4@s+1,f
  1848  030A  02A1               	subwf	displayState4@s+1,f
  1849                           
  1850                           ;main.c: 434: WriteCommandToLCD(0xc0 + 6);
  1851  030B  30C6               	movlw	198
  1852  030C  160A  118A  25F9  120A  118A  	fcall	_WriteCommandToLCD
  1853                           
  1854                           ;main.c: 435: WriteTempToLCD(s);
  1855  0311  1283               	bcf	3,5	;RP0=0, select bank0
  1856  0312  1303               	bcf	3,6	;RP1=0, select bank0
  1857  0313  0821               	movf	displayState4@s+1,w
  1858  0314  00FA               	movwf	WriteTempToLCD@Temp+1
  1859  0315  0820               	movf	displayState4@s,w
  1860  0316  00F9               	movwf	WriteTempToLCD@Temp
  1861  0317  160A  118A  25D2  120A  118A  	fcall	_WriteTempToLCD
  1862                           
  1863                           ;main.c: 438: }
  1864                           
  1865                           ;main.c: 436: }
  1866                           ;main.c: 437: break;
  1867  031C  2B2F               	goto	l3282
  1868  031D                     l3280:	
  1869                           
  1870                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1871                           ; Switch size 1, requested type "space"
  1872                           ; Number of cases is 1, Range of values is 0 to 0
  1873                           ; switch strategies available:
  1874                           ; Name         Instructions Cycles
  1875                           ; simple_byte            4     3 (average)
  1876                           ; direct_byte           11     8 (fixed)
  1877                           ; jumptable            260     6 (fixed)
  1878                           ;	Chosen strategy is simple_byte
  1879  031D  1283               	bcf	3,5	;RP0=0, select bank0
  1880  031E  1303               	bcf	3,6	;RP1=0, select bank0
  1881  031F  084D               	movf	_switch_state+1,w
  1882  0320  3A00               	xorlw	0	; case 0
  1883  0321  1903               	skipnz
  1884  0322  2B24               	goto	l3486
  1885  0323  2B2F               	goto	l3282
  1886  0324                     l3486:	
  1887                           
  1888                           ; Switch size 1, requested type "space"
  1889                           ; Number of cases is 3, Range of values is 1 to 3
  1890                           ; switch strategies available:
  1891                           ; Name         Instructions Cycles
  1892                           ; simple_byte           10     6 (average)
  1893                           ; direct_byte           20    11 (fixed)
  1894                           ; jumptable            263     9 (fixed)
  1895                           ;	Chosen strategy is simple_byte
  1896  0324  084C               	movf	_switch_state,w
  1897  0325  3A01               	xorlw	1	; case 1
  1898  0326  1903               	skipnz
  1899  0327  2A31               	goto	l3208
  1900  0328  3A03               	xorlw	3	; case 2
  1901  0329  1903               	skipnz
  1902  032A  2A82               	goto	l3232
  1903  032B  3A01               	xorlw	1	; case 3
  1904  032C  1903               	skipnz
  1905  032D  2AD3               	goto	l3256
  1906  032E  2B2F               	goto	l3282
  1907  032F                     l3282:	
  1908                           
  1909                           ;main.c: 439: h_alarm = h;
  1910  032F  1283               	bcf	3,5	;RP0=0, select bank0
  1911  0330  1303               	bcf	3,6	;RP1=0, select bank0
  1912  0331  0823               	movf	displayState4@h+1,w
  1913  0332  00C7               	movwf	_h_alarm+1
  1914  0333  0822               	movf	displayState4@h,w
  1915  0334  00C6               	movwf	_h_alarm
  1916                           
  1917                           ;main.c: 440: m_alarm = m;
  1918  0335  0825               	movf	displayState4@m+1,w
  1919  0336  00C9               	movwf	_m_alarm+1
  1920  0337  0824               	movf	displayState4@m,w
  1921  0338  00C8               	movwf	_m_alarm
  1922                           
  1923                           ;main.c: 441: s_alarm = s;
  1924  0339  0821               	movf	displayState4@s+1,w
  1925  033A  00CB               	movwf	_s_alarm+1
  1926  033B  0820               	movf	displayState4@s,w
  1927  033C  00CA               	movwf	_s_alarm
  1928  033D  2A1F               	goto	l198
  1929  033E                     __end_of_displayState4:	
  1930                           
  1931                           	psect	text2
  1932  0C2D                     __ptext2:	
  1933 ;; *************** function _DisplayFirstTimeToLCD *****************
  1934 ;; Defined at:
  1935 ;;		line 201 in file "LCD.c"
  1936 ;; Parameters:    Size  Location     Type
  1937 ;;  pTimeArray      1    wreg     PTR unsigned char 
  1938 ;;		 -> pRTCArray(4), 
  1939 ;; Auto vars:     Size  Location     Type
  1940 ;;  pTimeArray      1   11[COMMON] PTR unsigned char 
  1941 ;;		 -> pRTCArray(4), 
  1942 ;; Return value:  Size  Location     Type
  1943 ;;		None               void
  1944 ;; Registers used:
  1945 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1946 ;; Tracked objects:
  1947 ;;		On entry : 0/0
  1948 ;;		On exit  : 0/0
  1949 ;;		Unchanged: 0/0
  1950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1951 ;;      Params:         0       0       0       0       0
  1952 ;;      Locals:         1       0       0       0       0
  1953 ;;      Temps:          2       0       0       0       0
  1954 ;;      Totals:         3       0       0       0       0
  1955 ;;Total ram usage:        3 bytes
  1956 ;; Hardware stack levels used:    1
  1957 ;; Hardware stack levels required when called:    3
  1958 ;; This function calls:
  1959 ;;		_ClearLCDScreen
  1960 ;;		_WriteDataToLCD
  1961 ;;		_WriteStringToLCD
  1962 ;;		___awdiv
  1963 ;;		___awmod
  1964 ;; This function is called by:
  1965 ;;		_main
  1966 ;;		_displayState4
  1967 ;; This function uses a non-reentrant model
  1968 ;;
  1969                           
  1970                           
  1971                           ;psect for function _DisplayFirstTimeToLCD
  1972  0C2D                     _DisplayFirstTimeToLCD:	
  1973                           
  1974                           ;incstack = 0
  1975                           ; Regs used in _DisplayFirstTimeToLCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+csta
      +                          ck]
  1976                           ;DisplayFirstTimeToLCD@pTimeArray stored from wreg
  1977  0C2D  00FB               	movwf	DisplayFirstTimeToLCD@pTimeArray
  1978                           
  1979                           ;LCD.c: 203: ClearLCDScreen();
  1980  0C2E  160A  118A  252F  120A  158A  	fcall	_ClearLCDScreen
  1981                           
  1982                           ;LCD.c: 206: WriteDataToLCD((pTimeArray[2] / 10) + 0x30);
  1983  0C33  300A               	movlw	10
  1984  0C34  00F0               	movwf	___awdiv@divisor
  1985  0C35  3000               	movlw	0
  1986  0C36  00F1               	movwf	___awdiv@divisor+1
  1987  0C37  087B               	movf	DisplayFirstTimeToLCD@pTimeArray,w
  1988  0C38  3E02               	addlw	2
  1989  0C39  0084               	movwf	4
  1990  0C3A  1383               	bcf	3,7	;select IRP bank0
  1991  0C3B  0800               	movf	0,w
  1992  0C3C  00F9               	movwf	??_DisplayFirstTimeToLCD
  1993  0C3D  01FA               	clrf	??_DisplayFirstTimeToLCD+1
  1994  0C3E  0879               	movf	??_DisplayFirstTimeToLCD,w
  1995  0C3F  00F2               	movwf	___awdiv@dividend
  1996  0C40  087A               	movf	??_DisplayFirstTimeToLCD+1,w
  1997  0C41  00F3               	movwf	___awdiv@dividend+1
  1998  0C42  160A  118A  26E2  120A  158A  	fcall	___awdiv
  1999  0C47  0870               	movf	?___awdiv,w
  2000  0C48  3E30               	addlw	48
  2001  0C49  120A  118A  200A  120A  158A  	fcall	_WriteDataToLCD
  2002                           
  2003                           ;LCD.c: 208: WriteDataToLCD((pTimeArray[2] % 10) + 0x30);
  2004  0C4E  300A               	movlw	10
  2005  0C4F  00F0               	movwf	___awmod@divisor
  2006  0C50  3000               	movlw	0
  2007  0C51  00F1               	movwf	___awmod@divisor+1
  2008  0C52  087B               	movf	DisplayFirstTimeToLCD@pTimeArray,w
  2009  0C53  3E02               	addlw	2
  2010  0C54  0084               	movwf	4
  2011  0C55  1383               	bcf	3,7	;select IRP bank0
  2012  0C56  0800               	movf	0,w
  2013  0C57  00F9               	movwf	??_DisplayFirstTimeToLCD
  2014  0C58  01FA               	clrf	??_DisplayFirstTimeToLCD+1
  2015  0C59  0879               	movf	??_DisplayFirstTimeToLCD,w
  2016  0C5A  00F2               	movwf	___awmod@dividend
  2017  0C5B  087A               	movf	??_DisplayFirstTimeToLCD+1,w
  2018  0C5C  00F3               	movwf	___awmod@dividend+1
  2019  0C5D  160A  118A  2697  120A  158A  	fcall	___awmod
  2020  0C62  0870               	movf	?___awmod,w
  2021  0C63  3E30               	addlw	48
  2022  0C64  120A  118A  200A  120A  158A  	fcall	_WriteDataToLCD
  2023                           
  2024                           ;LCD.c: 211: WriteDataToLCD(':');
  2025  0C69  303A               	movlw	58
  2026  0C6A  120A  118A  200A  120A  158A  	fcall	_WriteDataToLCD
  2027                           
  2028                           ;LCD.c: 214: WriteDataToLCD((pTimeArray[1] / 10) + 0x30);
  2029  0C6F  300A               	movlw	10
  2030  0C70  00F0               	movwf	___awdiv@divisor
  2031  0C71  3000               	movlw	0
  2032  0C72  00F1               	movwf	___awdiv@divisor+1
  2033  0C73  0A7B               	incf	DisplayFirstTimeToLCD@pTimeArray,w
  2034  0C74  0084               	movwf	4
  2035  0C75  1383               	bcf	3,7	;select IRP bank0
  2036  0C76  0800               	movf	0,w
  2037  0C77  00F9               	movwf	??_DisplayFirstTimeToLCD
  2038  0C78  01FA               	clrf	??_DisplayFirstTimeToLCD+1
  2039  0C79  0879               	movf	??_DisplayFirstTimeToLCD,w
  2040  0C7A  00F2               	movwf	___awdiv@dividend
  2041  0C7B  087A               	movf	??_DisplayFirstTimeToLCD+1,w
  2042  0C7C  00F3               	movwf	___awdiv@dividend+1
  2043  0C7D  160A  118A  26E2  120A  158A  	fcall	___awdiv
  2044  0C82  0870               	movf	?___awdiv,w
  2045  0C83  3E30               	addlw	48
  2046  0C84  120A  118A  200A  120A  158A  	fcall	_WriteDataToLCD
  2047                           
  2048                           ;LCD.c: 215: WriteDataToLCD((pTimeArray[1] % 10) + 0x30);
  2049  0C89  300A               	movlw	10
  2050  0C8A  00F0               	movwf	___awmod@divisor
  2051  0C8B  3000               	movlw	0
  2052  0C8C  00F1               	movwf	___awmod@divisor+1
  2053  0C8D  0A7B               	incf	DisplayFirstTimeToLCD@pTimeArray,w
  2054  0C8E  0084               	movwf	4
  2055  0C8F  1383               	bcf	3,7	;select IRP bank0
  2056  0C90  0800               	movf	0,w
  2057  0C91  00F9               	movwf	??_DisplayFirstTimeToLCD
  2058  0C92  01FA               	clrf	??_DisplayFirstTimeToLCD+1
  2059  0C93  0879               	movf	??_DisplayFirstTimeToLCD,w
  2060  0C94  00F2               	movwf	___awmod@dividend
  2061  0C95  087A               	movf	??_DisplayFirstTimeToLCD+1,w
  2062  0C96  00F3               	movwf	___awmod@dividend+1
  2063  0C97  160A  118A  2697  120A  158A  	fcall	___awmod
  2064  0C9C  0870               	movf	?___awmod,w
  2065  0C9D  3E30               	addlw	48
  2066  0C9E  120A  118A  200A  120A  158A  	fcall	_WriteDataToLCD
  2067                           
  2068                           ;LCD.c: 217: WriteDataToLCD(':');
  2069  0CA3  303A               	movlw	58
  2070  0CA4  120A  118A  200A  120A  158A  	fcall	_WriteDataToLCD
  2071                           
  2072                           ;LCD.c: 220: WriteDataToLCD((pTimeArray[0] / 10) + 0x30);
  2073  0CA9  300A               	movlw	10
  2074  0CAA  00F0               	movwf	___awdiv@divisor
  2075  0CAB  3000               	movlw	0
  2076  0CAC  00F1               	movwf	___awdiv@divisor+1
  2077  0CAD  087B               	movf	DisplayFirstTimeToLCD@pTimeArray,w
  2078  0CAE  0084               	movwf	4
  2079  0CAF  1383               	bcf	3,7	;select IRP bank0
  2080  0CB0  0800               	movf	0,w
  2081  0CB1  00F9               	movwf	??_DisplayFirstTimeToLCD
  2082  0CB2  01FA               	clrf	??_DisplayFirstTimeToLCD+1
  2083  0CB3  0879               	movf	??_DisplayFirstTimeToLCD,w
  2084  0CB4  00F2               	movwf	___awdiv@dividend
  2085  0CB5  087A               	movf	??_DisplayFirstTimeToLCD+1,w
  2086  0CB6  00F3               	movwf	___awdiv@dividend+1
  2087  0CB7  160A  118A  26E2  120A  158A  	fcall	___awdiv
  2088  0CBC  0870               	movf	?___awdiv,w
  2089  0CBD  3E30               	addlw	48
  2090  0CBE  120A  118A  200A  120A  158A  	fcall	_WriteDataToLCD
  2091                           
  2092                           ;LCD.c: 221: WriteDataToLCD((pTimeArray[0] % 10) + 0x30);
  2093  0CC3  300A               	movlw	10
  2094  0CC4  00F0               	movwf	___awmod@divisor
  2095  0CC5  3000               	movlw	0
  2096  0CC6  00F1               	movwf	___awmod@divisor+1
  2097  0CC7  087B               	movf	DisplayFirstTimeToLCD@pTimeArray,w
  2098  0CC8  0084               	movwf	4
  2099  0CC9  1383               	bcf	3,7	;select IRP bank0
  2100  0CCA  0800               	movf	0,w
  2101  0CCB  00F9               	movwf	??_DisplayFirstTimeToLCD
  2102  0CCC  01FA               	clrf	??_DisplayFirstTimeToLCD+1
  2103  0CCD  0879               	movf	??_DisplayFirstTimeToLCD,w
  2104  0CCE  00F2               	movwf	___awmod@dividend
  2105  0CCF  087A               	movf	??_DisplayFirstTimeToLCD+1,w
  2106  0CD0  00F3               	movwf	___awmod@dividend+1
  2107  0CD1  160A  118A  2697  120A  158A  	fcall	___awmod
  2108  0CD6  0870               	movf	?___awmod,w
  2109  0CD7  3E30               	addlw	48
  2110  0CD8  120A  118A  200A  120A  158A  	fcall	_WriteDataToLCD
  2111                           
  2112                           ;LCD.c: 224: WriteDataToLCD(' ');
  2113  0CDD  3020               	movlw	32
  2114  0CDE  120A  118A  200A  120A  158A  	fcall	_WriteDataToLCD
  2115                           
  2116                           ;LCD.c: 227: switch (pTimeArray[3]) {
  2117  0CE3  2CF9               	goto	l2518
  2118  0CE4                     l2510:	
  2119                           ;LCD.c: 228: case 0: WriteStringToLCD("AM");
  2120                           
  2121  0CE4  3005               	movlw	low (STR_39| (0+32768))
  2122  0CE5  00F4               	movwf	WriteStringToLCD@s
  2123  0CE6  3091               	movlw	high (STR_39| (0+32768))
  2124  0CE7  00F5               	movwf	WriteStringToLCD@s+1
  2125  0CE8  160A  118A  25AF   	fcall	_WriteStringToLCD
  2126                           
  2127                           ;LCD.c: 229: break;
  2128  0CEB  0008               	return
  2129  0CEC                     l2512:	
  2130                           ;LCD.c: 230: case 1: WriteStringToLCD("PM");
  2131                           
  2132  0CEC  3008               	movlw	low (STR_40| (0+32768))
  2133  0CED  00F4               	movwf	WriteStringToLCD@s
  2134  0CEE  3091               	movlw	high (STR_40| (0+32768))
  2135  0CEF  00F5               	movwf	WriteStringToLCD@s+1
  2136  0CF0  160A  118A  25AF   	fcall	_WriteStringToLCD
  2137                           
  2138                           ;LCD.c: 231: break;
  2139  0CF3  0008               	return
  2140  0CF4                     l2514:	
  2141                           ;LCD.c: 233: default: WriteDataToLCD('H');
  2142                           
  2143  0CF4  3048               	movlw	72
  2144  0CF5  120A  118A  200A   	fcall	_WriteDataToLCD
  2145                           
  2146                           ;LCD.c: 236: }
  2147                           
  2148                           ;LCD.c: 235: break;
  2149  0CF8  0008               	return
  2150  0CF9                     l2518:	
  2151  0CF9  087B               	movf	DisplayFirstTimeToLCD@pTimeArray,w
  2152  0CFA  3E03               	addlw	3
  2153  0CFB  0084               	movwf	4
  2154  0CFC  1383               	bcf	3,7	;select IRP bank0
  2155  0CFD  0800               	movf	0,w
  2156                           
  2157                           ; Switch size 1, requested type "space"
  2158                           ; Number of cases is 2, Range of values is 0 to 1
  2159                           ; switch strategies available:
  2160                           ; Name         Instructions Cycles
  2161                           ; simple_byte            7     4 (average)
  2162                           ; direct_byte           14     8 (fixed)
  2163                           ; jumptable            260     6 (fixed)
  2164                           ;	Chosen strategy is simple_byte
  2165  0CFE  3A00               	xorlw	0	; case 0
  2166  0CFF  1903               	skipnz
  2167  0D00  2CE4               	goto	l2510
  2168  0D01  3A01               	xorlw	1	; case 1
  2169  0D02  1903               	skipnz
  2170  0D03  2CEC               	goto	l2512
  2171  0D04  2CF4               	goto	l2514
  2172  0D05  0008               	return
  2173  0D06                     __end_of_DisplayFirstTimeToLCD:	
  2174                           
  2175                           	psect	text3
  2176  04FC                     __ptext3:	
  2177 ;; *************** function _displayState3 *****************
  2178 ;; Defined at:
  2179 ;;		line 215 in file "main.c"
  2180 ;; Parameters:    Size  Location     Type
  2181 ;;		None
  2182 ;; Auto vars:     Size  Location     Type
  2183 ;;  m               2   17[BANK0 ] unsigned int 
  2184 ;;  d               2   15[BANK0 ] unsigned int 
  2185 ;;  w               2   13[BANK0 ] unsigned int 
  2186 ;;  y               2   11[BANK0 ] unsigned int 
  2187 ;; Return value:  Size  Location     Type
  2188 ;;		None               void
  2189 ;; Registers used:
  2190 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2191 ;; Tracked objects:
  2192 ;;		On entry : 0/0
  2193 ;;		On exit  : 0/0
  2194 ;;		Unchanged: 0/0
  2195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2196 ;;      Params:         0       0       0       0       0
  2197 ;;      Locals:         0       8       0       0       0
  2198 ;;      Temps:          0       3       0       0       0
  2199 ;;      Totals:         0      11       0       0       0
  2200 ;;Total ram usage:       11 bytes
  2201 ;; Hardware stack levels used:    1
  2202 ;; Hardware stack levels required when called:    3
  2203 ;; This function calls:
  2204 ;;		_ClearLCDScreen
  2205 ;;		_Get_DS1307_RTC_Date
  2206 ;;		_Set_DS1307_RTC_Date
  2207 ;;		_WriteCommandToLCD
  2208 ;;		_WriteStringToLCD
  2209 ;;		_WriteTempToLCD
  2210 ;; This function is called by:
  2211 ;;		_main
  2212 ;; This function uses a non-reentrant model
  2213 ;;
  2214                           
  2215                           
  2216                           ;psect for function _displayState3
  2217  04FC                     _displayState3:	
  2218                           
  2219                           ;main.c: 216: ClearLCDScreen();
  2220                           
  2221                           ;incstack = 0
  2222                           ; Regs used in _displayState3: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2223  04FC  160A  118A  252F  120A  118A  	fcall	_ClearLCDScreen
  2224                           
  2225                           ;main.c: 218: unsigned int d;
  2226                           ;main.c: 219: unsigned int m;
  2227                           ;main.c: 220: unsigned int y;
  2228                           ;main.c: 221: unsigned int w;
  2229                           ;main.c: 222: d = (int) Get_DS1307_RTC_Date()[1];
  2230  0501  120A  158A  2007  120A  118A  	fcall	_Get_DS1307_RTC_Date
  2231  0506  1283               	bcf	3,5	;RP0=0, select bank0
  2232  0507  1303               	bcf	3,6	;RP1=0, select bank0
  2233  0508  00A8               	movwf	??_displayState3
  2234  0509  3001               	movlw	1
  2235  050A  0728               	addwf	??_displayState3,w
  2236  050B  0084               	movwf	4
  2237  050C  1383               	bcf	3,7	;select IRP bank0
  2238  050D  0800               	movf	0,w
  2239  050E  00A9               	movwf	??_displayState3+1
  2240  050F  01AA               	clrf	??_displayState3+2
  2241  0510  0829               	movf	??_displayState3+1,w
  2242  0511  00AF               	movwf	displayState3@d
  2243  0512  082A               	movf	??_displayState3+2,w
  2244  0513  00B0               	movwf	displayState3@d+1
  2245                           
  2246                           ;main.c: 223: m = (int) Get_DS1307_RTC_Date()[2];
  2247  0514  120A  158A  2007  120A  118A  	fcall	_Get_DS1307_RTC_Date
  2248  0519  1283               	bcf	3,5	;RP0=0, select bank0
  2249  051A  1303               	bcf	3,6	;RP1=0, select bank0
  2250  051B  00A8               	movwf	??_displayState3
  2251  051C  3002               	movlw	2
  2252  051D  0728               	addwf	??_displayState3,w
  2253  051E  0084               	movwf	4
  2254  051F  1383               	bcf	3,7	;select IRP bank0
  2255  0520  0800               	movf	0,w
  2256  0521  00A9               	movwf	??_displayState3+1
  2257  0522  01AA               	clrf	??_displayState3+2
  2258  0523  0829               	movf	??_displayState3+1,w
  2259  0524  00B1               	movwf	displayState3@m
  2260  0525  082A               	movf	??_displayState3+2,w
  2261  0526  00B2               	movwf	displayState3@m+1
  2262                           
  2263                           ;main.c: 224: y = (int) Get_DS1307_RTC_Date()[3];
  2264  0527  120A  158A  2007  120A  118A  	fcall	_Get_DS1307_RTC_Date
  2265  052C  1283               	bcf	3,5	;RP0=0, select bank0
  2266  052D  1303               	bcf	3,6	;RP1=0, select bank0
  2267  052E  00A8               	movwf	??_displayState3
  2268  052F  3003               	movlw	3
  2269  0530  0728               	addwf	??_displayState3,w
  2270  0531  0084               	movwf	4
  2271  0532  1383               	bcf	3,7	;select IRP bank0
  2272  0533  0800               	movf	0,w
  2273  0534  00A9               	movwf	??_displayState3+1
  2274  0535  01AA               	clrf	??_displayState3+2
  2275  0536  0829               	movf	??_displayState3+1,w
  2276  0537  00AB               	movwf	displayState3@y
  2277  0538  082A               	movf	??_displayState3+2,w
  2278  0539  00AC               	movwf	displayState3@y+1
  2279                           
  2280                           ;main.c: 225: w = (int) Get_DS1307_RTC_Date()[0];
  2281  053A  120A  158A  2007  120A  118A  	fcall	_Get_DS1307_RTC_Date
  2282  053F  0084               	movwf	4
  2283  0540  1383               	bcf	3,7	;select IRP bank0
  2284  0541  0800               	movf	0,w
  2285  0542  1283               	bcf	3,5	;RP0=0, select bank0
  2286  0543  1303               	bcf	3,6	;RP1=0, select bank0
  2287  0544  00A8               	movwf	??_displayState3
  2288  0545  01A9               	clrf	??_displayState3+1
  2289  0546  0828               	movf	??_displayState3,w
  2290  0547  00AD               	movwf	displayState3@w
  2291  0548  0829               	movf	??_displayState3+1,w
  2292  0549  00AE               	movwf	displayState3@w+1
  2293                           
  2294                           ;main.c: 226: if (!RA1) {
  2295  054A  1885               	btfsc	5,1	;volatile
  2296  054B  2D5B               	goto	l2990
  2297                           
  2298                           ;main.c: 227: state++;
  2299  054C  3001               	movlw	1
  2300  054D  07D6               	addwf	_state,f
  2301  054E  1803               	skipnc
  2302  054F  0AD7               	incf	_state+1,f
  2303  0550  3000               	movlw	0
  2304  0551  07D7               	addwf	_state+1,f
  2305                           
  2306                           ;main.c: 228: if (state == 5) {
  2307  0552  3005               	movlw	5
  2308  0553  0656               	xorwf	_state,w
  2309  0554  0457               	iorwf	_state+1,w
  2310  0555  1D03               	btfss	3,2
  2311  0556  2D5B               	goto	l2990
  2312                           
  2313                           ;main.c: 229: state = 1;
  2314  0557  3001               	movlw	1
  2315  0558                     L1:	
  2316  0558  00D6               	movwf	_state
  2317  0559  3000               	movlw	0
  2318  055A  00D7               	movwf	_state+1
  2319  055B                     l2990:	
  2320                           ;main.c: 230: }
  2321                           ;main.c: 231: }
  2322                           ;main.c: 232: while (1) {
  2323                           
  2324                           
  2325                           ;main.c: 233: WriteCommandToLCD(0x80);
  2326  055B  3080               	movlw	128
  2327  055C  160A  118A  25F9  120A  118A  	fcall	_WriteCommandToLCD
  2328                           
  2329                           ;main.c: 234: WriteStringToLCD("  SETTING DATE   ");
  2330  0561  304F               	movlw	low (STR_9| (0+32768))
  2331  0562  00F4               	movwf	WriteStringToLCD@s
  2332  0563  3090               	movlw	high (STR_9| (0+32768))
  2333  0564  00F5               	movwf	WriteStringToLCD@s+1
  2334  0565  160A  118A  25AF  120A  118A  	fcall	_WriteStringToLCD
  2335                           
  2336                           ;main.c: 235: WriteCommandToLCD(0xc0);
  2337  056A  30C0               	movlw	192
  2338  056B  160A  118A  25F9  120A  118A  	fcall	_WriteCommandToLCD
  2339                           
  2340                           ;main.c: 236: WriteTempToLCD(d);
  2341  0570  1283               	bcf	3,5	;RP0=0, select bank0
  2342  0571  1303               	bcf	3,6	;RP1=0, select bank0
  2343  0572  0830               	movf	displayState3@d+1,w
  2344  0573  00FA               	movwf	WriteTempToLCD@Temp+1
  2345  0574  082F               	movf	displayState3@d,w
  2346  0575  00F9               	movwf	WriteTempToLCD@Temp
  2347  0576  160A  118A  25D2  120A  118A  	fcall	_WriteTempToLCD
  2348                           
  2349                           ;main.c: 237: WriteStringToLCD(":");
  2350  057B  300B               	movlw	low (STR_4| (0+32768))
  2351  057C  00F4               	movwf	WriteStringToLCD@s
  2352  057D  3091               	movlw	high (STR_4| (0+32768))
  2353  057E  00F5               	movwf	WriteStringToLCD@s+1
  2354  057F  160A  118A  25AF  120A  118A  	fcall	_WriteStringToLCD
  2355                           
  2356                           ;main.c: 238: WriteTempToLCD(m);
  2357  0584  1283               	bcf	3,5	;RP0=0, select bank0
  2358  0585  1303               	bcf	3,6	;RP1=0, select bank0
  2359  0586  0832               	movf	displayState3@m+1,w
  2360  0587  00FA               	movwf	WriteTempToLCD@Temp+1
  2361  0588  0831               	movf	displayState3@m,w
  2362  0589  00F9               	movwf	WriteTempToLCD@Temp
  2363  058A  160A  118A  25D2  120A  118A  	fcall	_WriteTempToLCD
  2364                           
  2365                           ;main.c: 239: WriteStringToLCD(":");
  2366  058F  300B               	movlw	low (STR_4| (0+32768))
  2367  0590  00F4               	movwf	WriteStringToLCD@s
  2368  0591  3091               	movlw	high (STR_4| (0+32768))
  2369  0592  00F5               	movwf	WriteStringToLCD@s+1
  2370  0593  160A  118A  25AF  120A  118A  	fcall	_WriteStringToLCD
  2371                           
  2372                           ;main.c: 240: WriteTempToLCD(y);
  2373  0598  1283               	bcf	3,5	;RP0=0, select bank0
  2374  0599  1303               	bcf	3,6	;RP1=0, select bank0
  2375  059A  082C               	movf	displayState3@y+1,w
  2376  059B  00FA               	movwf	WriteTempToLCD@Temp+1
  2377  059C  082B               	movf	displayState3@y,w
  2378  059D  00F9               	movwf	WriteTempToLCD@Temp
  2379  059E  160A  118A  25D2  120A  118A  	fcall	_WriteTempToLCD
  2380                           
  2381                           ;main.c: 241: WriteStringToLCD(" ");
  2382  05A3  3081               	movlw	low ((STR_33+14)| (0+32768))
  2383  05A4  00F4               	movwf	WriteStringToLCD@s
  2384  05A5  3090               	movlw	high ((STR_33+14)| (0+32768))
  2385  05A6  00F5               	movwf	WriteStringToLCD@s+1
  2386  05A7  160A  118A  25AF  120A  118A  	fcall	_WriteStringToLCD
  2387                           
  2388                           ;main.c: 242: switch (w) {
  2389  05AC  2DFD               	goto	l3026
  2390  05AD                     l3008:	
  2391                           ;main.c: 243: case 1: WriteStringToLCD("MON");
  2392                           
  2393  05AD  30F5               	movlw	low (STR_13| (0+32768))
  2394  05AE  00F4               	movwf	WriteStringToLCD@s
  2395  05AF  3090               	movlw	high (STR_13| (0+32768))
  2396  05B0  00F5               	movwf	WriteStringToLCD@s+1
  2397  05B1  160A  118A  25AF  120A  118A  	fcall	_WriteStringToLCD
  2398                           
  2399                           ;main.c: 244: break;
  2400  05B6  2E1B               	goto	l149
  2401  05B7                     l3010:	
  2402                           ;main.c: 245: case 2: WriteStringToLCD("TUE");
  2403                           
  2404  05B7  30ED               	movlw	low (STR_14| (0+32768))
  2405  05B8  00F4               	movwf	WriteStringToLCD@s
  2406  05B9  3090               	movlw	high (STR_14| (0+32768))
  2407  05BA  00F5               	movwf	WriteStringToLCD@s+1
  2408  05BB  160A  118A  25AF  120A  118A  	fcall	_WriteStringToLCD
  2409                           
  2410                           ;main.c: 246: break;
  2411  05C0  2E1B               	goto	l149
  2412  05C1                     l3012:	
  2413                           ;main.c: 247: case 3: WriteStringToLCD("WED");
  2414                           
  2415  05C1  30E9               	movlw	low (STR_15| (0+32768))
  2416  05C2  00F4               	movwf	WriteStringToLCD@s
  2417  05C3  3090               	movlw	high (STR_15| (0+32768))
  2418  05C4  00F5               	movwf	WriteStringToLCD@s+1
  2419  05C5  160A  118A  25AF  120A  118A  	fcall	_WriteStringToLCD
  2420                           
  2421                           ;main.c: 248: break;
  2422  05CA  2E1B               	goto	l149
  2423  05CB                     l3014:	
  2424                           ;main.c: 249: case 4: WriteStringToLCD("THU");
  2425                           
  2426  05CB  3001               	movlw	low (STR_16| (0+32768))
  2427  05CC  00F4               	movwf	WriteStringToLCD@s
  2428  05CD  3091               	movlw	high (STR_16| (0+32768))
  2429  05CE  00F5               	movwf	WriteStringToLCD@s+1
  2430  05CF  160A  118A  25AF  120A  118A  	fcall	_WriteStringToLCD
  2431                           
  2432                           ;main.c: 250: break;
  2433  05D4  2E1B               	goto	l149
  2434  05D5                     l3016:	
  2435                           ;main.c: 251: case 5: WriteStringToLCD("FRI");
  2436                           
  2437  05D5  30F1               	movlw	low (STR_17| (0+32768))
  2438  05D6  00F4               	movwf	WriteStringToLCD@s
  2439  05D7  3090               	movlw	high (STR_17| (0+32768))
  2440  05D8  00F5               	movwf	WriteStringToLCD@s+1
  2441  05D9  160A  118A  25AF  120A  118A  	fcall	_WriteStringToLCD
  2442                           
  2443                           ;main.c: 252: break;
  2444  05DE  2E1B               	goto	l149
  2445  05DF                     l3018:	
  2446                           ;main.c: 253: case 6: WriteStringToLCD("SAT");
  2447                           
  2448  05DF  30FD               	movlw	low (STR_18| (0+32768))
  2449  05E0  00F4               	movwf	WriteStringToLCD@s
  2450  05E1  3090               	movlw	high (STR_18| (0+32768))
  2451  05E2  00F5               	movwf	WriteStringToLCD@s+1
  2452  05E3  160A  118A  25AF  120A  118A  	fcall	_WriteStringToLCD
  2453                           
  2454                           ;main.c: 254: break;
  2455  05E8  2E1B               	goto	l149
  2456  05E9                     l3020:	
  2457                           ;main.c: 255: case 7: WriteStringToLCD("SUN");
  2458                           
  2459  05E9  30F9               	movlw	low (STR_19| (0+32768))
  2460  05EA  00F4               	movwf	WriteStringToLCD@s
  2461  05EB  3090               	movlw	high (STR_19| (0+32768))
  2462  05EC  00F5               	movwf	WriteStringToLCD@s+1
  2463  05ED  160A  118A  25AF  120A  118A  	fcall	_WriteStringToLCD
  2464                           
  2465                           ;main.c: 256: break;
  2466  05F2  2E1B               	goto	l149
  2467  05F3                     l3022:	
  2468                           ;main.c: 258: default: WriteStringToLCD("???");
  2469                           
  2470  05F3  30E5               	movlw	low (STR_20| (0+32768))
  2471  05F4  00F4               	movwf	WriteStringToLCD@s
  2472  05F5  3090               	movlw	high (STR_20| (0+32768))
  2473  05F6  00F5               	movwf	WriteStringToLCD@s+1
  2474  05F7  160A  118A  25AF  120A  118A  	fcall	_WriteStringToLCD
  2475                           
  2476                           ;main.c: 260: }
  2477                           
  2478                           ;main.c: 259: break;
  2479  05FC  2E1B               	goto	l149
  2480  05FD                     l3026:	
  2481                           
  2482                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2483                           ; Switch size 1, requested type "space"
  2484                           ; Number of cases is 1, Range of values is 0 to 0
  2485                           ; switch strategies available:
  2486                           ; Name         Instructions Cycles
  2487                           ; simple_byte            4     3 (average)
  2488                           ; direct_byte           11     8 (fixed)
  2489                           ; jumptable            260     6 (fixed)
  2490                           ;	Chosen strategy is simple_byte
  2491  05FD  1283               	bcf	3,5	;RP0=0, select bank0
  2492  05FE  1303               	bcf	3,6	;RP1=0, select bank0
  2493  05FF  082E               	movf	displayState3@w+1,w
  2494  0600  3A00               	xorlw	0	; case 0
  2495  0601  1903               	skipnz
  2496  0602  2E04               	goto	l3488
  2497  0603  2DF3               	goto	l3022
  2498  0604                     l3488:	
  2499                           
  2500                           ; Switch size 1, requested type "space"
  2501                           ; Number of cases is 7, Range of values is 1 to 7
  2502                           ; switch strategies available:
  2503                           ; Name         Instructions Cycles
  2504                           ; simple_byte           22    12 (average)
  2505                           ; direct_byte           32    11 (fixed)
  2506                           ; jumptable            263     9 (fixed)
  2507                           ;	Chosen strategy is simple_byte
  2508  0604  082D               	movf	displayState3@w,w
  2509  0605  3A01               	xorlw	1	; case 1
  2510  0606  1903               	skipnz
  2511  0607  2DAD               	goto	l3008
  2512  0608  3A03               	xorlw	3	; case 2
  2513  0609  1903               	skipnz
  2514  060A  2DB7               	goto	l3010
  2515  060B  3A01               	xorlw	1	; case 3
  2516  060C  1903               	skipnz
  2517  060D  2DC1               	goto	l3012
  2518  060E  3A07               	xorlw	7	; case 4
  2519  060F  1903               	skipnz
  2520  0610  2DCB               	goto	l3014
  2521  0611  3A01               	xorlw	1	; case 5
  2522  0612  1903               	skipnz
  2523  0613  2DD5               	goto	l3016
  2524  0614  3A03               	xorlw	3	; case 6
  2525  0615  1903               	skipnz
  2526  0616  2DDF               	goto	l3018
  2527  0617  3A01               	xorlw	1	; case 7
  2528  0618  1903               	skipnz
  2529  0619  2DE9               	goto	l3020
  2530  061A  2DF3               	goto	l3022
  2531  061B                     l149:	
  2532                           
  2533                           ;main.c: 262: if (!RA1) break;
  2534  061B  1283               	bcf	3,5	;RP0=0, select bank0
  2535  061C  1303               	bcf	3,6	;RP1=0, select bank0
  2536  061D  1C85               	btfss	5,1	;volatile
  2537  061E  0008               	return
  2538  061F                     l159:	
  2539                           ;main.c: 263: while (1) {
  2540                           
  2541                           
  2542                           ;main.c: 264: if (RA4 == 0) {
  2543  061F  1283               	bcf	3,5	;RP0=0, select bank0
  2544  0620  1303               	bcf	3,6	;RP1=0, select bank0
  2545  0621  1A05               	btfsc	5,4	;volatile
  2546  0622  2E2E               	goto	l160
  2547                           
  2548                           ;main.c: 265: switch_state++;
  2549  0623  3001               	movlw	1
  2550  0624  07CC               	addwf	_switch_state,f
  2551  0625  1803               	skipnc
  2552  0626  0ACD               	incf	_switch_state+1,f
  2553  0627  3000               	movlw	0
  2554  0628  07CD               	addwf	_switch_state+1,f
  2555                           
  2556                           ;main.c: 266: if (switch_state == 4) {
  2557  0629  3004               	movlw	4
  2558  062A  064C               	xorwf	_switch_state,w
  2559  062B  044D               	iorwf	_switch_state+1,w
  2560  062C  1903               	btfsc	3,2
  2561  062D  2D5B               	goto	l2990
  2562  062E                     l160:	
  2563                           ;main.c: 267: break;
  2564                           
  2565                           
  2566                           ;main.c: 268: }
  2567                           ;main.c: 269: }
  2568                           ;main.c: 270: if (RA1 == 0) {
  2569  062E  1885               	btfsc	5,1	;volatile
  2570  062F  2FC0               	goto	l3148
  2571                           
  2572                           ;main.c: 271: state = 4;
  2573  0630  3004               	movlw	4
  2574  0631  2D58               	goto	L1
  2575  0632                     l3038:	
  2576                           ;main.c: 275: case 1:
  2577                           
  2578                           ;main.c: 273: }
  2579                           ;main.c: 274: switch (switch_state) {
  2580                           
  2581                           ;main.c: 272: break;
  2582                           
  2583                           
  2584                           ;main.c: 276: WriteCommandToLCD(0x80);
  2585  0632  3080               	movlw	128
  2586  0633  160A  118A  25F9  120A  118A  	fcall	_WriteCommandToLCD
  2587                           
  2588                           ;main.c: 277: WriteStringToLCD("  CHANGE DAY   ");
  2589  0638  3093               	movlw	low (STR_21| (0+32768))
  2590  0639  00F4               	movwf	WriteStringToLCD@s
  2591  063A  3090               	movlw	high (STR_21| (0+32768))
  2592  063B  00F5               	movwf	WriteStringToLCD@s+1
  2593  063C  160A  118A  25AF  120A  118A  	fcall	_WriteStringToLCD
  2594                           
  2595                           ;main.c: 278: if (RA2 == 0 && d < 31) {
  2596  0641  1283               	bcf	3,5	;RP0=0, select bank0
  2597  0642  1303               	bcf	3,6	;RP1=0, select bank0
  2598  0643  1905               	btfsc	5,2	;volatile
  2599  0644  2E63               	goto	l3052
  2600  0645  3000               	movlw	0
  2601  0646  0230               	subwf	displayState3@d+1,w
  2602  0647  301F               	movlw	31
  2603  0648  1903               	skipnz
  2604  0649  022F               	subwf	displayState3@d,w
  2605  064A  1803               	skipnc
  2606  064B  2E63               	goto	l3052
  2607                           
  2608                           ;main.c: 279: d++;
  2609  064C  3001               	movlw	1
  2610  064D  07AF               	addwf	displayState3@d,f
  2611  064E  1803               	skipnc
  2612  064F  0AB0               	incf	displayState3@d+1,f
  2613  0650  3000               	movlw	0
  2614  0651  07B0               	addwf	displayState3@d+1,f
  2615                           
  2616                           ;main.c: 280: WriteCommandToLCD(0xc0);
  2617  0652  30C0               	movlw	192
  2618  0653  160A  118A  25F9  120A  118A  	fcall	_WriteCommandToLCD
  2619                           
  2620                           ;main.c: 281: WriteTempToLCD(d);
  2621  0658  1283               	bcf	3,5	;RP0=0, select bank0
  2622  0659  1303               	bcf	3,6	;RP1=0, select bank0
  2623  065A  0830               	movf	displayState3@d+1,w
  2624  065B  00FA               	movwf	WriteTempToLCD@Temp+1
  2625  065C  082F               	movf	displayState3@d,w
  2626  065D  00F9               	movwf	WriteTempToLCD@Temp
  2627  065E  160A  118A  25D2  120A  118A  	fcall	_WriteTempToLCD
  2628  0663                     l3052:	
  2629                           
  2630                           ;main.c: 282: }
  2631                           ;main.c: 283: if (RA3 == 0 && d > 0) {
  2632  0663  1283               	bcf	3,5	;RP0=0, select bank0
  2633  0664  1303               	bcf	3,6	;RP1=0, select bank0
  2634  0665  1985               	btfsc	5,3	;volatile
  2635  0666  2FD3               	goto	l3150
  2636  0667  082F               	movf	displayState3@d,w
  2637  0668  0430               	iorwf	displayState3@d+1,w
  2638  0669  1903               	btfsc	3,2
  2639  066A  2FD3               	goto	l3150
  2640                           
  2641                           ;main.c: 284: d--;
  2642  066B  3001               	movlw	1
  2643  066C  02AF               	subwf	displayState3@d,f
  2644  066D  3000               	movlw	0
  2645  066E  1C03               	skipc
  2646  066F  03B0               	decf	displayState3@d+1,f
  2647  0670  02B0               	subwf	displayState3@d+1,f
  2648                           
  2649                           ;main.c: 285: WriteCommandToLCD(0xc0);
  2650  0671  30C0               	movlw	192
  2651  0672  160A  118A  25F9  120A  118A  	fcall	_WriteCommandToLCD
  2652                           
  2653                           ;main.c: 286: WriteTempToLCD(d);
  2654  0677  1283               	bcf	3,5	;RP0=0, select bank0
  2655  0678  1303               	bcf	3,6	;RP1=0, select bank0
  2656  0679  0830               	movf	displayState3@d+1,w
  2657  067A  00FA               	movwf	WriteTempToLCD@Temp+1
  2658  067B  082F               	movf	displayState3@d,w
  2659  067C  00F9               	movwf	WriteTempToLCD@Temp
  2660  067D  160A  118A  25D2  120A  118A  	fcall	_WriteTempToLCD
  2661                           
  2662                           ;main.c: 287: }
  2663                           ;main.c: 288: break;
  2664  0682  2FD3               	goto	l3150
  2665  0683                     l3062:	
  2666                           ;main.c: 290: case 2:
  2667                           
  2668                           
  2669                           ;main.c: 291: WriteCommandToLCD(0x80);
  2670  0683  3080               	movlw	128
  2671  0684  160A  118A  25F9  120A  118A  	fcall	_WriteCommandToLCD
  2672                           
  2673                           ;main.c: 292: WriteStringToLCD("   CHANGE MONTH    ");
  2674  0689  3014               	movlw	low (STR_22| (0+32768))
  2675  068A  00F4               	movwf	WriteStringToLCD@s
  2676  068B  3090               	movlw	high (STR_22| (0+32768))
  2677  068C  00F5               	movwf	WriteStringToLCD@s+1
  2678  068D  160A  118A  25AF  120A  118A  	fcall	_WriteStringToLCD
  2679                           
  2680                           ;main.c: 293: if (RA2 == 0 && m < 12) {
  2681  0692  1283               	bcf	3,5	;RP0=0, select bank0
  2682  0693  1303               	bcf	3,6	;RP1=0, select bank0
  2683  0694  1905               	btfsc	5,2	;volatile
  2684  0695  2EB4               	goto	l3076
  2685  0696  3000               	movlw	0
  2686  0697  0232               	subwf	displayState3@m+1,w
  2687  0698  300C               	movlw	12
  2688  0699  1903               	skipnz
  2689  069A  0231               	subwf	displayState3@m,w
  2690  069B  1803               	skipnc
  2691  069C  2EB4               	goto	l3076
  2692                           
  2693                           ;main.c: 294: m++;
  2694  069D  3001               	movlw	1
  2695  069E  07B1               	addwf	displayState3@m,f
  2696  069F  1803               	skipnc
  2697  06A0  0AB2               	incf	displayState3@m+1,f
  2698  06A1  3000               	movlw	0
  2699  06A2  07B2               	addwf	displayState3@m+1,f
  2700                           
  2701                           ;main.c: 295: WriteCommandToLCD(0xc0 + 3);
  2702  06A3  30C3               	movlw	195
  2703  06A4  160A  118A  25F9  120A  118A  	fcall	_WriteCommandToLCD
  2704                           
  2705                           ;main.c: 296: WriteTempToLCD(m);
  2706  06A9  1283               	bcf	3,5	;RP0=0, select bank0
  2707  06AA  1303               	bcf	3,6	;RP1=0, select bank0
  2708  06AB  0832               	movf	displayState3@m+1,w
  2709  06AC  00FA               	movwf	WriteTempToLCD@Temp+1
  2710  06AD  0831               	movf	displayState3@m,w
  2711  06AE  00F9               	movwf	WriteTempToLCD@Temp
  2712  06AF  160A  118A  25D2  120A  118A  	fcall	_WriteTempToLCD
  2713  06B4                     l3076:	
  2714                           
  2715                           ;main.c: 297: }
  2716                           ;main.c: 298: if (RA3 == 0 && m > 0) {
  2717  06B4  1283               	bcf	3,5	;RP0=0, select bank0
  2718  06B5  1303               	bcf	3,6	;RP1=0, select bank0
  2719  06B6  1985               	btfsc	5,3	;volatile
  2720  06B7  2FD3               	goto	l3150
  2721  06B8  0831               	movf	displayState3@m,w
  2722  06B9  0432               	iorwf	displayState3@m+1,w
  2723  06BA  1903               	btfsc	3,2
  2724  06BB  2FD3               	goto	l3150
  2725                           
  2726                           ;main.c: 299: m--;
  2727  06BC  3001               	movlw	1
  2728  06BD  02B1               	subwf	displayState3@m,f
  2729  06BE  3000               	movlw	0
  2730  06BF  1C03               	skipc
  2731  06C0  03B2               	decf	displayState3@m+1,f
  2732  06C1  02B2               	subwf	displayState3@m+1,f
  2733                           
  2734                           ;main.c: 300: WriteCommandToLCD(0xc0 + 3);
  2735  06C2  30C3               	movlw	195
  2736  06C3  160A  118A  25F9  120A  118A  	fcall	_WriteCommandToLCD
  2737                           
  2738                           ;main.c: 301: WriteTempToLCD(m);
  2739  06C8  1283               	bcf	3,5	;RP0=0, select bank0
  2740  06C9  1303               	bcf	3,6	;RP1=0, select bank0
  2741  06CA  0832               	movf	displayState3@m+1,w
  2742  06CB  00FA               	movwf	WriteTempToLCD@Temp+1
  2743  06CC  0831               	movf	displayState3@m,w
  2744  06CD  00F9               	movwf	WriteTempToLCD@Temp
  2745  06CE  160A  118A  25D2  120A  118A  	fcall	_WriteTempToLCD
  2746                           
  2747                           ;main.c: 302: }
  2748                           ;main.c: 303: break;
  2749  06D3  2FD3               	goto	l3150
  2750  06D4                     l3086:	
  2751                           ;main.c: 304: case 3:
  2752                           
  2753                           
  2754                           ;main.c: 305: WriteCommandToLCD(0x80);
  2755  06D4  3080               	movlw	128
  2756  06D5  160A  118A  25F9  120A  118A  	fcall	_WriteCommandToLCD
  2757                           
  2758                           ;main.c: 306: WriteStringToLCD("  CHANGE YEAR  ");
  2759  06DA  30A3               	movlw	low (STR_23| (0+32768))
  2760  06DB  00F4               	movwf	WriteStringToLCD@s
  2761  06DC  3090               	movlw	high (STR_23| (0+32768))
  2762  06DD  00F5               	movwf	WriteStringToLCD@s+1
  2763  06DE  160A  118A  25AF  120A  118A  	fcall	_WriteStringToLCD
  2764                           
  2765                           ;main.c: 307: if (RA2 == 0) {
  2766  06E3  1283               	bcf	3,5	;RP0=0, select bank0
  2767  06E4  1303               	bcf	3,6	;RP1=0, select bank0
  2768  06E5  1905               	btfsc	5,2	;volatile
  2769  06E6  2EFE               	goto	l3098
  2770                           
  2771                           ;main.c: 308: y++;
  2772  06E7  3001               	movlw	1
  2773  06E8  07AB               	addwf	displayState3@y,f
  2774  06E9  1803               	skipnc
  2775  06EA  0AAC               	incf	displayState3@y+1,f
  2776  06EB  3000               	movlw	0
  2777  06EC  07AC               	addwf	displayState3@y+1,f
  2778                           
  2779                           ;main.c: 309: WriteCommandToLCD(0xc0 + 6);
  2780  06ED  30C6               	movlw	198
  2781  06EE  160A  118A  25F9  120A  118A  	fcall	_WriteCommandToLCD
  2782                           
  2783                           ;main.c: 310: WriteTempToLCD(y);
  2784  06F3  1283               	bcf	3,5	;RP0=0, select bank0
  2785  06F4  1303               	bcf	3,6	;RP1=0, select bank0
  2786  06F5  082C               	movf	displayState3@y+1,w
  2787  06F6  00FA               	movwf	WriteTempToLCD@Temp+1
  2788  06F7  082B               	movf	displayState3@y,w
  2789  06F8  00F9               	movwf	WriteTempToLCD@Temp
  2790  06F9  160A  118A  25D2  120A  118A  	fcall	_WriteTempToLCD
  2791  06FE                     l3098:	
  2792                           
  2793                           ;main.c: 311: }
  2794                           ;main.c: 312: if (RA3 == 0 && y > 0) {
  2795  06FE  1283               	bcf	3,5	;RP0=0, select bank0
  2796  06FF  1303               	bcf	3,6	;RP1=0, select bank0
  2797  0700  1985               	btfsc	5,3	;volatile
  2798  0701  2FD3               	goto	l3150
  2799  0702  082B               	movf	displayState3@y,w
  2800  0703  042C               	iorwf	displayState3@y+1,w
  2801  0704  1903               	btfsc	3,2
  2802  0705  2FD3               	goto	l3150
  2803                           
  2804                           ;main.c: 313: y--;
  2805  0706  3001               	movlw	1
  2806  0707  02AB               	subwf	displayState3@y,f
  2807  0708  3000               	movlw	0
  2808  0709  1C03               	skipc
  2809  070A  03AC               	decf	displayState3@y+1,f
  2810  070B  02AC               	subwf	displayState3@y+1,f
  2811                           
  2812                           ;main.c: 314: WriteCommandToLCD(0xc0 + 6);
  2813  070C  30C6               	movlw	198
  2814  070D  160A  118A  25F9  120A  118A  	fcall	_WriteCommandToLCD
  2815                           
  2816                           ;main.c: 315: WriteTempToLCD(y);
  2817  0712  1283               	bcf	3,5	;RP0=0, select bank0
  2818  0713  1303               	bcf	3,6	;RP1=0, select bank0
  2819  0714  082C               	movf	displayState3@y+1,w
  2820  0715  00FA               	movwf	WriteTempToLCD@Temp+1
  2821  0716  082B               	movf	displayState3@y,w
  2822  0717  00F9               	movwf	WriteTempToLCD@Temp
  2823  0718  160A  118A  25D2  120A  118A  	fcall	_WriteTempToLCD
  2824                           
  2825                           ;main.c: 316: }
  2826                           ;main.c: 317: break;
  2827  071D  2FD3               	goto	l3150
  2828  071E                     l3108:	
  2829                           ;main.c: 318: case 4:
  2830                           
  2831                           
  2832                           ;main.c: 319: WriteCommandToLCD(0x80);
  2833  071E  3080               	movlw	128
  2834  071F  160A  118A  25F9  120A  118A  	fcall	_WriteCommandToLCD
  2835                           
  2836                           ;main.c: 320: WriteStringToLCD(" CHANGE WEEK DAY  ");
  2837  0724  303C               	movlw	low (STR_24| (0+32768))
  2838  0725  00F4               	movwf	WriteStringToLCD@s
  2839  0726  3090               	movlw	high (STR_24| (0+32768))
  2840  0727  00F5               	movwf	WriteStringToLCD@s+1
  2841  0728  160A  118A  25AF  120A  118A  	fcall	_WriteStringToLCD
  2842                           
  2843                           ;main.c: 321: if (RA2 == 0 && w <= 7) {
  2844  072D  1283               	bcf	3,5	;RP0=0, select bank0
  2845  072E  1303               	bcf	3,6	;RP1=0, select bank0
  2846  072F  1905               	btfsc	5,2	;volatile
  2847  0730  2F3E               	goto	l3118
  2848  0731  3000               	movlw	0
  2849  0732  022E               	subwf	displayState3@w+1,w
  2850  0733  3008               	movlw	8
  2851  0734  1903               	skipnz
  2852  0735  022D               	subwf	displayState3@w,w
  2853  0736  1803               	skipnc
  2854  0737  2F3E               	goto	l3118
  2855                           
  2856                           ;main.c: 322: w++;
  2857  0738  3001               	movlw	1
  2858  0739  07AD               	addwf	displayState3@w,f
  2859  073A  1803               	skipnc
  2860  073B  0AAE               	incf	displayState3@w+1,f
  2861  073C  3000               	movlw	0
  2862  073D  07AE               	addwf	displayState3@w+1,f
  2863  073E                     l3118:	
  2864                           
  2865                           ;main.c: 323: }
  2866                           ;main.c: 324: if (RA3 == 0 && w >= 1) {
  2867  073E  1985               	btfsc	5,3	;volatile
  2868  073F  2F4A               	goto	l3124
  2869  0740  082D               	movf	displayState3@w,w
  2870  0741  042E               	iorwf	displayState3@w+1,w
  2871  0742  1903               	btfsc	3,2
  2872  0743  2F4A               	goto	l3124
  2873                           
  2874                           ;main.c: 325: w--;
  2875  0744  3001               	movlw	1
  2876  0745  02AD               	subwf	displayState3@w,f
  2877  0746  3000               	movlw	0
  2878  0747  1C03               	skipc
  2879  0748  03AE               	decf	displayState3@w+1,f
  2880  0749  02AE               	subwf	displayState3@w+1,f
  2881  074A                     l3124:	
  2882                           
  2883                           ;main.c: 326: }
  2884                           ;main.c: 327: WriteCommandToLCD(0xc0 + 9);
  2885  074A  30C9               	movlw	201
  2886  074B  160A  118A  25F9  120A  118A  	fcall	_WriteCommandToLCD
  2887                           
  2888                           ;main.c: 328: switch (w) {
  2889  0750  2FA1               	goto	l3144
  2890  0751                     l3126:	
  2891                           ;main.c: 329: case 1: WriteStringToLCD("MON");
  2892                           
  2893  0751  30F5               	movlw	low (STR_13| (0+32768))
  2894  0752  00F4               	movwf	WriteStringToLCD@s
  2895  0753  3090               	movlw	high (STR_13| (0+32768))
  2896  0754  00F5               	movwf	WriteStringToLCD@s+1
  2897  0755  160A  118A  25AF  120A  118A  	fcall	_WriteStringToLCD
  2898                           
  2899                           ;main.c: 330: break;
  2900  075A  2FD3               	goto	l3150
  2901  075B                     l3128:	
  2902                           ;main.c: 331: case 2: WriteStringToLCD("TUE");
  2903                           
  2904  075B  30ED               	movlw	low (STR_14| (0+32768))
  2905  075C  00F4               	movwf	WriteStringToLCD@s
  2906  075D  3090               	movlw	high (STR_14| (0+32768))
  2907  075E  00F5               	movwf	WriteStringToLCD@s+1
  2908  075F  160A  118A  25AF  120A  118A  	fcall	_WriteStringToLCD
  2909                           
  2910                           ;main.c: 332: break;
  2911  0764  2FD3               	goto	l3150
  2912  0765                     l3130:	
  2913                           ;main.c: 333: case 3: WriteStringToLCD("WED");
  2914                           
  2915  0765  30E9               	movlw	low (STR_15| (0+32768))
  2916  0766  00F4               	movwf	WriteStringToLCD@s
  2917  0767  3090               	movlw	high (STR_15| (0+32768))
  2918  0768  00F5               	movwf	WriteStringToLCD@s+1
  2919  0769  160A  118A  25AF  120A  118A  	fcall	_WriteStringToLCD
  2920                           
  2921                           ;main.c: 334: break;
  2922  076E  2FD3               	goto	l3150
  2923  076F                     l3132:	
  2924                           ;main.c: 335: case 4: WriteStringToLCD("THU");
  2925                           
  2926  076F  3001               	movlw	low (STR_16| (0+32768))
  2927  0770  00F4               	movwf	WriteStringToLCD@s
  2928  0771  3091               	movlw	high (STR_16| (0+32768))
  2929  0772  00F5               	movwf	WriteStringToLCD@s+1
  2930  0773  160A  118A  25AF  120A  118A  	fcall	_WriteStringToLCD
  2931                           
  2932                           ;main.c: 336: break;
  2933  0778  2FD3               	goto	l3150
  2934  0779                     l3134:	
  2935                           ;main.c: 337: case 5: WriteStringToLCD("FRI");
  2936                           
  2937  0779  30F1               	movlw	low (STR_17| (0+32768))
  2938  077A  00F4               	movwf	WriteStringToLCD@s
  2939  077B  3090               	movlw	high (STR_17| (0+32768))
  2940  077C  00F5               	movwf	WriteStringToLCD@s+1
  2941  077D  160A  118A  25AF  120A  118A  	fcall	_WriteStringToLCD
  2942                           
  2943                           ;main.c: 338: break;
  2944  0782  2FD3               	goto	l3150
  2945  0783                     l3136:	
  2946                           ;main.c: 339: case 6: WriteStringToLCD("SAT");
  2947                           
  2948  0783  30FD               	movlw	low (STR_18| (0+32768))
  2949  0784  00F4               	movwf	WriteStringToLCD@s
  2950  0785  3090               	movlw	high (STR_18| (0+32768))
  2951  0786  00F5               	movwf	WriteStringToLCD@s+1
  2952  0787  160A  118A  25AF  120A  118A  	fcall	_WriteStringToLCD
  2953                           
  2954                           ;main.c: 340: break;
  2955  078C  2FD3               	goto	l3150
  2956  078D                     l3138:	
  2957                           ;main.c: 341: case 7: WriteStringToLCD("SUN");
  2958                           
  2959  078D  30F9               	movlw	low (STR_19| (0+32768))
  2960  078E  00F4               	movwf	WriteStringToLCD@s
  2961  078F  3090               	movlw	high (STR_19| (0+32768))
  2962  0790  00F5               	movwf	WriteStringToLCD@s+1
  2963  0791  160A  118A  25AF  120A  118A  	fcall	_WriteStringToLCD
  2964                           
  2965                           ;main.c: 342: break;
  2966  0796  2FD3               	goto	l3150
  2967  0797                     l3140:	
  2968                           ;main.c: 343: default: WriteStringToLCD("???");
  2969                           
  2970  0797  30E5               	movlw	low (STR_20| (0+32768))
  2971  0798  00F4               	movwf	WriteStringToLCD@s
  2972  0799  3090               	movlw	high (STR_20| (0+32768))
  2973  079A  00F5               	movwf	WriteStringToLCD@s+1
  2974  079B  160A  118A  25AF  120A  118A  	fcall	_WriteStringToLCD
  2975                           
  2976                           ;main.c: 345: }
  2977                           
  2978                           ;main.c: 344: break;
  2979  07A0  2FD3               	goto	l3150
  2980  07A1                     l3144:	
  2981                           
  2982                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2983                           ; Switch size 1, requested type "space"
  2984                           ; Number of cases is 1, Range of values is 0 to 0
  2985                           ; switch strategies available:
  2986                           ; Name         Instructions Cycles
  2987                           ; simple_byte            4     3 (average)
  2988                           ; direct_byte           11     8 (fixed)
  2989                           ; jumptable            260     6 (fixed)
  2990                           ;	Chosen strategy is simple_byte
  2991  07A1  1283               	bcf	3,5	;RP0=0, select bank0
  2992  07A2  1303               	bcf	3,6	;RP1=0, select bank0
  2993  07A3  082E               	movf	displayState3@w+1,w
  2994  07A4  3A00               	xorlw	0	; case 0
  2995  07A5  1903               	skipnz
  2996  07A6  2FA8               	goto	l3490
  2997  07A7  2F97               	goto	l3140
  2998  07A8                     l3490:	
  2999                           
  3000                           ; Switch size 1, requested type "space"
  3001                           ; Number of cases is 7, Range of values is 1 to 7
  3002                           ; switch strategies available:
  3003                           ; Name         Instructions Cycles
  3004                           ; simple_byte           22    12 (average)
  3005                           ; direct_byte           32    11 (fixed)
  3006                           ; jumptable            263     9 (fixed)
  3007                           ;	Chosen strategy is simple_byte
  3008  07A8  082D               	movf	displayState3@w,w
  3009  07A9  3A01               	xorlw	1	; case 1
  3010  07AA  1903               	skipnz
  3011  07AB  2F51               	goto	l3126
  3012  07AC  3A03               	xorlw	3	; case 2
  3013  07AD  1903               	skipnz
  3014  07AE  2F5B               	goto	l3128
  3015  07AF  3A01               	xorlw	1	; case 3
  3016  07B0  1903               	skipnz
  3017  07B1  2F65               	goto	l3130
  3018  07B2  3A07               	xorlw	7	; case 4
  3019  07B3  1903               	skipnz
  3020  07B4  2F6F               	goto	l3132
  3021  07B5  3A01               	xorlw	1	; case 5
  3022  07B6  1903               	skipnz
  3023  07B7  2F79               	goto	l3134
  3024  07B8  3A03               	xorlw	3	; case 6
  3025  07B9  1903               	skipnz
  3026  07BA  2F83               	goto	l3136
  3027  07BB  3A01               	xorlw	1	; case 7
  3028  07BC  1903               	skipnz
  3029  07BD  2F8D               	goto	l3138
  3030  07BE  2F97               	goto	l3140
  3031                           
  3032                           ;main.c: 347: }
  3033                           
  3034                           ;main.c: 346: break;
  3035  07BF  2FD3               	goto	l3150
  3036  07C0                     l3148:	
  3037                           
  3038                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3039                           ; Switch size 1, requested type "space"
  3040                           ; Number of cases is 1, Range of values is 0 to 0
  3041                           ; switch strategies available:
  3042                           ; Name         Instructions Cycles
  3043                           ; simple_byte            4     3 (average)
  3044                           ; direct_byte           11     8 (fixed)
  3045                           ; jumptable            260     6 (fixed)
  3046                           ;	Chosen strategy is simple_byte
  3047  07C0  084D               	movf	_switch_state+1,w
  3048  07C1  3A00               	xorlw	0	; case 0
  3049  07C2  1903               	skipnz
  3050  07C3  2FC5               	goto	l3492
  3051  07C4  2FD3               	goto	l3150
  3052  07C5                     l3492:	
  3053                           
  3054                           ; Switch size 1, requested type "space"
  3055                           ; Number of cases is 4, Range of values is 1 to 4
  3056                           ; switch strategies available:
  3057                           ; Name         Instructions Cycles
  3058                           ; simple_byte           13     7 (average)
  3059                           ; direct_byte           23    11 (fixed)
  3060                           ; jumptable            263     9 (fixed)
  3061                           ;	Chosen strategy is simple_byte
  3062  07C5  084C               	movf	_switch_state,w
  3063  07C6  3A01               	xorlw	1	; case 1
  3064  07C7  1903               	skipnz
  3065  07C8  2E32               	goto	l3038
  3066  07C9  3A03               	xorlw	3	; case 2
  3067  07CA  1903               	skipnz
  3068  07CB  2E83               	goto	l3062
  3069  07CC  3A01               	xorlw	1	; case 3
  3070  07CD  1903               	skipnz
  3071  07CE  2ED4               	goto	l3086
  3072  07CF  3A07               	xorlw	7	; case 4
  3073  07D0  1903               	skipnz
  3074  07D1  2F1E               	goto	l3108
  3075  07D2  2FD3               	goto	l3150
  3076  07D3                     l3150:	
  3077                           
  3078                           ;main.c: 348: Set_DS1307_RTC_Date(d, m, y, w);
  3079  07D3  1283               	bcf	3,5	;RP0=0, select bank0
  3080  07D4  1303               	bcf	3,6	;RP1=0, select bank0
  3081  07D5  0831               	movf	displayState3@m,w
  3082  07D6  00A8               	movwf	??_displayState3
  3083  07D7  0828               	movf	??_displayState3,w
  3084  07D8  00F9               	movwf	Set_DS1307_RTC_Date@Month
  3085  07D9  082B               	movf	displayState3@y,w
  3086  07DA  00A9               	movwf	??_displayState3+1
  3087  07DB  0829               	movf	??_displayState3+1,w
  3088  07DC  00FA               	movwf	Set_DS1307_RTC_Date@Year
  3089  07DD  082D               	movf	displayState3@w,w
  3090  07DE  00AA               	movwf	??_displayState3+2
  3091  07DF  082A               	movf	??_displayState3+2,w
  3092  07E0  00FB               	movwf	Set_DS1307_RTC_Date@Day
  3093  07E1  082F               	movf	displayState3@d,w
  3094  07E2  120A  158A  2506  120A  118A  	fcall	_Set_DS1307_RTC_Date
  3095  07E7  2E1F               	goto	l159
  3096  07E8                     __end_of_displayState3:	
  3097                           
  3098                           	psect	text4
  3099  0D06                     __ptext4:	
  3100 ;; *************** function _Set_DS1307_RTC_Date *****************
  3101 ;; Defined at:
  3102 ;;		line 199 in file "DS1307.c"
  3103 ;; Parameters:    Size  Location     Type
  3104 ;;  Date            1    wreg     unsigned char 
  3105 ;;  Month           1    9[COMMON] unsigned char 
  3106 ;;  Year            1   10[COMMON] unsigned char 
  3107 ;;  Day             1   11[COMMON] unsigned char 
  3108 ;; Auto vars:     Size  Location     Type
  3109 ;;  Date            1   12[COMMON] unsigned char 
  3110 ;; Return value:  Size  Location     Type
  3111 ;;		None               void
  3112 ;; Registers used:
  3113 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3114 ;; Tracked objects:
  3115 ;;		On entry : 0/0
  3116 ;;		On exit  : 0/0
  3117 ;;		Unchanged: 0/0
  3118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3119 ;;      Params:         3       0       0       0       0
  3120 ;;      Locals:         1       0       0       0       0
  3121 ;;      Temps:          0       8       0       0       0
  3122 ;;      Totals:         4       8       0       0       0
  3123 ;;Total ram usage:       12 bytes
  3124 ;; Hardware stack levels used:    1
  3125 ;; Hardware stack levels required when called:    2
  3126 ;; This function calls:
  3127 ;;		_Write_Bytes_To_DS1307_RTC
  3128 ;;		___awdiv
  3129 ;;		___awmod
  3130 ;; This function is called by:
  3131 ;;		_main
  3132 ;;		_displayState3
  3133 ;; This function uses a non-reentrant model
  3134 ;;
  3135                           
  3136                           
  3137                           ;psect for function _Set_DS1307_RTC_Date
  3138  0D06                     _Set_DS1307_RTC_Date:	
  3139                           
  3140                           ;incstack = 0
  3141                           ; Regs used in _Set_DS1307_RTC_Date: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3142                           ;Set_DS1307_RTC_Date@Date stored from wreg
  3143  0D06  00FC               	movwf	Set_DS1307_RTC_Date@Date
  3144                           
  3145                           ;DS1307.c: 201: pRTCArray[0] = (((unsigned char) (Day / 10)) << 4) | ((unsigned char) (D
      +                          ay % 10));
  3146  0D07  300A               	movlw	10
  3147  0D08  00F0               	movwf	___awmod@divisor
  3148  0D09  3000               	movlw	0
  3149  0D0A  00F1               	movwf	___awmod@divisor+1
  3150  0D0B  087B               	movf	Set_DS1307_RTC_Date@Day,w
  3151  0D0C  1283               	bcf	3,5	;RP0=0, select bank0
  3152  0D0D  1303               	bcf	3,6	;RP1=0, select bank0
  3153  0D0E  00A0               	movwf	??_Set_DS1307_RTC_Date
  3154  0D0F  01A1               	clrf	??_Set_DS1307_RTC_Date+1
  3155  0D10  0820               	movf	??_Set_DS1307_RTC_Date,w
  3156  0D11  00F2               	movwf	___awmod@dividend
  3157  0D12  0821               	movf	??_Set_DS1307_RTC_Date+1,w
  3158  0D13  00F3               	movwf	___awmod@dividend+1
  3159  0D14  160A  118A  2697  120A  158A  	fcall	___awmod
  3160  0D19  0870               	movf	?___awmod,w
  3161  0D1A  1283               	bcf	3,5	;RP0=0, select bank0
  3162  0D1B  1303               	bcf	3,6	;RP1=0, select bank0
  3163  0D1C  00A2               	movwf	??_Set_DS1307_RTC_Date+2
  3164  0D1D  0871               	movf	?___awmod+1,w
  3165  0D1E  00A3               	movwf	??_Set_DS1307_RTC_Date+3
  3166  0D1F  300A               	movlw	10
  3167  0D20  00F0               	movwf	___awdiv@divisor
  3168  0D21  3000               	movlw	0
  3169  0D22  00F1               	movwf	___awdiv@divisor+1
  3170  0D23  087B               	movf	Set_DS1307_RTC_Date@Day,w
  3171  0D24  00A4               	movwf	??_Set_DS1307_RTC_Date+4
  3172  0D25  01A5               	clrf	??_Set_DS1307_RTC_Date+5
  3173  0D26  0824               	movf	??_Set_DS1307_RTC_Date+4,w
  3174  0D27  00F2               	movwf	___awdiv@dividend
  3175  0D28  0825               	movf	??_Set_DS1307_RTC_Date+5,w
  3176  0D29  00F3               	movwf	___awdiv@dividend+1
  3177  0D2A  160A  118A  26E2  120A  158A  	fcall	___awdiv
  3178  0D2F  0870               	movf	?___awdiv,w
  3179  0D30  1283               	bcf	3,5	;RP0=0, select bank0
  3180  0D31  1303               	bcf	3,6	;RP1=0, select bank0
  3181  0D32  00A6               	movwf	??_Set_DS1307_RTC_Date+6
  3182  0D33  3003               	movlw	3
  3183  0D34                     u2175:	
  3184  0D34  1003               	clrc
  3185  0D35  0DA6               	rlf	??_Set_DS1307_RTC_Date+6,f
  3186  0D36  3EFF               	addlw	-1
  3187  0D37  1D03               	skipz
  3188  0D38  2D34               	goto	u2175
  3189  0D39  1003               	clrc
  3190  0D3A  0D26               	rlf	??_Set_DS1307_RTC_Date+6,w
  3191  0D3B  0422               	iorwf	??_Set_DS1307_RTC_Date+2,w
  3192  0D3C  00A7               	movwf	??_Set_DS1307_RTC_Date+7
  3193  0D3D  0827               	movf	??_Set_DS1307_RTC_Date+7,w
  3194  0D3E  00D0               	movwf	_pRTCArray
  3195                           
  3196                           ;DS1307.c: 202: pRTCArray[1] = (((unsigned char) (Date / 10)) << 4) | ((unsigned char) (
      +                          Date % 10));
  3197  0D3F  300A               	movlw	10
  3198  0D40  00F0               	movwf	___awmod@divisor
  3199  0D41  3000               	movlw	0
  3200  0D42  00F1               	movwf	___awmod@divisor+1
  3201  0D43  087C               	movf	Set_DS1307_RTC_Date@Date,w
  3202  0D44  00A0               	movwf	??_Set_DS1307_RTC_Date
  3203  0D45  01A1               	clrf	??_Set_DS1307_RTC_Date+1
  3204  0D46  0820               	movf	??_Set_DS1307_RTC_Date,w
  3205  0D47  00F2               	movwf	___awmod@dividend
  3206  0D48  0821               	movf	??_Set_DS1307_RTC_Date+1,w
  3207  0D49  00F3               	movwf	___awmod@dividend+1
  3208  0D4A  160A  118A  2697  120A  158A  	fcall	___awmod
  3209  0D4F  0870               	movf	?___awmod,w
  3210  0D50  1283               	bcf	3,5	;RP0=0, select bank0
  3211  0D51  1303               	bcf	3,6	;RP1=0, select bank0
  3212  0D52  00A2               	movwf	??_Set_DS1307_RTC_Date+2
  3213  0D53  0871               	movf	?___awmod+1,w
  3214  0D54  00A3               	movwf	??_Set_DS1307_RTC_Date+3
  3215  0D55  300A               	movlw	10
  3216  0D56  00F0               	movwf	___awdiv@divisor
  3217  0D57  3000               	movlw	0
  3218  0D58  00F1               	movwf	___awdiv@divisor+1
  3219  0D59  087C               	movf	Set_DS1307_RTC_Date@Date,w
  3220  0D5A  00A4               	movwf	??_Set_DS1307_RTC_Date+4
  3221  0D5B  01A5               	clrf	??_Set_DS1307_RTC_Date+5
  3222  0D5C  0824               	movf	??_Set_DS1307_RTC_Date+4,w
  3223  0D5D  00F2               	movwf	___awdiv@dividend
  3224  0D5E  0825               	movf	??_Set_DS1307_RTC_Date+5,w
  3225  0D5F  00F3               	movwf	___awdiv@dividend+1
  3226  0D60  160A  118A  26E2  120A  158A  	fcall	___awdiv
  3227  0D65  0870               	movf	?___awdiv,w
  3228  0D66  1283               	bcf	3,5	;RP0=0, select bank0
  3229  0D67  1303               	bcf	3,6	;RP1=0, select bank0
  3230  0D68  00A6               	movwf	??_Set_DS1307_RTC_Date+6
  3231  0D69  3003               	movlw	3
  3232  0D6A                     u2185:	
  3233  0D6A  1003               	clrc
  3234  0D6B  0DA6               	rlf	??_Set_DS1307_RTC_Date+6,f
  3235  0D6C  3EFF               	addlw	-1
  3236  0D6D  1D03               	skipz
  3237  0D6E  2D6A               	goto	u2185
  3238  0D6F  1003               	clrc
  3239  0D70  0D26               	rlf	??_Set_DS1307_RTC_Date+6,w
  3240  0D71  0422               	iorwf	??_Set_DS1307_RTC_Date+2,w
  3241  0D72  00A7               	movwf	??_Set_DS1307_RTC_Date+7
  3242  0D73  0827               	movf	??_Set_DS1307_RTC_Date+7,w
  3243  0D74  00D1               	movwf	_pRTCArray+1
  3244                           
  3245                           ;DS1307.c: 203: pRTCArray[2] = (((unsigned char) (Month / 10)) << 4) | ((unsigned char) 
      +                          (Month % 10));
  3246  0D75  300A               	movlw	10
  3247  0D76  00F0               	movwf	___awmod@divisor
  3248  0D77  3000               	movlw	0
  3249  0D78  00F1               	movwf	___awmod@divisor+1
  3250  0D79  0879               	movf	Set_DS1307_RTC_Date@Month,w
  3251  0D7A  00A0               	movwf	??_Set_DS1307_RTC_Date
  3252  0D7B  01A1               	clrf	??_Set_DS1307_RTC_Date+1
  3253  0D7C  0820               	movf	??_Set_DS1307_RTC_Date,w
  3254  0D7D  00F2               	movwf	___awmod@dividend
  3255  0D7E  0821               	movf	??_Set_DS1307_RTC_Date+1,w
  3256  0D7F  00F3               	movwf	___awmod@dividend+1
  3257  0D80  160A  118A  2697  120A  158A  	fcall	___awmod
  3258  0D85  0870               	movf	?___awmod,w
  3259  0D86  1283               	bcf	3,5	;RP0=0, select bank0
  3260  0D87  1303               	bcf	3,6	;RP1=0, select bank0
  3261  0D88  00A2               	movwf	??_Set_DS1307_RTC_Date+2
  3262  0D89  0871               	movf	?___awmod+1,w
  3263  0D8A  00A3               	movwf	??_Set_DS1307_RTC_Date+3
  3264  0D8B  300A               	movlw	10
  3265  0D8C  00F0               	movwf	___awdiv@divisor
  3266  0D8D  3000               	movlw	0
  3267  0D8E  00F1               	movwf	___awdiv@divisor+1
  3268  0D8F  0879               	movf	Set_DS1307_RTC_Date@Month,w
  3269  0D90  00A4               	movwf	??_Set_DS1307_RTC_Date+4
  3270  0D91  01A5               	clrf	??_Set_DS1307_RTC_Date+5
  3271  0D92  0824               	movf	??_Set_DS1307_RTC_Date+4,w
  3272  0D93  00F2               	movwf	___awdiv@dividend
  3273  0D94  0825               	movf	??_Set_DS1307_RTC_Date+5,w
  3274  0D95  00F3               	movwf	___awdiv@dividend+1
  3275  0D96  160A  118A  26E2  120A  158A  	fcall	___awdiv
  3276  0D9B  0870               	movf	?___awdiv,w
  3277  0D9C  1283               	bcf	3,5	;RP0=0, select bank0
  3278  0D9D  1303               	bcf	3,6	;RP1=0, select bank0
  3279  0D9E  00A6               	movwf	??_Set_DS1307_RTC_Date+6
  3280  0D9F  3003               	movlw	3
  3281  0DA0                     u2195:	
  3282  0DA0  1003               	clrc
  3283  0DA1  0DA6               	rlf	??_Set_DS1307_RTC_Date+6,f
  3284  0DA2  3EFF               	addlw	-1
  3285  0DA3  1D03               	skipz
  3286  0DA4  2DA0               	goto	u2195
  3287  0DA5  1003               	clrc
  3288  0DA6  0D26               	rlf	??_Set_DS1307_RTC_Date+6,w
  3289  0DA7  0422               	iorwf	??_Set_DS1307_RTC_Date+2,w
  3290  0DA8  00A7               	movwf	??_Set_DS1307_RTC_Date+7
  3291  0DA9  0827               	movf	??_Set_DS1307_RTC_Date+7,w
  3292  0DAA  00D2               	movwf	_pRTCArray+2
  3293                           
  3294                           ;DS1307.c: 204: pRTCArray[3] = (((unsigned char) (Year / 10)) << 4) | ((unsigned char) (
      +                          Year % 10));
  3295  0DAB  300A               	movlw	10
  3296  0DAC  00F0               	movwf	___awmod@divisor
  3297  0DAD  3000               	movlw	0
  3298  0DAE  00F1               	movwf	___awmod@divisor+1
  3299  0DAF  087A               	movf	Set_DS1307_RTC_Date@Year,w
  3300  0DB0  00A0               	movwf	??_Set_DS1307_RTC_Date
  3301  0DB1  01A1               	clrf	??_Set_DS1307_RTC_Date+1
  3302  0DB2  0820               	movf	??_Set_DS1307_RTC_Date,w
  3303  0DB3  00F2               	movwf	___awmod@dividend
  3304  0DB4  0821               	movf	??_Set_DS1307_RTC_Date+1,w
  3305  0DB5  00F3               	movwf	___awmod@dividend+1
  3306  0DB6  160A  118A  2697  120A  158A  	fcall	___awmod
  3307  0DBB  0870               	movf	?___awmod,w
  3308  0DBC  1283               	bcf	3,5	;RP0=0, select bank0
  3309  0DBD  1303               	bcf	3,6	;RP1=0, select bank0
  3310  0DBE  00A2               	movwf	??_Set_DS1307_RTC_Date+2
  3311  0DBF  0871               	movf	?___awmod+1,w
  3312  0DC0  00A3               	movwf	??_Set_DS1307_RTC_Date+3
  3313  0DC1  300A               	movlw	10
  3314  0DC2  00F0               	movwf	___awdiv@divisor
  3315  0DC3  3000               	movlw	0
  3316  0DC4  00F1               	movwf	___awdiv@divisor+1
  3317  0DC5  087A               	movf	Set_DS1307_RTC_Date@Year,w
  3318  0DC6  00A4               	movwf	??_Set_DS1307_RTC_Date+4
  3319  0DC7  01A5               	clrf	??_Set_DS1307_RTC_Date+5
  3320  0DC8  0824               	movf	??_Set_DS1307_RTC_Date+4,w
  3321  0DC9  00F2               	movwf	___awdiv@dividend
  3322  0DCA  0825               	movf	??_Set_DS1307_RTC_Date+5,w
  3323  0DCB  00F3               	movwf	___awdiv@dividend+1
  3324  0DCC  160A  118A  26E2  120A  158A  	fcall	___awdiv
  3325  0DD1  0870               	movf	?___awdiv,w
  3326  0DD2  1283               	bcf	3,5	;RP0=0, select bank0
  3327  0DD3  1303               	bcf	3,6	;RP1=0, select bank0
  3328  0DD4  00A6               	movwf	??_Set_DS1307_RTC_Date+6
  3329  0DD5  3003               	movlw	3
  3330  0DD6                     u2205:	
  3331  0DD6  1003               	clrc
  3332  0DD7  0DA6               	rlf	??_Set_DS1307_RTC_Date+6,f
  3333  0DD8  3EFF               	addlw	-1
  3334  0DD9  1D03               	skipz
  3335  0DDA  2DD6               	goto	u2205
  3336  0DDB  1003               	clrc
  3337  0DDC  0D26               	rlf	??_Set_DS1307_RTC_Date+6,w
  3338  0DDD  0422               	iorwf	??_Set_DS1307_RTC_Date+2,w
  3339  0DDE  00A7               	movwf	??_Set_DS1307_RTC_Date+7
  3340  0DDF  0827               	movf	??_Set_DS1307_RTC_Date+7,w
  3341  0DE0  00D3               	movwf	_pRTCArray+3
  3342                           
  3343                           ;DS1307.c: 207: Write_Bytes_To_DS1307_RTC(0x03, pRTCArray, 4);
  3344  0DE1  3050               	movlw	(low (_pRTCArray| 0))& (0+255)
  3345  0DE2  00A0               	movwf	??_Set_DS1307_RTC_Date
  3346  0DE3  0820               	movf	??_Set_DS1307_RTC_Date,w
  3347  0DE4  00F1               	movwf	Write_Bytes_To_DS1307_RTC@pData
  3348  0DE5  3004               	movlw	4
  3349  0DE6  00A1               	movwf	??_Set_DS1307_RTC_Date+1
  3350  0DE7  0821               	movf	??_Set_DS1307_RTC_Date+1,w
  3351  0DE8  00F2               	movwf	Write_Bytes_To_DS1307_RTC@NoOfBytes
  3352  0DE9  3003               	movlw	3
  3353  0DEA  160A  118A  2623   	fcall	_Write_Bytes_To_DS1307_RTC
  3354  0DED  0008               	return
  3355  0DEE                     __end_of_Set_DS1307_RTC_Date:	
  3356                           
  3357                           	psect	text5
  3358  033E                     __ptext5:	
  3359 ;; *************** function _displayState2 *****************
  3360 ;; Defined at:
  3361 ;;		line 122 in file "main.c"
  3362 ;; Parameters:    Size  Location     Type
  3363 ;;		None
  3364 ;; Auto vars:     Size  Location     Type
  3365 ;;  m               2   15[BANK0 ] unsigned int 
  3366 ;;  h               2   13[BANK0 ] unsigned int 
  3367 ;;  s               2   11[BANK0 ] unsigned int 
  3368 ;; Return value:  Size  Location     Type
  3369 ;;		None               void
  3370 ;; Registers used:
  3371 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3372 ;; Tracked objects:
  3373 ;;		On entry : 0/0
  3374 ;;		On exit  : 0/0
  3375 ;;		Unchanged: 0/0
  3376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3377 ;;      Params:         0       0       0       0       0
  3378 ;;      Locals:         0       6       0       0       0
  3379 ;;      Temps:          0       3       0       0       0
  3380 ;;      Totals:         0       9       0       0       0
  3381 ;;Total ram usage:        9 bytes
  3382 ;; Hardware stack levels used:    1
  3383 ;; Hardware stack levels required when called:    3
  3384 ;; This function calls:
  3385 ;;		_ClearLCDScreen
  3386 ;;		_Get_DS1307_RTC_Time
  3387 ;;		_Set_DS1307_RTC_Time
  3388 ;;		_WriteCommandToLCD
  3389 ;;		_WriteStringToLCD
  3390 ;;		_WriteTempToLCD
  3391 ;; This function is called by:
  3392 ;;		_main
  3393 ;; This function uses a non-reentrant model
  3394 ;;
  3395                           
  3396                           
  3397                           ;psect for function _displayState2
  3398  033E                     _displayState2:	
  3399                           
  3400                           ;main.c: 123: ClearLCDScreen();
  3401                           
  3402                           ;incstack = 0
  3403                           ; Regs used in _displayState2: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3404  033E  160A  118A  252F  120A  118A  	fcall	_ClearLCDScreen
  3405                           
  3406                           ;main.c: 125: unsigned int h;
  3407                           ;main.c: 126: unsigned int m;
  3408                           ;main.c: 127: unsigned int s;
  3409                           ;main.c: 128: h = (int) Get_DS1307_RTC_Time()[2];
  3410  0343  120A  158A  21FD  120A  118A  	fcall	_Get_DS1307_RTC_Time
  3411  0348  1283               	bcf	3,5	;RP0=0, select bank0
  3412  0349  1303               	bcf	3,6	;RP1=0, select bank0
  3413  034A  00A8               	movwf	??_displayState2
  3414  034B  3002               	movlw	2
  3415  034C  0728               	addwf	??_displayState2,w
  3416  034D  0084               	movwf	4
  3417  034E  1383               	bcf	3,7	;select IRP bank0
  3418  034F  0800               	movf	0,w
  3419  0350  00A9               	movwf	??_displayState2+1
  3420  0351  01AA               	clrf	??_displayState2+2
  3421  0352  0829               	movf	??_displayState2+1,w
  3422  0353  00AD               	movwf	displayState2@h
  3423  0354  082A               	movf	??_displayState2+2,w
  3424  0355  00AE               	movwf	displayState2@h+1
  3425                           
  3426                           ;main.c: 129: m = (int) Get_DS1307_RTC_Time()[1];
  3427  0356  120A  158A  21FD  120A  118A  	fcall	_Get_DS1307_RTC_Time
  3428  035B  1283               	bcf	3,5	;RP0=0, select bank0
  3429  035C  1303               	bcf	3,6	;RP1=0, select bank0
  3430  035D  00A8               	movwf	??_displayState2
  3431  035E  3001               	movlw	1
  3432  035F  0728               	addwf	??_displayState2,w
  3433  0360  0084               	movwf	4
  3434  0361  1383               	bcf	3,7	;select IRP bank0
  3435  0362  0800               	movf	0,w
  3436  0363  00A9               	movwf	??_displayState2+1
  3437  0364  01AA               	clrf	??_displayState2+2
  3438  0365  0829               	movf	??_displayState2+1,w
  3439  0366  00AF               	movwf	displayState2@m
  3440  0367  082A               	movf	??_displayState2+2,w
  3441  0368  00B0               	movwf	displayState2@m+1
  3442                           
  3443                           ;main.c: 130: s = (int) Get_DS1307_RTC_Time()[0];
  3444  0369  120A  158A  21FD  120A  118A  	fcall	_Get_DS1307_RTC_Time
  3445  036E  0084               	movwf	4
  3446  036F  1383               	bcf	3,7	;select IRP bank0
  3447  0370  0800               	movf	0,w
  3448  0371  1283               	bcf	3,5	;RP0=0, select bank0
  3449  0372  1303               	bcf	3,6	;RP1=0, select bank0
  3450  0373  00A8               	movwf	??_displayState2
  3451  0374  01A9               	clrf	??_displayState2+1
  3452  0375  0828               	movf	??_displayState2,w
  3453  0376  00AB               	movwf	displayState2@s
  3454  0377  0829               	movf	??_displayState2+1,w
  3455  0378  00AC               	movwf	displayState2@s+1
  3456                           
  3457                           ;main.c: 132: if (!RA1) {
  3458  0379  1885               	btfsc	5,1	;volatile
  3459  037A  2B8A               	goto	l2864
  3460                           
  3461                           ;main.c: 133: state++;
  3462  037B  3001               	movlw	1
  3463  037C  07D6               	addwf	_state,f
  3464  037D  1803               	skipnc
  3465  037E  0AD7               	incf	_state+1,f
  3466  037F  3000               	movlw	0
  3467  0380  07D7               	addwf	_state+1,f
  3468                           
  3469                           ;main.c: 134: if (state == 5) {
  3470  0381  3005               	movlw	5
  3471  0382  0656               	xorwf	_state,w
  3472  0383  0457               	iorwf	_state+1,w
  3473  0384  1D03               	btfss	3,2
  3474  0385  2B8A               	goto	l2864
  3475                           
  3476                           ;main.c: 135: state = 1;
  3477  0386  3001               	movlw	1
  3478  0387                     L2:	
  3479  0387  00D6               	movwf	_state
  3480  0388  3000               	movlw	0
  3481  0389  00D7               	movwf	_state+1
  3482  038A                     l2864:	
  3483                           ;main.c: 136: }
  3484                           ;main.c: 137: }
  3485                           ;main.c: 139: while (1) {
  3486                           
  3487                           
  3488                           ;main.c: 140: WriteCommandToLCD(0x80);
  3489  038A  3080               	movlw	128
  3490  038B  160A  118A  25F9  120A  118A  	fcall	_WriteCommandToLCD
  3491                           
  3492                           ;main.c: 141: WriteStringToLCD("  SETTING TIME");
  3493  0390  30B3               	movlw	low (STR_3| (0+32768))
  3494  0391  00F4               	movwf	WriteStringToLCD@s
  3495  0392  3090               	movlw	high (STR_3| (0+32768))
  3496  0393  00F5               	movwf	WriteStringToLCD@s+1
  3497  0394  160A  118A  25AF  120A  118A  	fcall	_WriteStringToLCD
  3498                           
  3499                           ;main.c: 142: WriteCommandToLCD(0xc0);
  3500  0399  30C0               	movlw	192
  3501  039A  160A  118A  25F9  120A  118A  	fcall	_WriteCommandToLCD
  3502                           
  3503                           ;main.c: 143: WriteTempToLCD(h);
  3504  039F  1283               	bcf	3,5	;RP0=0, select bank0
  3505  03A0  1303               	bcf	3,6	;RP1=0, select bank0
  3506  03A1  082E               	movf	displayState2@h+1,w
  3507  03A2  00FA               	movwf	WriteTempToLCD@Temp+1
  3508  03A3  082D               	movf	displayState2@h,w
  3509  03A4  00F9               	movwf	WriteTempToLCD@Temp
  3510  03A5  160A  118A  25D2  120A  118A  	fcall	_WriteTempToLCD
  3511                           
  3512                           ;main.c: 144: WriteStringToLCD(":");
  3513  03AA  300B               	movlw	low (STR_4| (0+32768))
  3514  03AB  00F4               	movwf	WriteStringToLCD@s
  3515  03AC  3091               	movlw	high (STR_4| (0+32768))
  3516  03AD  00F5               	movwf	WriteStringToLCD@s+1
  3517  03AE  160A  118A  25AF  120A  118A  	fcall	_WriteStringToLCD
  3518                           
  3519                           ;main.c: 145: WriteTempToLCD(m);
  3520  03B3  1283               	bcf	3,5	;RP0=0, select bank0
  3521  03B4  1303               	bcf	3,6	;RP1=0, select bank0
  3522  03B5  0830               	movf	displayState2@m+1,w
  3523  03B6  00FA               	movwf	WriteTempToLCD@Temp+1
  3524  03B7  082F               	movf	displayState2@m,w
  3525  03B8  00F9               	movwf	WriteTempToLCD@Temp
  3526  03B9  160A  118A  25D2  120A  118A  	fcall	_WriteTempToLCD
  3527                           
  3528                           ;main.c: 146: WriteStringToLCD(":");
  3529  03BE  300B               	movlw	low (STR_4| (0+32768))
  3530  03BF  00F4               	movwf	WriteStringToLCD@s
  3531  03C0  3091               	movlw	high (STR_4| (0+32768))
  3532  03C1  00F5               	movwf	WriteStringToLCD@s+1
  3533  03C2  160A  118A  25AF  120A  118A  	fcall	_WriteStringToLCD
  3534                           
  3535                           ;main.c: 147: WriteTempToLCD(s);
  3536  03C7  1283               	bcf	3,5	;RP0=0, select bank0
  3537  03C8  1303               	bcf	3,6	;RP1=0, select bank0
  3538  03C9  082C               	movf	displayState2@s+1,w
  3539  03CA  00FA               	movwf	WriteTempToLCD@Temp+1
  3540  03CB  082B               	movf	displayState2@s,w
  3541  03CC  00F9               	movwf	WriteTempToLCD@Temp
  3542  03CD  160A  118A  25D2  120A  118A  	fcall	_WriteTempToLCD
  3543                           
  3544                           ;main.c: 148: if (!RA1) break;
  3545  03D2  1283               	bcf	3,5	;RP0=0, select bank0
  3546  03D3  1303               	bcf	3,6	;RP1=0, select bank0
  3547  03D4  1C85               	btfss	5,1	;volatile
  3548  03D5  0008               	return
  3549  03D6                     l123:	
  3550                           ;main.c: 149: while (1) {
  3551                           
  3552                           
  3553                           ;main.c: 151: if (RA4 == 0) {
  3554  03D6  1283               	bcf	3,5	;RP0=0, select bank0
  3555  03D7  1303               	bcf	3,6	;RP1=0, select bank0
  3556  03D8  1A05               	btfsc	5,4	;volatile
  3557  03D9  2BE5               	goto	l124
  3558                           
  3559                           ;main.c: 152: switch_state++;
  3560  03DA  3001               	movlw	1
  3561  03DB  07CC               	addwf	_switch_state,f
  3562  03DC  1803               	skipnc
  3563  03DD  0ACD               	incf	_switch_state+1,f
  3564  03DE  3000               	movlw	0
  3565  03DF  07CD               	addwf	_switch_state+1,f
  3566                           
  3567                           ;main.c: 153: if (switch_state == 4) {
  3568  03E0  3004               	movlw	4
  3569  03E1  064C               	xorwf	_switch_state,w
  3570  03E2  044D               	iorwf	_switch_state+1,w
  3571  03E3  1903               	btfsc	3,2
  3572  03E4  2B8A               	goto	l2864
  3573  03E5                     l124:	
  3574                           ;main.c: 154: break;
  3575                           
  3576                           
  3577                           ;main.c: 155: }
  3578                           ;main.c: 156: }
  3579                           ;main.c: 158: if (RA1 == 0) {
  3580  03E5  1885               	btfsc	5,1	;volatile
  3581  03E6  2CD5               	goto	l2964
  3582                           
  3583                           ;main.c: 159: state = 3;
  3584  03E7  3003               	movlw	3
  3585  03E8  2B87               	goto	L2
  3586  03E9                     l2892:	
  3587                           ;main.c: 163: case 1:
  3588                           
  3589                           ;main.c: 161: }
  3590                           ;main.c: 162: switch (switch_state) {
  3591                           
  3592                           ;main.c: 160: break;
  3593                           
  3594                           
  3595                           ;main.c: 164: WriteCommandToLCD(0x80);
  3596  03E9  3080               	movlw	128
  3597  03EA  160A  118A  25F9  120A  118A  	fcall	_WriteCommandToLCD
  3598                           
  3599                           ;main.c: 165: WriteStringToLCD("   CHANGE HOUR     ");
  3600  03EF  3000               	movlw	low (STR_6| (0+32768))
  3601  03F0  00F4               	movwf	WriteStringToLCD@s
  3602  03F1  3090               	movlw	high (STR_6| (0+32768))
  3603  03F2  00F5               	movwf	WriteStringToLCD@s+1
  3604  03F3  160A  118A  25AF  120A  118A  	fcall	_WriteStringToLCD
  3605                           
  3606                           ;main.c: 166: if (RA2 == 0 && h < 24) {
  3607  03F8  1283               	bcf	3,5	;RP0=0, select bank0
  3608  03F9  1303               	bcf	3,6	;RP1=0, select bank0
  3609  03FA  1905               	btfsc	5,2	;volatile
  3610  03FB  2C1A               	goto	l2906
  3611  03FC  3000               	movlw	0
  3612  03FD  022E               	subwf	displayState2@h+1,w
  3613  03FE  3018               	movlw	24
  3614  03FF  1903               	skipnz
  3615  0400  022D               	subwf	displayState2@h,w
  3616  0401  1803               	skipnc
  3617  0402  2C1A               	goto	l2906
  3618                           
  3619                           ;main.c: 167: h++;
  3620  0403  3001               	movlw	1
  3621  0404  07AD               	addwf	displayState2@h,f
  3622  0405  1803               	skipnc
  3623  0406  0AAE               	incf	displayState2@h+1,f
  3624  0407  3000               	movlw	0
  3625  0408  07AE               	addwf	displayState2@h+1,f
  3626                           
  3627                           ;main.c: 168: WriteCommandToLCD(0xc0);
  3628  0409  30C0               	movlw	192
  3629  040A  160A  118A  25F9  120A  118A  	fcall	_WriteCommandToLCD
  3630                           
  3631                           ;main.c: 169: WriteTempToLCD(h);
  3632  040F  1283               	bcf	3,5	;RP0=0, select bank0
  3633  0410  1303               	bcf	3,6	;RP1=0, select bank0
  3634  0411  082E               	movf	displayState2@h+1,w
  3635  0412  00FA               	movwf	WriteTempToLCD@Temp+1
  3636  0413  082D               	movf	displayState2@h,w
  3637  0414  00F9               	movwf	WriteTempToLCD@Temp
  3638  0415  160A  118A  25D2  120A  118A  	fcall	_WriteTempToLCD
  3639  041A                     l2906:	
  3640                           
  3641                           ;main.c: 170: }
  3642                           ;main.c: 171: if (RA3 == 0 && h > 0) {
  3643  041A  1283               	bcf	3,5	;RP0=0, select bank0
  3644  041B  1303               	bcf	3,6	;RP1=0, select bank0
  3645  041C  1985               	btfsc	5,3	;volatile
  3646  041D  2CE7               	goto	l2966
  3647  041E  082D               	movf	displayState2@h,w
  3648  041F  042E               	iorwf	displayState2@h+1,w
  3649  0420  1903               	btfsc	3,2
  3650  0421  2CE7               	goto	l2966
  3651                           
  3652                           ;main.c: 172: h--;
  3653  0422  3001               	movlw	1
  3654  0423  02AD               	subwf	displayState2@h,f
  3655  0424  3000               	movlw	0
  3656  0425  1C03               	skipc
  3657  0426  03AE               	decf	displayState2@h+1,f
  3658  0427  02AE               	subwf	displayState2@h+1,f
  3659                           
  3660                           ;main.c: 173: WriteCommandToLCD(0xc0);
  3661  0428  30C0               	movlw	192
  3662  0429  160A  118A  25F9  120A  118A  	fcall	_WriteCommandToLCD
  3663                           
  3664                           ;main.c: 174: WriteTempToLCD(h);
  3665  042E  1283               	bcf	3,5	;RP0=0, select bank0
  3666  042F  1303               	bcf	3,6	;RP1=0, select bank0
  3667  0430  082E               	movf	displayState2@h+1,w
  3668  0431  00FA               	movwf	WriteTempToLCD@Temp+1
  3669  0432  082D               	movf	displayState2@h,w
  3670  0433  00F9               	movwf	WriteTempToLCD@Temp
  3671  0434  160A  118A  25D2  120A  118A  	fcall	_WriteTempToLCD
  3672                           
  3673                           ;main.c: 175: }
  3674                           ;main.c: 176: break;
  3675  0439  2CE7               	goto	l2966
  3676  043A                     l2916:	
  3677                           ;main.c: 178: case 2:
  3678                           
  3679                           
  3680                           ;main.c: 179: WriteCommandToLCD(0x80);
  3681  043A  3080               	movlw	128
  3682  043B  160A  118A  25F9  120A  118A  	fcall	_WriteCommandToLCD
  3683                           
  3684                           ;main.c: 180: WriteStringToLCD("   CHANGE MINUTE   ");
  3685  0440  3028               	movlw	low (STR_7| (0+32768))
  3686  0441  00F4               	movwf	WriteStringToLCD@s
  3687  0442  3090               	movlw	high (STR_7| (0+32768))
  3688  0443  00F5               	movwf	WriteStringToLCD@s+1
  3689  0444  160A  118A  25AF  120A  118A  	fcall	_WriteStringToLCD
  3690                           
  3691                           ;main.c: 181: if (RA2 == 0 && m < 60) {
  3692  0449  1283               	bcf	3,5	;RP0=0, select bank0
  3693  044A  1303               	bcf	3,6	;RP1=0, select bank0
  3694  044B  1905               	btfsc	5,2	;volatile
  3695  044C  2C6B               	goto	l2930
  3696  044D  3000               	movlw	0
  3697  044E  0230               	subwf	displayState2@m+1,w
  3698  044F  303C               	movlw	60
  3699  0450  1903               	skipnz
  3700  0451  022F               	subwf	displayState2@m,w
  3701  0452  1803               	skipnc
  3702  0453  2C6B               	goto	l2930
  3703                           
  3704                           ;main.c: 182: m++;
  3705  0454  3001               	movlw	1
  3706  0455  07AF               	addwf	displayState2@m,f
  3707  0456  1803               	skipnc
  3708  0457  0AB0               	incf	displayState2@m+1,f
  3709  0458  3000               	movlw	0
  3710  0459  07B0               	addwf	displayState2@m+1,f
  3711                           
  3712                           ;main.c: 183: WriteCommandToLCD(0xc0 + 3);
  3713  045A  30C3               	movlw	195
  3714  045B  160A  118A  25F9  120A  118A  	fcall	_WriteCommandToLCD
  3715                           
  3716                           ;main.c: 184: WriteTempToLCD(m);
  3717  0460  1283               	bcf	3,5	;RP0=0, select bank0
  3718  0461  1303               	bcf	3,6	;RP1=0, select bank0
  3719  0462  0830               	movf	displayState2@m+1,w
  3720  0463  00FA               	movwf	WriteTempToLCD@Temp+1
  3721  0464  082F               	movf	displayState2@m,w
  3722  0465  00F9               	movwf	WriteTempToLCD@Temp
  3723  0466  160A  118A  25D2  120A  118A  	fcall	_WriteTempToLCD
  3724  046B                     l2930:	
  3725                           
  3726                           ;main.c: 185: }
  3727                           ;main.c: 186: if (RA3 == 0 && m > 0) {
  3728  046B  1283               	bcf	3,5	;RP0=0, select bank0
  3729  046C  1303               	bcf	3,6	;RP1=0, select bank0
  3730  046D  1985               	btfsc	5,3	;volatile
  3731  046E  2CE7               	goto	l2966
  3732  046F  082F               	movf	displayState2@m,w
  3733  0470  0430               	iorwf	displayState2@m+1,w
  3734  0471  1903               	btfsc	3,2
  3735  0472  2CE7               	goto	l2966
  3736                           
  3737                           ;main.c: 187: m--;
  3738  0473  3001               	movlw	1
  3739  0474  02AF               	subwf	displayState2@m,f
  3740  0475  3000               	movlw	0
  3741  0476  1C03               	skipc
  3742  0477  03B0               	decf	displayState2@m+1,f
  3743  0478  02B0               	subwf	displayState2@m+1,f
  3744                           
  3745                           ;main.c: 188: WriteCommandToLCD(0xc0 + 3);
  3746  0479  30C3               	movlw	195
  3747  047A  160A  118A  25F9  120A  118A  	fcall	_WriteCommandToLCD
  3748                           
  3749                           ;main.c: 189: WriteTempToLCD(m);
  3750  047F  1283               	bcf	3,5	;RP0=0, select bank0
  3751  0480  1303               	bcf	3,6	;RP1=0, select bank0
  3752  0481  0830               	movf	displayState2@m+1,w
  3753  0482  00FA               	movwf	WriteTempToLCD@Temp+1
  3754  0483  082F               	movf	displayState2@m,w
  3755  0484  00F9               	movwf	WriteTempToLCD@Temp
  3756  0485  160A  118A  25D2  120A  118A  	fcall	_WriteTempToLCD
  3757                           
  3758                           ;main.c: 190: }
  3759                           ;main.c: 191: break;
  3760  048A  2CE7               	goto	l2966
  3761  048B                     l2940:	
  3762                           ;main.c: 192: case 3:
  3763                           
  3764                           
  3765                           ;main.c: 193: WriteCommandToLCD(0x80);
  3766  048B  3080               	movlw	128
  3767  048C  160A  118A  25F9  120A  118A  	fcall	_WriteCommandToLCD
  3768                           
  3769                           ;main.c: 194: WriteStringToLCD("  CHANGE SECOND  ");
  3770  0491  3061               	movlw	low (STR_8| (0+32768))
  3771  0492  00F4               	movwf	WriteStringToLCD@s
  3772  0493  3090               	movlw	high (STR_8| (0+32768))
  3773  0494  00F5               	movwf	WriteStringToLCD@s+1
  3774  0495  160A  118A  25AF  120A  118A  	fcall	_WriteStringToLCD
  3775                           
  3776                           ;main.c: 195: if (RA2 == 0) {
  3777  049A  1283               	bcf	3,5	;RP0=0, select bank0
  3778  049B  1303               	bcf	3,6	;RP1=0, select bank0
  3779  049C  1905               	btfsc	5,2	;volatile
  3780  049D  2CB5               	goto	l2952
  3781                           
  3782                           ;main.c: 196: s++;
  3783  049E  3001               	movlw	1
  3784  049F  07AB               	addwf	displayState2@s,f
  3785  04A0  1803               	skipnc
  3786  04A1  0AAC               	incf	displayState2@s+1,f
  3787  04A2  3000               	movlw	0
  3788  04A3  07AC               	addwf	displayState2@s+1,f
  3789                           
  3790                           ;main.c: 197: WriteCommandToLCD(0xc0 + 6);
  3791  04A4  30C6               	movlw	198
  3792  04A5  160A  118A  25F9  120A  118A  	fcall	_WriteCommandToLCD
  3793                           
  3794                           ;main.c: 198: WriteTempToLCD(s);
  3795  04AA  1283               	bcf	3,5	;RP0=0, select bank0
  3796  04AB  1303               	bcf	3,6	;RP1=0, select bank0
  3797  04AC  082C               	movf	displayState2@s+1,w
  3798  04AD  00FA               	movwf	WriteTempToLCD@Temp+1
  3799  04AE  082B               	movf	displayState2@s,w
  3800  04AF  00F9               	movwf	WriteTempToLCD@Temp
  3801  04B0  160A  118A  25D2  120A  118A  	fcall	_WriteTempToLCD
  3802  04B5                     l2952:	
  3803                           
  3804                           ;main.c: 199: }
  3805                           ;main.c: 200: if (RA3 == 0 && s > 0) {
  3806  04B5  1283               	bcf	3,5	;RP0=0, select bank0
  3807  04B6  1303               	bcf	3,6	;RP1=0, select bank0
  3808  04B7  1985               	btfsc	5,3	;volatile
  3809  04B8  2CE7               	goto	l2966
  3810  04B9  082B               	movf	displayState2@s,w
  3811  04BA  042C               	iorwf	displayState2@s+1,w
  3812  04BB  1903               	btfsc	3,2
  3813  04BC  2CE7               	goto	l2966
  3814                           
  3815                           ;main.c: 201: s--;
  3816  04BD  3001               	movlw	1
  3817  04BE  02AB               	subwf	displayState2@s,f
  3818  04BF  3000               	movlw	0
  3819  04C0  1C03               	skipc
  3820  04C1  03AC               	decf	displayState2@s+1,f
  3821  04C2  02AC               	subwf	displayState2@s+1,f
  3822                           
  3823                           ;main.c: 202: WriteCommandToLCD(0xc0 + 6);
  3824  04C3  30C6               	movlw	198
  3825  04C4  160A  118A  25F9  120A  118A  	fcall	_WriteCommandToLCD
  3826                           
  3827                           ;main.c: 203: WriteTempToLCD(s);
  3828  04C9  1283               	bcf	3,5	;RP0=0, select bank0
  3829  04CA  1303               	bcf	3,6	;RP1=0, select bank0
  3830  04CB  082C               	movf	displayState2@s+1,w
  3831  04CC  00FA               	movwf	WriteTempToLCD@Temp+1
  3832  04CD  082B               	movf	displayState2@s,w
  3833  04CE  00F9               	movwf	WriteTempToLCD@Temp
  3834  04CF  160A  118A  25D2  120A  118A  	fcall	_WriteTempToLCD
  3835                           
  3836                           ;main.c: 206: }
  3837                           
  3838                           ;main.c: 204: }
  3839                           ;main.c: 205: break;
  3840  04D4  2CE7               	goto	l2966
  3841  04D5                     l2964:	
  3842                           
  3843                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3844                           ; Switch size 1, requested type "space"
  3845                           ; Number of cases is 1, Range of values is 0 to 0
  3846                           ; switch strategies available:
  3847                           ; Name         Instructions Cycles
  3848                           ; simple_byte            4     3 (average)
  3849                           ; direct_byte           11     8 (fixed)
  3850                           ; jumptable            260     6 (fixed)
  3851                           ;	Chosen strategy is simple_byte
  3852  04D5  1283               	bcf	3,5	;RP0=0, select bank0
  3853  04D6  1303               	bcf	3,6	;RP1=0, select bank0
  3854  04D7  084D               	movf	_switch_state+1,w
  3855  04D8  3A00               	xorlw	0	; case 0
  3856  04D9  1903               	skipnz
  3857  04DA  2CDC               	goto	l3494
  3858  04DB  2CE7               	goto	l2966
  3859  04DC                     l3494:	
  3860                           
  3861                           ; Switch size 1, requested type "space"
  3862                           ; Number of cases is 3, Range of values is 1 to 3
  3863                           ; switch strategies available:
  3864                           ; Name         Instructions Cycles
  3865                           ; simple_byte           10     6 (average)
  3866                           ; direct_byte           20    11 (fixed)
  3867                           ; jumptable            263     9 (fixed)
  3868                           ;	Chosen strategy is simple_byte
  3869  04DC  084C               	movf	_switch_state,w
  3870  04DD  3A01               	xorlw	1	; case 1
  3871  04DE  1903               	skipnz
  3872  04DF  2BE9               	goto	l2892
  3873  04E0  3A03               	xorlw	3	; case 2
  3874  04E1  1903               	skipnz
  3875  04E2  2C3A               	goto	l2916
  3876  04E3  3A01               	xorlw	1	; case 3
  3877  04E4  1903               	skipnz
  3878  04E5  2C8B               	goto	l2940
  3879  04E6  2CE7               	goto	l2966
  3880  04E7                     l2966:	
  3881                           
  3882                           ;main.c: 208: Set_DS1307_RTC_Time(1, h, m, s);
  3883  04E7  1283               	bcf	3,5	;RP0=0, select bank0
  3884  04E8  1303               	bcf	3,6	;RP1=0, select bank0
  3885  04E9  082D               	movf	displayState2@h,w
  3886  04EA  00A8               	movwf	??_displayState2
  3887  04EB  0828               	movf	??_displayState2,w
  3888  04EC  00F9               	movwf	Set_DS1307_RTC_Time@Hours
  3889  04ED  082F               	movf	displayState2@m,w
  3890  04EE  00A9               	movwf	??_displayState2+1
  3891  04EF  0829               	movf	??_displayState2+1,w
  3892  04F0  00FA               	movwf	Set_DS1307_RTC_Time@Mins
  3893  04F1  082B               	movf	displayState2@s,w
  3894  04F2  00AA               	movwf	??_displayState2+2
  3895  04F3  082A               	movf	??_displayState2+2,w
  3896  04F4  00FB               	movwf	Set_DS1307_RTC_Time@Secs
  3897  04F5  3001               	movlw	1
  3898  04F6  120A  158A  2298  120A  118A  	fcall	_Set_DS1307_RTC_Time
  3899  04FB  2BD6               	goto	l123
  3900  04FC                     __end_of_displayState2:	
  3901                           
  3902                           	psect	text6
  3903  0A98                     __ptext6:	
  3904 ;; *************** function _Set_DS1307_RTC_Time *****************
  3905 ;; Defined at:
  3906 ;;		line 126 in file "DS1307.c"
  3907 ;; Parameters:    Size  Location     Type
  3908 ;;  Mode            1    wreg     unsigned char 
  3909 ;;  Hours           1    9[COMMON] unsigned char 
  3910 ;;  Mins            1   10[COMMON] unsigned char 
  3911 ;;  Secs            1   11[COMMON] unsigned char 
  3912 ;; Auto vars:     Size  Location     Type
  3913 ;;  Mode            1   12[COMMON] unsigned char 
  3914 ;; Return value:  Size  Location     Type
  3915 ;;		None               void
  3916 ;; Registers used:
  3917 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3918 ;; Tracked objects:
  3919 ;;		On entry : 0/0
  3920 ;;		On exit  : 0/0
  3921 ;;		Unchanged: 0/0
  3922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3923 ;;      Params:         3       0       0       0       0
  3924 ;;      Locals:         1       0       0       0       0
  3925 ;;      Temps:          0       8       0       0       0
  3926 ;;      Totals:         4       8       0       0       0
  3927 ;;Total ram usage:       12 bytes
  3928 ;; Hardware stack levels used:    1
  3929 ;; Hardware stack levels required when called:    2
  3930 ;; This function calls:
  3931 ;;		_Write_Bytes_To_DS1307_RTC
  3932 ;;		___awdiv
  3933 ;;		___awmod
  3934 ;; This function is called by:
  3935 ;;		_main
  3936 ;;		_displayState2
  3937 ;; This function uses a non-reentrant model
  3938 ;;
  3939                           
  3940                           
  3941                           ;psect for function _Set_DS1307_RTC_Time
  3942  0A98                     _Set_DS1307_RTC_Time:	
  3943                           
  3944                           ;incstack = 0
  3945                           ; Regs used in _Set_DS1307_RTC_Time: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3946                           ;Set_DS1307_RTC_Time@Mode stored from wreg
  3947  0A98  00FC               	movwf	Set_DS1307_RTC_Time@Mode
  3948                           
  3949                           ;DS1307.c: 128: pRTCArray[0] = (((unsigned char) (Secs / 10)) << 4) | ((unsigned char) (
      +                          Secs % 10));
  3950  0A99  300A               	movlw	10
  3951  0A9A  00F0               	movwf	___awmod@divisor
  3952  0A9B  3000               	movlw	0
  3953  0A9C  00F1               	movwf	___awmod@divisor+1
  3954  0A9D  087B               	movf	Set_DS1307_RTC_Time@Secs,w
  3955  0A9E  1283               	bcf	3,5	;RP0=0, select bank0
  3956  0A9F  1303               	bcf	3,6	;RP1=0, select bank0
  3957  0AA0  00A0               	movwf	??_Set_DS1307_RTC_Time
  3958  0AA1  01A1               	clrf	??_Set_DS1307_RTC_Time+1
  3959  0AA2  0820               	movf	??_Set_DS1307_RTC_Time,w
  3960  0AA3  00F2               	movwf	___awmod@dividend
  3961  0AA4  0821               	movf	??_Set_DS1307_RTC_Time+1,w
  3962  0AA5  00F3               	movwf	___awmod@dividend+1
  3963  0AA6  160A  118A  2697  120A  158A  	fcall	___awmod
  3964  0AAB  0870               	movf	?___awmod,w
  3965  0AAC  1283               	bcf	3,5	;RP0=0, select bank0
  3966  0AAD  1303               	bcf	3,6	;RP1=0, select bank0
  3967  0AAE  00A2               	movwf	??_Set_DS1307_RTC_Time+2
  3968  0AAF  0871               	movf	?___awmod+1,w
  3969  0AB0  00A3               	movwf	??_Set_DS1307_RTC_Time+3
  3970  0AB1  300A               	movlw	10
  3971  0AB2  00F0               	movwf	___awdiv@divisor
  3972  0AB3  3000               	movlw	0
  3973  0AB4  00F1               	movwf	___awdiv@divisor+1
  3974  0AB5  087B               	movf	Set_DS1307_RTC_Time@Secs,w
  3975  0AB6  00A4               	movwf	??_Set_DS1307_RTC_Time+4
  3976  0AB7  01A5               	clrf	??_Set_DS1307_RTC_Time+5
  3977  0AB8  0824               	movf	??_Set_DS1307_RTC_Time+4,w
  3978  0AB9  00F2               	movwf	___awdiv@dividend
  3979  0ABA  0825               	movf	??_Set_DS1307_RTC_Time+5,w
  3980  0ABB  00F3               	movwf	___awdiv@dividend+1
  3981  0ABC  160A  118A  26E2  120A  158A  	fcall	___awdiv
  3982  0AC1  0870               	movf	?___awdiv,w
  3983  0AC2  1283               	bcf	3,5	;RP0=0, select bank0
  3984  0AC3  1303               	bcf	3,6	;RP1=0, select bank0
  3985  0AC4  00A6               	movwf	??_Set_DS1307_RTC_Time+6
  3986  0AC5  3003               	movlw	3
  3987  0AC6                     u2145:	
  3988  0AC6  1003               	clrc
  3989  0AC7  0DA6               	rlf	??_Set_DS1307_RTC_Time+6,f
  3990  0AC8  3EFF               	addlw	-1
  3991  0AC9  1D03               	skipz
  3992  0ACA  2AC6               	goto	u2145
  3993  0ACB  1003               	clrc
  3994  0ACC  0D26               	rlf	??_Set_DS1307_RTC_Time+6,w
  3995  0ACD  0422               	iorwf	??_Set_DS1307_RTC_Time+2,w
  3996  0ACE  00A7               	movwf	??_Set_DS1307_RTC_Time+7
  3997  0ACF  0827               	movf	??_Set_DS1307_RTC_Time+7,w
  3998  0AD0  00D0               	movwf	_pRTCArray
  3999                           
  4000                           ;DS1307.c: 129: pRTCArray[1] = (((unsigned char) (Mins / 10)) << 4) | ((unsigned char) (
      +                          Mins % 10));
  4001  0AD1  300A               	movlw	10
  4002  0AD2  00F0               	movwf	___awmod@divisor
  4003  0AD3  3000               	movlw	0
  4004  0AD4  00F1               	movwf	___awmod@divisor+1
  4005  0AD5  087A               	movf	Set_DS1307_RTC_Time@Mins,w
  4006  0AD6  00A0               	movwf	??_Set_DS1307_RTC_Time
  4007  0AD7  01A1               	clrf	??_Set_DS1307_RTC_Time+1
  4008  0AD8  0820               	movf	??_Set_DS1307_RTC_Time,w
  4009  0AD9  00F2               	movwf	___awmod@dividend
  4010  0ADA  0821               	movf	??_Set_DS1307_RTC_Time+1,w
  4011  0ADB  00F3               	movwf	___awmod@dividend+1
  4012  0ADC  160A  118A  2697  120A  158A  	fcall	___awmod
  4013  0AE1  0870               	movf	?___awmod,w
  4014  0AE2  1283               	bcf	3,5	;RP0=0, select bank0
  4015  0AE3  1303               	bcf	3,6	;RP1=0, select bank0
  4016  0AE4  00A2               	movwf	??_Set_DS1307_RTC_Time+2
  4017  0AE5  0871               	movf	?___awmod+1,w
  4018  0AE6  00A3               	movwf	??_Set_DS1307_RTC_Time+3
  4019  0AE7  300A               	movlw	10
  4020  0AE8  00F0               	movwf	___awdiv@divisor
  4021  0AE9  3000               	movlw	0
  4022  0AEA  00F1               	movwf	___awdiv@divisor+1
  4023  0AEB  087A               	movf	Set_DS1307_RTC_Time@Mins,w
  4024  0AEC  00A4               	movwf	??_Set_DS1307_RTC_Time+4
  4025  0AED  01A5               	clrf	??_Set_DS1307_RTC_Time+5
  4026  0AEE  0824               	movf	??_Set_DS1307_RTC_Time+4,w
  4027  0AEF  00F2               	movwf	___awdiv@dividend
  4028  0AF0  0825               	movf	??_Set_DS1307_RTC_Time+5,w
  4029  0AF1  00F3               	movwf	___awdiv@dividend+1
  4030  0AF2  160A  118A  26E2  120A  158A  	fcall	___awdiv
  4031  0AF7  0870               	movf	?___awdiv,w
  4032  0AF8  1283               	bcf	3,5	;RP0=0, select bank0
  4033  0AF9  1303               	bcf	3,6	;RP1=0, select bank0
  4034  0AFA  00A6               	movwf	??_Set_DS1307_RTC_Time+6
  4035  0AFB  3003               	movlw	3
  4036  0AFC                     u2155:	
  4037  0AFC  1003               	clrc
  4038  0AFD  0DA6               	rlf	??_Set_DS1307_RTC_Time+6,f
  4039  0AFE  3EFF               	addlw	-1
  4040  0AFF  1D03               	skipz
  4041  0B00  2AFC               	goto	u2155
  4042  0B01  1003               	clrc
  4043  0B02  0D26               	rlf	??_Set_DS1307_RTC_Time+6,w
  4044  0B03  0422               	iorwf	??_Set_DS1307_RTC_Time+2,w
  4045  0B04  00A7               	movwf	??_Set_DS1307_RTC_Time+7
  4046  0B05  0827               	movf	??_Set_DS1307_RTC_Time+7,w
  4047  0B06  00D1               	movwf	_pRTCArray+1
  4048                           
  4049                           ;DS1307.c: 130: pRTCArray[2] = (((unsigned char) (Hours / 10)) << 4) | ((unsigned char) 
      +                          (Hours % 10));
  4050  0B07  300A               	movlw	10
  4051  0B08  00F0               	movwf	___awmod@divisor
  4052  0B09  3000               	movlw	0
  4053  0B0A  00F1               	movwf	___awmod@divisor+1
  4054  0B0B  0879               	movf	Set_DS1307_RTC_Time@Hours,w
  4055  0B0C  00A0               	movwf	??_Set_DS1307_RTC_Time
  4056  0B0D  01A1               	clrf	??_Set_DS1307_RTC_Time+1
  4057  0B0E  0820               	movf	??_Set_DS1307_RTC_Time,w
  4058  0B0F  00F2               	movwf	___awmod@dividend
  4059  0B10  0821               	movf	??_Set_DS1307_RTC_Time+1,w
  4060  0B11  00F3               	movwf	___awmod@dividend+1
  4061  0B12  160A  118A  2697  120A  158A  	fcall	___awmod
  4062  0B17  0870               	movf	?___awmod,w
  4063  0B18  1283               	bcf	3,5	;RP0=0, select bank0
  4064  0B19  1303               	bcf	3,6	;RP1=0, select bank0
  4065  0B1A  00A2               	movwf	??_Set_DS1307_RTC_Time+2
  4066  0B1B  0871               	movf	?___awmod+1,w
  4067  0B1C  00A3               	movwf	??_Set_DS1307_RTC_Time+3
  4068  0B1D  300A               	movlw	10
  4069  0B1E  00F0               	movwf	___awdiv@divisor
  4070  0B1F  3000               	movlw	0
  4071  0B20  00F1               	movwf	___awdiv@divisor+1
  4072  0B21  0879               	movf	Set_DS1307_RTC_Time@Hours,w
  4073  0B22  00A4               	movwf	??_Set_DS1307_RTC_Time+4
  4074  0B23  01A5               	clrf	??_Set_DS1307_RTC_Time+5
  4075  0B24  0824               	movf	??_Set_DS1307_RTC_Time+4,w
  4076  0B25  00F2               	movwf	___awdiv@dividend
  4077  0B26  0825               	movf	??_Set_DS1307_RTC_Time+5,w
  4078  0B27  00F3               	movwf	___awdiv@dividend+1
  4079  0B28  160A  118A  26E2  120A  158A  	fcall	___awdiv
  4080  0B2D  0870               	movf	?___awdiv,w
  4081  0B2E  1283               	bcf	3,5	;RP0=0, select bank0
  4082  0B2F  1303               	bcf	3,6	;RP1=0, select bank0
  4083  0B30  00A6               	movwf	??_Set_DS1307_RTC_Time+6
  4084  0B31  3003               	movlw	3
  4085  0B32                     u2165:	
  4086  0B32  1003               	clrc
  4087  0B33  0DA6               	rlf	??_Set_DS1307_RTC_Time+6,f
  4088  0B34  3EFF               	addlw	-1
  4089  0B35  1D03               	skipz
  4090  0B36  2B32               	goto	u2165
  4091  0B37  1003               	clrc
  4092  0B38  0D26               	rlf	??_Set_DS1307_RTC_Time+6,w
  4093  0B39  0422               	iorwf	??_Set_DS1307_RTC_Time+2,w
  4094  0B3A  00A7               	movwf	??_Set_DS1307_RTC_Time+7
  4095  0B3B  0827               	movf	??_Set_DS1307_RTC_Time+7,w
  4096  0B3C  00D2               	movwf	_pRTCArray+2
  4097                           
  4098                           ;DS1307.c: 132: switch (Mode)
  4099  0B3D  2B45               	goto	l2456
  4100  0B3E                     l268:	
  4101                           ;DS1307.c: 133: {
  4102                           ;DS1307.c: 134: case 0: pRTCArray[2] |= 0x40;
  4103                           
  4104  0B3E  1752               	bsf	_pRTCArray+2,6
  4105                           
  4106                           ;DS1307.c: 135: break;
  4107  0B3F  2B4D               	goto	l2458
  4108  0B40                     l2452:	
  4109                           ;DS1307.c: 136: case 1: pRTCArray[2] |= 0x60;
  4110                           
  4111  0B40  3060               	movlw	96
  4112  0B41  00A0               	movwf	??_Set_DS1307_RTC_Time
  4113  0B42  0820               	movf	??_Set_DS1307_RTC_Time,w
  4114  0B43  04D2               	iorwf	_pRTCArray+2,f
  4115                           
  4116                           ;DS1307.c: 140: }
  4117                           
  4118                           ;DS1307.c: 139: default: break;
  4119                           
  4120                           ;DS1307.c: 137: break;
  4121  0B44  2B4D               	goto	l2458
  4122  0B45                     l2456:	
  4123  0B45  087C               	movf	Set_DS1307_RTC_Time@Mode,w
  4124                           
  4125                           ; Switch size 1, requested type "space"
  4126                           ; Number of cases is 2, Range of values is 0 to 1
  4127                           ; switch strategies available:
  4128                           ; Name         Instructions Cycles
  4129                           ; simple_byte            7     4 (average)
  4130                           ; direct_byte           14     8 (fixed)
  4131                           ; jumptable            260     6 (fixed)
  4132                           ;	Chosen strategy is simple_byte
  4133  0B46  3A00               	xorlw	0	; case 0
  4134  0B47  1903               	skipnz
  4135  0B48  2B3E               	goto	l268
  4136  0B49  3A01               	xorlw	1	; case 1
  4137  0B4A  1903               	skipnz
  4138  0B4B  2B40               	goto	l2452
  4139  0B4C  2B4D               	goto	l2458
  4140  0B4D                     l2458:	
  4141                           
  4142                           ;DS1307.c: 143: Write_Bytes_To_DS1307_RTC(0x00, pRTCArray, 3);
  4143  0B4D  3050               	movlw	(low (_pRTCArray| 0))& (0+255)
  4144  0B4E  00A0               	movwf	??_Set_DS1307_RTC_Time
  4145  0B4F  0820               	movf	??_Set_DS1307_RTC_Time,w
  4146  0B50  00F1               	movwf	Write_Bytes_To_DS1307_RTC@pData
  4147  0B51  3003               	movlw	3
  4148  0B52  00A1               	movwf	??_Set_DS1307_RTC_Time+1
  4149  0B53  0821               	movf	??_Set_DS1307_RTC_Time+1,w
  4150  0B54  00F2               	movwf	Write_Bytes_To_DS1307_RTC@NoOfBytes
  4151  0B55  3000               	movlw	0
  4152  0B56  160A  118A  2623   	fcall	_Write_Bytes_To_DS1307_RTC
  4153  0B59  0008               	return
  4154  0B5A                     __end_of_Set_DS1307_RTC_Time:	
  4155                           
  4156                           	psect	text7
  4157  1623                     __ptext7:	
  4158 ;; *************** function _Write_Bytes_To_DS1307_RTC *****************
  4159 ;; Defined at:
  4160 ;;		line 62 in file "DS1307.c"
  4161 ;; Parameters:    Size  Location     Type
  4162 ;;  Address         1    wreg     unsigned char 
  4163 ;;  pData           1    1[COMMON] PTR unsigned char 
  4164 ;;		 -> pRTCArray(4), 
  4165 ;;  NoOfBytes       1    2[COMMON] unsigned char 
  4166 ;; Auto vars:     Size  Location     Type
  4167 ;;  Address         1    5[COMMON] unsigned char 
  4168 ;;  i               2    6[COMMON] unsigned int 
  4169 ;; Return value:  Size  Location     Type
  4170 ;;		None               void
  4171 ;; Registers used:
  4172 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4173 ;; Tracked objects:
  4174 ;;		On entry : 0/0
  4175 ;;		On exit  : 0/0
  4176 ;;		Unchanged: 0/0
  4177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4178 ;;      Params:         2       0       0       0       0
  4179 ;;      Locals:         3       0       0       0       0
  4180 ;;      Temps:          2       0       0       0       0
  4181 ;;      Totals:         7       0       0       0       0
  4182 ;;Total ram usage:        7 bytes
  4183 ;; Hardware stack levels used:    1
  4184 ;; Hardware stack levels required when called:    1
  4185 ;; This function calls:
  4186 ;;		_I2C_Start
  4187 ;;		_I2C_Stop
  4188 ;;		_I2C_Write_Byte
  4189 ;; This function is called by:
  4190 ;;		_Set_DS1307_RTC_Time
  4191 ;;		_Set_DS1307_RTC_Date
  4192 ;; This function uses a non-reentrant model
  4193 ;;
  4194                           
  4195                           
  4196                           ;psect for function _Write_Bytes_To_DS1307_RTC
  4197  1623                     _Write_Bytes_To_DS1307_RTC:	
  4198                           
  4199                           ;incstack = 0
  4200                           ; Regs used in _Write_Bytes_To_DS1307_RTC: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4201                           ;Write_Bytes_To_DS1307_RTC@Address stored from wreg
  4202  1623  00F5               	movwf	Write_Bytes_To_DS1307_RTC@Address
  4203  1624                     L3:	
  4204                           
  4205                           ;DS1307.c: 63: unsigned int i;
  4206                           ;DS1307.c: 65: I2C_Start();
  4207  1624  160A  118A  24EF  160A  118A  	fcall	_I2C_Start
  4208                           
  4209                           ;DS1307.c: 68: while (I2C_Write_Byte(0xD0 + 0) == 1)
  4210  1629  30D0               	movlw	208
  4211  162A  160A  118A  253E  160A  118A  	fcall	_I2C_Write_Byte
  4212  162F  1803               	btfsc	3,0
  4213  1630  2E24               	goto	L3
  4214                           
  4215                           ;DS1307.c: 71: }
  4216                           ;DS1307.c: 73: I2C_Write_Byte(Address);
  4217                           
  4218                           ;DS1307.c: 69: {
  4219                           ;DS1307.c: 70: I2C_Start();
  4220  1631  0875               	movf	Write_Bytes_To_DS1307_RTC@Address,w
  4221  1632  160A  118A  253E  160A  118A  	fcall	_I2C_Write_Byte
  4222                           
  4223                           ;DS1307.c: 75: for (i = 0; i < NoOfBytes; i++)
  4224  1637  01F6               	clrf	Write_Bytes_To_DS1307_RTC@i
  4225  1638  01F7               	clrf	Write_Bytes_To_DS1307_RTC@i+1
  4226  1639                     l2292:	
  4227  1639  0872               	movf	Write_Bytes_To_DS1307_RTC@NoOfBytes,w
  4228  163A  00F3               	movwf	??_Write_Bytes_To_DS1307_RTC
  4229  163B  01F4               	clrf	??_Write_Bytes_To_DS1307_RTC+1
  4230  163C  0874               	movf	??_Write_Bytes_To_DS1307_RTC+1,w
  4231  163D  0277               	subwf	Write_Bytes_To_DS1307_RTC@i+1,w
  4232  163E  1D03               	skipz
  4233  163F  2E42               	goto	u1785
  4234  1640  0873               	movf	??_Write_Bytes_To_DS1307_RTC,w
  4235  1641  0276               	subwf	Write_Bytes_To_DS1307_RTC@i,w
  4236  1642                     u1785:	
  4237  1642  1803               	btfsc	3,0
  4238  1643  2E57               	goto	l2294
  4239                           
  4240                           ;DS1307.c: 76: I2C_Write_Byte(pData[i]);
  4241  1644  0876               	movf	Write_Bytes_To_DS1307_RTC@i,w
  4242  1645  0771               	addwf	Write_Bytes_To_DS1307_RTC@pData,w
  4243  1646  00F3               	movwf	??_Write_Bytes_To_DS1307_RTC
  4244  1647  0873               	movf	??_Write_Bytes_To_DS1307_RTC,w
  4245  1648  0084               	movwf	4
  4246  1649  1383               	bcf	3,7	;select IRP bank0
  4247  164A  0800               	movf	0,w
  4248  164B  160A  118A  253E  160A  118A  	fcall	_I2C_Write_Byte
  4249  1650  3001               	movlw	1
  4250  1651  07F6               	addwf	Write_Bytes_To_DS1307_RTC@i,f
  4251  1652  1803               	skipnc
  4252  1653  0AF7               	incf	Write_Bytes_To_DS1307_RTC@i+1,f
  4253  1654  3000               	movlw	0
  4254  1655  07F7               	addwf	Write_Bytes_To_DS1307_RTC@i+1,f
  4255  1656  2E39               	goto	l2292
  4256  1657                     l2294:	
  4257                           
  4258                           ;DS1307.c: 78: I2C_Stop();
  4259  1657  160A  118A  24F7   	fcall	_I2C_Stop
  4260  165A  0008               	return
  4261  165B                     __end_of_Write_Bytes_To_DS1307_RTC:	
  4262                           
  4263                           	psect	text8
  4264  152F                     __ptext8:	
  4265 ;; *************** function _ClearLCDScreen *****************
  4266 ;; Defined at:
  4267 ;;		line 87 in file "LCD.c"
  4268 ;; Parameters:    Size  Location     Type
  4269 ;;		None
  4270 ;; Auto vars:     Size  Location     Type
  4271 ;;		None
  4272 ;; Return value:  Size  Location     Type
  4273 ;;		None               void
  4274 ;; Registers used:
  4275 ;;		wreg, status,2, status,0, pclath, cstack
  4276 ;; Tracked objects:
  4277 ;;		On entry : 0/0
  4278 ;;		On exit  : 0/0
  4279 ;;		Unchanged: 0/0
  4280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4281 ;;      Params:         0       0       0       0       0
  4282 ;;      Locals:         0       0       0       0       0
  4283 ;;      Temps:          2       0       0       0       0
  4284 ;;      Totals:         2       0       0       0       0
  4285 ;;Total ram usage:        2 bytes
  4286 ;; Hardware stack levels used:    1
  4287 ;; Hardware stack levels required when called:    2
  4288 ;; This function calls:
  4289 ;;		_WriteCommandToLCD
  4290 ;; This function is called by:
  4291 ;;		_displayState2
  4292 ;;		_displayState3
  4293 ;;		_displayState4
  4294 ;;		_DisplayFirstTimeToLCD
  4295 ;; This function uses a non-reentrant model
  4296 ;;
  4297                           
  4298                           
  4299                           ;psect for function _ClearLCDScreen
  4300  152F                     _ClearLCDScreen:	
  4301                           
  4302                           ;LCD.c: 89: WriteCommandToLCD(0x01);
  4303                           
  4304                           ;incstack = 0
  4305                           ; Regs used in _ClearLCDScreen: [wreg+status,2+status,0+pclath+cstack]
  4306  152F  3001               	movlw	1
  4307  1530  160A  118A  25F9  160A  118A  	fcall	_WriteCommandToLCD
  4308                           
  4309                           ;LCD.c: 90: _delay((unsigned long)((2)*(10000000/4000.0)));
  4310  1535  3007               	movlw	7
  4311  1536  00F5               	movwf	??_ClearLCDScreen+1
  4312  1537  307D               	movlw	125
  4313  1538  00F4               	movwf	??_ClearLCDScreen
  4314  1539                     u3317:	
  4315  1539  0BF4               	decfsz	??_ClearLCDScreen,f
  4316  153A  2D39               	goto	u3317
  4317  153B  0BF5               	decfsz	??_ClearLCDScreen+1,f
  4318  153C  2D39               	goto	u3317
  4319  153D  0008               	return
  4320  153E                     __end_of_ClearLCDScreen:	
  4321                           
  4322                           	psect	text9
  4323  0DEE                     __ptext9:	
  4324 ;; *************** function _displayState1 *****************
  4325 ;; Defined at:
  4326 ;;		line 75 in file "main.c"
  4327 ;; Parameters:    Size  Location     Type
  4328 ;;		None
  4329 ;; Auto vars:     Size  Location     Type
  4330 ;;		None
  4331 ;; Return value:  Size  Location     Type
  4332 ;;		None               void
  4333 ;; Registers used:
  4334 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4335 ;; Tracked objects:
  4336 ;;		On entry : 0/0
  4337 ;;		On exit  : 0/0
  4338 ;;		Unchanged: 0/0
  4339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4340 ;;      Params:         0       0       0       0       0
  4341 ;;      Locals:         0       0       0       0       0
  4342 ;;      Temps:          0       3       0       0       0
  4343 ;;      Totals:         0       3       0       0       0
  4344 ;;Total ram usage:        3 bytes
  4345 ;; Hardware stack levels used:    1
  4346 ;; Hardware stack levels required when called:    4
  4347 ;; This function calls:
  4348 ;;		_ADCinit
  4349 ;;		_DisplayDateOnLCD
  4350 ;;		_DisplayTimeToLCD
  4351 ;;		_Get_DS1307_RTC_Date
  4352 ;;		_Get_DS1307_RTC_Time
  4353 ;;		_ReadADC
  4354 ;;		_WriteCommandToLCD
  4355 ;;		_WriteDataToLCD
  4356 ;;		_WriteStringToLCD
  4357 ;;		_WriteTempToLCD
  4358 ;;		___ftmul
  4359 ;;		___fttol
  4360 ;;		___lwdiv
  4361 ;;		___lwtoft
  4362 ;; This function is called by:
  4363 ;;		_main
  4364 ;; This function uses a non-reentrant model
  4365 ;;
  4366                           
  4367                           
  4368                           ;psect for function _displayState1
  4369  0DEE                     _displayState1:	
  4370  0DEE                     l106:	
  4371                           ;incstack = 0
  4372                           ; Regs used in _displayState1: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4373                           ;main.c: 76: while (1) {
  4374                           
  4375                           
  4376                           ;main.c: 78: DisplayTimeToLCD(Get_DS1307_RTC_Time());
  4377  0DEE  120A  158A  21FD  120A  158A  	fcall	_Get_DS1307_RTC_Time
  4378  0DF3  120A  118A  2034  120A  158A  	fcall	_DisplayTimeToLCD
  4379                           
  4380                           ;main.c: 79: ADCinit();
  4381  0DF8  160A  118A  259A  120A  158A  	fcall	_ADCinit
  4382                           
  4383                           ;main.c: 80: ADCvalue = ReadADC();
  4384  0DFD  160A  118A  255F  120A  158A  	fcall	_ReadADC
  4385  0E02  0871               	movf	?_ReadADC+1,w
  4386  0E03  1283               	bcf	3,5	;RP0=0, select bank0
  4387  0E04  1303               	bcf	3,6	;RP1=0, select bank0
  4388  0E05  00D5               	movwf	_ADCvalue+1
  4389  0E06  0870               	movf	?_ReadADC,w
  4390  0E07  00D4               	movwf	_ADCvalue
  4391                           
  4392                           ;main.c: 82: if (Get_DS1307_RTC_Time()[0] > 40) {
  4393  0E08  120A  158A  21FD  120A  158A  	fcall	_Get_DS1307_RTC_Time
  4394  0E0D  0084               	movwf	4
  4395  0E0E  3029               	movlw	41
  4396  0E0F  1383               	bcf	3,7	;select IRP bank0
  4397  0E10  0200               	subwf	0,w
  4398  0E11  1C03               	skipc
  4399  0E12  2E23               	goto	l2818
  4400                           
  4401                           ;main.c: 83: WriteCommandToLCD(0xc0);
  4402  0E13  30C0               	movlw	192
  4403  0E14  160A  118A  25F9  120A  158A  	fcall	_WriteCommandToLCD
  4404                           
  4405                           ;main.c: 84: DisplayDateOnLCD(Get_DS1307_RTC_Date());
  4406  0E19  120A  158A  2007  120A  158A  	fcall	_Get_DS1307_RTC_Date
  4407  0E1E  120A  158A  26EB  120A  158A  	fcall	_DisplayDateOnLCD
  4408  0E23                     l2818:	
  4409                           
  4410                           ;main.c: 85: }
  4411                           ;main.c: 87: if (Get_DS1307_RTC_Time()[0] < 40) {
  4412  0E23  120A  158A  21FD  120A  158A  	fcall	_Get_DS1307_RTC_Time
  4413  0E28  0084               	movwf	4
  4414  0E29  3028               	movlw	40
  4415  0E2A  1383               	bcf	3,7	;select IRP bank0
  4416  0E2B  0200               	subwf	0,w
  4417  0E2C  1803               	skipnc
  4418  0E2D  2EA1               	goto	l2830
  4419                           
  4420                           ;main.c: 89: voltage = (int) (5000.0f / 1023 * ADCvalue);
  4421  0E2E  1283               	bcf	3,5	;RP0=0, select bank0
  4422  0E2F  1303               	bcf	3,6	;RP1=0, select bank0
  4423  0E30  0855               	movf	_ADCvalue+1,w
  4424  0E31  00F9               	movwf	___lwtoft@c+1
  4425  0E32  0854               	movf	_ADCvalue,w
  4426  0E33  00F8               	movwf	___lwtoft@c
  4427  0E34  160A  118A  2571  120A  158A  	fcall	___lwtoft
  4428  0E39  0878               	movf	?___lwtoft,w
  4429  0E3A  1283               	bcf	3,5	;RP0=0, select bank0
  4430  0E3B  1303               	bcf	3,6	;RP1=0, select bank0
  4431  0E3C  00A3               	movwf	___ftmul@f2
  4432  0E3D  0879               	movf	?___lwtoft+1,w
  4433  0E3E  00A4               	movwf	___ftmul@f2+1
  4434  0E3F  087A               	movf	?___lwtoft+2,w
  4435  0E40  00A5               	movwf	___ftmul@f2+2
  4436  0E41  3067               	movlw	103
  4437  0E42  00A0               	movwf	___ftmul@f1
  4438  0E43  309C               	movlw	156
  4439  0E44  00A1               	movwf	___ftmul@f1+1
  4440  0E45  3040               	movlw	64
  4441  0E46  00A2               	movwf	___ftmul@f1+2
  4442  0E47  120A  158A  235A  120A  158A  	fcall	___ftmul
  4443  0E4C  1283               	bcf	3,5	;RP0=0, select bank0
  4444  0E4D  1303               	bcf	3,6	;RP1=0, select bank0
  4445  0E4E  0820               	movf	?___ftmul,w
  4446  0E4F  00B0               	movwf	___fttol@f1
  4447  0E50  0821               	movf	?___ftmul+1,w
  4448  0E51  00B1               	movwf	___fttol@f1+1
  4449  0E52  0822               	movf	?___ftmul+2,w
  4450  0E53  00B2               	movwf	___fttol@f1+2
  4451  0E54  120A  158A  216F  120A  158A  	fcall	___fttol
  4452  0E59  1283               	bcf	3,5	;RP0=0, select bank0
  4453  0E5A  1303               	bcf	3,6	;RP1=0, select bank0
  4454  0E5B  0831               	movf	?___fttol+1,w
  4455  0E5C  00CF               	movwf	_voltage+1
  4456  0E5D  0830               	movf	?___fttol,w
  4457  0E5E  00CE               	movwf	_voltage
  4458                           
  4459                           ;main.c: 90: f = voltage / 10;
  4460  0E5F  300A               	movlw	10
  4461  0E60  00F0               	movwf	___lwdiv@divisor
  4462  0E61  3000               	movlw	0
  4463  0E62  00F1               	movwf	___lwdiv@divisor+1
  4464  0E63  084F               	movf	_voltage+1,w
  4465  0E64  00F3               	movwf	___lwdiv@dividend+1
  4466  0E65  084E               	movf	_voltage,w
  4467  0E66  00F2               	movwf	___lwdiv@dividend
  4468  0E67  160A  118A  265B  120A  158A  	fcall	___lwdiv
  4469  0E6C  0871               	movf	?___lwdiv+1,w
  4470  0E6D  1283               	bcf	3,5	;RP0=0, select bank0
  4471  0E6E  1303               	bcf	3,6	;RP1=0, select bank0
  4472  0E6F  00C5               	movwf	_f+1
  4473  0E70  0870               	movf	?___lwdiv,w
  4474  0E71  00C4               	movwf	_f
  4475                           
  4476                           ;main.c: 91: WriteCommandToLCD(0xc0);
  4477  0E72  30C0               	movlw	192
  4478  0E73  160A  118A  25F9  120A  158A  	fcall	_WriteCommandToLCD
  4479                           
  4480                           ;main.c: 92: WriteStringToLCD("TEMP: ");
  4481  0E78  30DE               	movlw	low (STR_1| (0+32768))
  4482  0E79  00F4               	movwf	WriteStringToLCD@s
  4483  0E7A  3090               	movlw	high (STR_1| (0+32768))
  4484  0E7B  00F5               	movwf	WriteStringToLCD@s+1
  4485  0E7C  160A  118A  25AF  120A  158A  	fcall	_WriteStringToLCD
  4486                           
  4487                           ;main.c: 93: WriteTempToLCD(f);
  4488  0E81  1283               	bcf	3,5	;RP0=0, select bank0
  4489  0E82  1303               	bcf	3,6	;RP1=0, select bank0
  4490  0E83  0845               	movf	_f+1,w
  4491  0E84  00FA               	movwf	WriteTempToLCD@Temp+1
  4492  0E85  0844               	movf	_f,w
  4493  0E86  00F9               	movwf	WriteTempToLCD@Temp
  4494  0E87  160A  118A  25D2  120A  158A  	fcall	_WriteTempToLCD
  4495                           
  4496                           ;main.c: 94: WriteCommandToLCD(0xc8);
  4497  0E8C  30C8               	movlw	200
  4498  0E8D  160A  118A  25F9  120A  158A  	fcall	_WriteCommandToLCD
  4499                           
  4500                           ;main.c: 95: WriteDataToLCD(0xdf);
  4501  0E92  30DF               	movlw	223
  4502  0E93  120A  118A  200A  120A  158A  	fcall	_WriteDataToLCD
  4503                           
  4504                           ;main.c: 96: WriteStringToLCD("C");
  4505  0E98  300D               	movlw	low (STR_2| (0+32768))
  4506  0E99  00F4               	movwf	WriteStringToLCD@s
  4507  0E9A  3091               	movlw	high (STR_2| (0+32768))
  4508  0E9B  00F5               	movwf	WriteStringToLCD@s+1
  4509  0E9C  160A  118A  25AF  120A  158A  	fcall	_WriteStringToLCD
  4510  0EA1                     l2830:	
  4511                           
  4512                           ;main.c: 97: }
  4513                           ;main.c: 100: if (!RA1) {
  4514  0EA1  1283               	bcf	3,5	;RP0=0, select bank0
  4515  0EA2  1303               	bcf	3,6	;RP1=0, select bank0
  4516  0EA3  1885               	btfsc	5,1	;volatile
  4517  0EA4  2EB5               	goto	l2838
  4518                           
  4519                           ;main.c: 101: state++;
  4520  0EA5  3001               	movlw	1
  4521  0EA6  07D6               	addwf	_state,f
  4522  0EA7  1803               	skipnc
  4523  0EA8  0AD7               	incf	_state+1,f
  4524  0EA9  3000               	movlw	0
  4525  0EAA  07D7               	addwf	_state+1,f
  4526                           
  4527                           ;main.c: 102: if (state == 5) {
  4528  0EAB  3005               	movlw	5
  4529  0EAC  0656               	xorwf	_state,w
  4530  0EAD  0457               	iorwf	_state+1,w
  4531  0EAE  1D03               	btfss	3,2
  4532  0EAF  0008               	return
  4533                           
  4534                           ;main.c: 103: state = 1;
  4535  0EB0  3001               	movlw	1
  4536  0EB1  00D6               	movwf	_state
  4537  0EB2  3000               	movlw	0
  4538  0EB3  00D7               	movwf	_state+1
  4539                           
  4540                           ;main.c: 104: }
  4541                           ;main.c: 105: break;
  4542  0EB4  0008               	return
  4543  0EB5                     l2838:	
  4544                           
  4545                           ;main.c: 106: }
  4546                           ;main.c: 108: if (h_alarm == (int) Get_DS1307_RTC_Time()[2] && m_alarm == (int) Get_DS13
      +                          07_RTC_Time()[1]) {
  4547  0EB5  120A  158A  21FD  120A  158A  	fcall	_Get_DS1307_RTC_Time
  4548  0EBA  1283               	bcf	3,5	;RP0=0, select bank0
  4549  0EBB  1303               	bcf	3,6	;RP1=0, select bank0
  4550  0EBC  00BE               	movwf	??_displayState1
  4551  0EBD  3002               	movlw	2
  4552  0EBE  073E               	addwf	??_displayState1,w
  4553  0EBF  0084               	movwf	4
  4554  0EC0  1383               	bcf	3,7	;select IRP bank0
  4555  0EC1  0800               	movf	0,w
  4556  0EC2  00BF               	movwf	??_displayState1+1
  4557  0EC3  01C0               	clrf	??_displayState1+2
  4558  0EC4  0847               	movf	_h_alarm+1,w
  4559  0EC5  0640               	xorwf	??_displayState1+2,w
  4560  0EC6  1D03               	skipz
  4561  0EC7  2ECA               	goto	u2715
  4562  0EC8  0846               	movf	_h_alarm,w
  4563  0EC9  063F               	xorwf	??_displayState1+1,w
  4564  0ECA                     u2715:	
  4565  0ECA  1D03               	skipz
  4566  0ECB  2EE3               	goto	l112
  4567  0ECC  120A  158A  21FD  120A  158A  	fcall	_Get_DS1307_RTC_Time
  4568  0ED1  1283               	bcf	3,5	;RP0=0, select bank0
  4569  0ED2  1303               	bcf	3,6	;RP1=0, select bank0
  4570  0ED3  00BE               	movwf	??_displayState1
  4571  0ED4  3001               	movlw	1
  4572  0ED5  073E               	addwf	??_displayState1,w
  4573  0ED6  0084               	movwf	4
  4574  0ED7  1383               	bcf	3,7	;select IRP bank0
  4575  0ED8  0800               	movf	0,w
  4576  0ED9  00BF               	movwf	??_displayState1+1
  4577  0EDA  01C0               	clrf	??_displayState1+2
  4578  0EDB  0849               	movf	_m_alarm+1,w
  4579  0EDC  0640               	xorwf	??_displayState1+2,w
  4580  0EDD  1D03               	skipz
  4581  0EDE  2EE1               	goto	u2725
  4582  0EDF  0848               	movf	_m_alarm,w
  4583  0EE0  063F               	xorwf	??_displayState1+1,w
  4584  0EE1                     u2725:	
  4585  0EE1  1903               	btfsc	3,2
  4586                           
  4587                           ;main.c: 109: RD0 = 0;
  4588  0EE2  1008               	bcf	8,0	;volatile
  4589  0EE3                     l112:	
  4590                           
  4591                           ;main.c: 110: }
  4592                           ;main.c: 112: if (!RA4) {
  4593  0EE3  1A05               	btfsc	5,4	;volatile
  4594  0EE4  2DEE               	goto	l106
  4595                           
  4596                           ;main.c: 113: RD0 = 1;
  4597  0EE5  1408               	bsf	8,0	;volatile
  4598                           
  4599                           ;main.c: 114: h_alarm = 0;
  4600  0EE6  01C6               	clrf	_h_alarm
  4601  0EE7  01C7               	clrf	_h_alarm+1
  4602                           
  4603                           ;main.c: 115: m_alarm = 0;
  4604  0EE8  01C8               	clrf	_m_alarm
  4605  0EE9  01C9               	clrf	_m_alarm+1
  4606  0EEA  2DEE               	goto	l106
  4607  0EEB                     __end_of_displayState1:	
  4608                           
  4609                           	psect	text10
  4610  1571                     __ptext10:	
  4611 ;; *************** function ___lwtoft *****************
  4612 ;; Defined at:
  4613 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwtoft.c"
  4614 ;; Parameters:    Size  Location     Type
  4615 ;;  c               2    8[COMMON] unsigned int 
  4616 ;; Auto vars:     Size  Location     Type
  4617 ;;		None
  4618 ;; Return value:  Size  Location     Type
  4619 ;;                  3    8[COMMON] float 
  4620 ;; Registers used:
  4621 ;;		wreg, status,2, status,0, pclath, cstack
  4622 ;; Tracked objects:
  4623 ;;		On entry : 0/0
  4624 ;;		On exit  : 0/0
  4625 ;;		Unchanged: 0/0
  4626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4627 ;;      Params:         3       0       0       0       0
  4628 ;;      Locals:         0       0       0       0       0
  4629 ;;      Temps:          1       0       0       0       0
  4630 ;;      Totals:         4       0       0       0       0
  4631 ;;Total ram usage:        4 bytes
  4632 ;; Hardware stack levels used:    1
  4633 ;; Hardware stack levels required when called:    1
  4634 ;; This function calls:
  4635 ;;		___ftpack
  4636 ;; This function is called by:
  4637 ;;		_displayState1
  4638 ;; This function uses a non-reentrant model
  4639 ;;
  4640                           
  4641                           
  4642                           ;psect for function ___lwtoft
  4643  1571                     ___lwtoft:	
  4644                           
  4645                           ;incstack = 0
  4646                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  4647  1571  0878               	movf	___lwtoft@c,w
  4648  1572  00F0               	movwf	___ftpack@arg
  4649  1573  0879               	movf	___lwtoft@c+1,w
  4650  1574  00F1               	movwf	___ftpack@arg+1
  4651  1575  01F2               	clrf	___ftpack@arg+2
  4652  1576  308E               	movlw	142
  4653  1577  00FB               	movwf	??___lwtoft
  4654  1578  087B               	movf	??___lwtoft,w
  4655  1579  00F3               	movwf	___ftpack@exp
  4656  157A  01F4               	clrf	___ftpack@sign
  4657  157B  160A  118A  2794   	fcall	___ftpack
  4658  157E  0870               	movf	?___ftpack,w
  4659  157F  00F8               	movwf	?___lwtoft
  4660  1580  0871               	movf	?___ftpack+1,w
  4661  1581  00F9               	movwf	?___lwtoft+1
  4662  1582  0872               	movf	?___ftpack+2,w
  4663  1583  00FA               	movwf	?___lwtoft+2
  4664  1584  0008               	return
  4665  1585                     __end_of___lwtoft:	
  4666                           
  4667                           	psect	text11
  4668  165B                     __ptext11:	
  4669 ;; *************** function ___lwdiv *****************
  4670 ;; Defined at:
  4671 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  4672 ;; Parameters:    Size  Location     Type
  4673 ;;  divisor         2    0[COMMON] unsigned int 
  4674 ;;  dividend        2    2[COMMON] unsigned int 
  4675 ;; Auto vars:     Size  Location     Type
  4676 ;;  quotient        2    5[COMMON] unsigned int 
  4677 ;;  counter         1    7[COMMON] unsigned char 
  4678 ;; Return value:  Size  Location     Type
  4679 ;;                  2    0[COMMON] unsigned int 
  4680 ;; Registers used:
  4681 ;;		wreg, status,2, status,0
  4682 ;; Tracked objects:
  4683 ;;		On entry : 0/0
  4684 ;;		On exit  : 0/0
  4685 ;;		Unchanged: 0/0
  4686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4687 ;;      Params:         4       0       0       0       0
  4688 ;;      Locals:         3       0       0       0       0
  4689 ;;      Temps:          1       0       0       0       0
  4690 ;;      Totals:         8       0       0       0       0
  4691 ;;Total ram usage:        8 bytes
  4692 ;; Hardware stack levels used:    1
  4693 ;; This function calls:
  4694 ;;		Nothing
  4695 ;; This function is called by:
  4696 ;;		_displayState1
  4697 ;; This function uses a non-reentrant model
  4698 ;;
  4699                           
  4700                           
  4701                           ;psect for function ___lwdiv
  4702  165B                     ___lwdiv:	
  4703                           
  4704                           ;incstack = 0
  4705                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  4706  165B  01F5               	clrf	___lwdiv@quotient
  4707  165C  01F6               	clrf	___lwdiv@quotient+1
  4708  165D  0870               	movf	___lwdiv@divisor,w
  4709  165E  0471               	iorwf	___lwdiv@divisor+1,w
  4710  165F  1903               	btfsc	3,2
  4711  1660  2E92               	goto	l2754
  4712  1661  01F7               	clrf	___lwdiv@counter
  4713  1662  0AF7               	incf	___lwdiv@counter,f
  4714  1663                     l2742:	
  4715  1663  1BF1               	btfsc	___lwdiv@divisor+1,7
  4716  1664  2E71               	goto	l2744
  4717  1665  3001               	movlw	1
  4718  1666                     u2615:	
  4719  1666  1003               	clrc
  4720  1667  0DF0               	rlf	___lwdiv@divisor,f
  4721  1668  0DF1               	rlf	___lwdiv@divisor+1,f
  4722  1669  3EFF               	addlw	-1
  4723  166A  1D03               	skipz
  4724  166B  2E66               	goto	u2615
  4725  166C  3001               	movlw	1
  4726  166D  00F4               	movwf	??___lwdiv
  4727  166E  0874               	movf	??___lwdiv,w
  4728  166F  07F7               	addwf	___lwdiv@counter,f
  4729  1670  2E63               	goto	l2742
  4730  1671                     l2744:	
  4731  1671  3001               	movlw	1
  4732  1672                     u2635:	
  4733  1672  1003               	clrc
  4734  1673  0DF5               	rlf	___lwdiv@quotient,f
  4735  1674  0DF6               	rlf	___lwdiv@quotient+1,f
  4736  1675  3EFF               	addlw	-1
  4737  1676  1D03               	skipz
  4738  1677  2E72               	goto	u2635
  4739  1678  0871               	movf	___lwdiv@divisor+1,w
  4740  1679  0273               	subwf	___lwdiv@dividend+1,w
  4741  167A  1D03               	skipz
  4742  167B  2E7E               	goto	u2645
  4743  167C  0870               	movf	___lwdiv@divisor,w
  4744  167D  0272               	subwf	___lwdiv@dividend,w
  4745  167E                     u2645:	
  4746  167E  1C03               	skipc
  4747  167F  2E87               	goto	l2750
  4748  1680  0870               	movf	___lwdiv@divisor,w
  4749  1681  02F2               	subwf	___lwdiv@dividend,f
  4750  1682  0871               	movf	___lwdiv@divisor+1,w
  4751  1683  1C03               	skipc
  4752  1684  03F3               	decf	___lwdiv@dividend+1,f
  4753  1685  02F3               	subwf	___lwdiv@dividend+1,f
  4754  1686  1475               	bsf	___lwdiv@quotient,0
  4755  1687                     l2750:	
  4756  1687  3001               	movlw	1
  4757  1688                     u2655:	
  4758  1688  1003               	clrc
  4759  1689  0CF1               	rrf	___lwdiv@divisor+1,f
  4760  168A  0CF0               	rrf	___lwdiv@divisor,f
  4761  168B  3EFF               	addlw	-1
  4762  168C  1D03               	skipz
  4763  168D  2E88               	goto	u2655
  4764  168E  3001               	movlw	1
  4765  168F  02F7               	subwf	___lwdiv@counter,f
  4766  1690  1D03               	btfss	3,2
  4767  1691  2E71               	goto	l2744
  4768  1692                     l2754:	
  4769  1692  0876               	movf	___lwdiv@quotient+1,w
  4770  1693  00F1               	movwf	?___lwdiv+1
  4771  1694  0875               	movf	___lwdiv@quotient,w
  4772  1695  00F0               	movwf	?___lwdiv
  4773  1696  0008               	return
  4774  1697                     __end_of___lwdiv:	
  4775                           
  4776                           	psect	text12
  4777  096F                     __ptext12:	
  4778 ;; *************** function ___fttol *****************
  4779 ;; Defined at:
  4780 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\fttol.c"
  4781 ;; Parameters:    Size  Location     Type
  4782 ;;  f1              3   16[BANK0 ] float 
  4783 ;; Auto vars:     Size  Location     Type
  4784 ;;  lval            4   25[BANK0 ] unsigned long 
  4785 ;;  exp1            1   29[BANK0 ] unsigned char 
  4786 ;;  sign1           1   24[BANK0 ] unsigned char 
  4787 ;; Return value:  Size  Location     Type
  4788 ;;                  4   16[BANK0 ] long 
  4789 ;; Registers used:
  4790 ;;		wreg, status,2, status,0
  4791 ;; Tracked objects:
  4792 ;;		On entry : 0/0
  4793 ;;		On exit  : 0/0
  4794 ;;		Unchanged: 0/0
  4795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4796 ;;      Params:         0       4       0       0       0
  4797 ;;      Locals:         0       6       0       0       0
  4798 ;;      Temps:          0       4       0       0       0
  4799 ;;      Totals:         0      14       0       0       0
  4800 ;;Total ram usage:       14 bytes
  4801 ;; Hardware stack levels used:    1
  4802 ;; This function calls:
  4803 ;;		Nothing
  4804 ;; This function is called by:
  4805 ;;		_displayState1
  4806 ;; This function uses a non-reentrant model
  4807 ;;
  4808                           
  4809                           
  4810                           ;psect for function ___fttol
  4811  096F                     ___fttol:	
  4812                           
  4813                           ;incstack = 0
  4814                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  4815  096F  1283               	bcf	3,5	;RP0=0, select bank0
  4816  0970  1303               	bcf	3,6	;RP1=0, select bank0
  4817  0971  0830               	movf	___fttol@f1,w
  4818  0972  00B4               	movwf	??___fttol
  4819  0973  0831               	movf	___fttol@f1+1,w
  4820  0974  00B5               	movwf	??___fttol+1
  4821  0975  0832               	movf	___fttol@f1+2,w
  4822  0976  00B6               	movwf	??___fttol+2
  4823  0977  1003               	clrc
  4824  0978  0D35               	rlf	??___fttol+1,w
  4825  0979  0D36               	rlf	??___fttol+2,w
  4826  097A  00B7               	movwf	??___fttol+3
  4827  097B  0837               	movf	??___fttol+3,w
  4828  097C  00BD               	movwf	___fttol@exp1
  4829  097D  083D               	movf	___fttol@exp1,w
  4830  097E  1D03               	btfss	3,2
  4831  097F  2989               	goto	l2696
  4832  0980  3000               	movlw	0
  4833  0981  00B3               	movwf	?___fttol+3
  4834  0982  3000               	movlw	0
  4835  0983  00B2               	movwf	?___fttol+2
  4836  0984  3000               	movlw	0
  4837  0985  00B1               	movwf	?___fttol+1
  4838  0986  3000               	movlw	0
  4839  0987  00B0               	movwf	?___fttol
  4840  0988  0008               	return
  4841  0989                     l2696:	
  4842  0989  0830               	movf	___fttol@f1,w
  4843  098A  00B4               	movwf	??___fttol
  4844  098B  0831               	movf	___fttol@f1+1,w
  4845  098C  00B5               	movwf	??___fttol+1
  4846  098D  0832               	movf	___fttol@f1+2,w
  4847  098E  00B6               	movwf	??___fttol+2
  4848  098F  3017               	movlw	23
  4849  0990                     u2515:	
  4850  0990  1003               	clrc
  4851  0991  0CB6               	rrf	??___fttol+2,f
  4852  0992  0CB5               	rrf	??___fttol+1,f
  4853  0993  0CB4               	rrf	??___fttol,f
  4854  0994  3EFF               	addlw	-1
  4855  0995  1D03               	skipz
  4856  0996  2990               	goto	u2515
  4857  0997  0834               	movf	??___fttol,w
  4858  0998  00B7               	movwf	??___fttol+3
  4859  0999  0837               	movf	??___fttol+3,w
  4860  099A  00B8               	movwf	___fttol@sign1
  4861  099B  17B1               	bsf	___fttol@f1+1,7
  4862  099C  30FF               	movlw	255
  4863  099D  05B0               	andwf	___fttol@f1,f
  4864  099E  30FF               	movlw	255
  4865  099F  05B1               	andwf	___fttol@f1+1,f
  4866  09A0  3000               	movlw	0
  4867  09A1  05B2               	andwf	___fttol@f1+2,f
  4868  09A2  0830               	movf	___fttol@f1,w
  4869  09A3  00B9               	movwf	___fttol@lval
  4870  09A4  0831               	movf	___fttol@f1+1,w
  4871  09A5  00BA               	movwf	___fttol@lval+1
  4872  09A6  0832               	movf	___fttol@f1+2,w
  4873  09A7  00BB               	movwf	___fttol@lval+2
  4874  09A8  01BC               	clrf	___fttol@lval+3
  4875  09A9  308E               	movlw	142
  4876  09AA  02BD               	subwf	___fttol@exp1,f
  4877  09AB  1FBD               	btfss	___fttol@exp1,7
  4878  09AC  29CB               	goto	l2716
  4879  09AD  083D               	movf	___fttol@exp1,w
  4880  09AE  3A80               	xorlw	128
  4881  09AF  3E8F               	addlw	143
  4882  09B0  1803               	skipnc
  4883  09B1  29BB               	goto	l2714
  4884  09B2  3000               	movlw	0
  4885  09B3  00B3               	movwf	?___fttol+3
  4886  09B4  3000               	movlw	0
  4887  09B5  00B2               	movwf	?___fttol+2
  4888  09B6  3000               	movlw	0
  4889  09B7  00B1               	movwf	?___fttol+1
  4890  09B8  3000               	movlw	0
  4891  09B9  00B0               	movwf	?___fttol
  4892  09BA  0008               	return
  4893  09BB                     l2714:	
  4894  09BB  3001               	movlw	1
  4895  09BC                     u2545:	
  4896  09BC  1003               	clrc
  4897  09BD  0CBC               	rrf	___fttol@lval+3,f
  4898  09BE  0CBB               	rrf	___fttol@lval+2,f
  4899  09BF  0CBA               	rrf	___fttol@lval+1,f
  4900  09C0  0CB9               	rrf	___fttol@lval,f
  4901  09C1  3EFF               	addlw	-1
  4902  09C2  1D03               	skipz
  4903  09C3  29BC               	goto	u2545
  4904  09C4  3001               	movlw	1
  4905  09C5  00B4               	movwf	??___fttol
  4906  09C6  0834               	movf	??___fttol,w
  4907  09C7  07BD               	addwf	___fttol@exp1,f
  4908  09C8  1903               	btfsc	3,2
  4909  09C9  29E6               	goto	l2724
  4910  09CA  29BB               	goto	l2714
  4911  09CB                     l2716:	
  4912  09CB  3018               	movlw	24
  4913  09CC  023D               	subwf	___fttol@exp1,w
  4914  09CD  1C03               	skipc
  4915  09CE  29E3               	goto	l780
  4916  09CF  3000               	movlw	0
  4917  09D0  00B3               	movwf	?___fttol+3
  4918  09D1  3000               	movlw	0
  4919  09D2  00B2               	movwf	?___fttol+2
  4920  09D3  3000               	movlw	0
  4921  09D4  00B1               	movwf	?___fttol+1
  4922  09D5  3000               	movlw	0
  4923  09D6  00B0               	movwf	?___fttol
  4924  09D7  0008               	return
  4925  09D8                     l2722:	
  4926  09D8  3001               	movlw	1
  4927  09D9  00B4               	movwf	??___fttol
  4928  09DA                     u2575:	
  4929  09DA  1003               	clrc
  4930  09DB  0DB9               	rlf	___fttol@lval,f
  4931  09DC  0DBA               	rlf	___fttol@lval+1,f
  4932  09DD  0DBB               	rlf	___fttol@lval+2,f
  4933  09DE  0DBC               	rlf	___fttol@lval+3,f
  4934  09DF  0BB4               	decfsz	??___fttol,f
  4935  09E0  29DA               	goto	u2575
  4936  09E1  3001               	movlw	1
  4937  09E2  02BD               	subwf	___fttol@exp1,f
  4938  09E3                     l780:	
  4939  09E3  083D               	movf	___fttol@exp1,w
  4940  09E4  1D03               	btfss	3,2
  4941  09E5  29D8               	goto	l2722
  4942  09E6                     l2724:	
  4943  09E6  0838               	movf	___fttol@sign1,w
  4944  09E7  1903               	btfsc	3,2
  4945  09E8  29F4               	goto	l2728
  4946  09E9  09B9               	comf	___fttol@lval,f
  4947  09EA  09BA               	comf	___fttol@lval+1,f
  4948  09EB  09BB               	comf	___fttol@lval+2,f
  4949  09EC  09BC               	comf	___fttol@lval+3,f
  4950  09ED  0AB9               	incf	___fttol@lval,f
  4951  09EE  1903               	skipnz
  4952  09EF  0ABA               	incf	___fttol@lval+1,f
  4953  09F0  1903               	skipnz
  4954  09F1  0ABB               	incf	___fttol@lval+2,f
  4955  09F2  1903               	skipnz
  4956  09F3  0ABC               	incf	___fttol@lval+3,f
  4957  09F4                     l2728:	
  4958  09F4  083C               	movf	___fttol@lval+3,w
  4959  09F5  00B3               	movwf	?___fttol+3
  4960  09F6  083B               	movf	___fttol@lval+2,w
  4961  09F7  00B2               	movwf	?___fttol+2
  4962  09F8  083A               	movf	___fttol@lval+1,w
  4963  09F9  00B1               	movwf	?___fttol+1
  4964  09FA  0839               	movf	___fttol@lval,w
  4965  09FB  00B0               	movwf	?___fttol
  4966  09FC  0008               	return
  4967  09FD                     __end_of___fttol:	
  4968                           
  4969                           	psect	text13
  4970  0B5A                     __ptext13:	
  4971 ;; *************** function ___ftmul *****************
  4972 ;; Defined at:
  4973 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftmul.c"
  4974 ;; Parameters:    Size  Location     Type
  4975 ;;  f1              3    0[BANK0 ] float 
  4976 ;;  f2              3    3[BANK0 ] float 
  4977 ;; Auto vars:     Size  Location     Type
  4978 ;;  f3_as_produc    3   11[BANK0 ] unsigned um
  4979 ;;  sign            1   15[BANK0 ] unsigned char 
  4980 ;;  cntr            1   14[BANK0 ] unsigned char 
  4981 ;;  exp             1   10[BANK0 ] unsigned char 
  4982 ;; Return value:  Size  Location     Type
  4983 ;;                  3    0[BANK0 ] float 
  4984 ;; Registers used:
  4985 ;;		wreg, status,2, status,0, pclath, cstack
  4986 ;; Tracked objects:
  4987 ;;		On entry : 0/0
  4988 ;;		On exit  : 0/0
  4989 ;;		Unchanged: 0/0
  4990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4991 ;;      Params:         0       6       0       0       0
  4992 ;;      Locals:         0       6       0       0       0
  4993 ;;      Temps:          0       4       0       0       0
  4994 ;;      Totals:         0      16       0       0       0
  4995 ;;Total ram usage:       16 bytes
  4996 ;; Hardware stack levels used:    1
  4997 ;; Hardware stack levels required when called:    1
  4998 ;; This function calls:
  4999 ;;		___ftpack
  5000 ;; This function is called by:
  5001 ;;		_displayState1
  5002 ;; This function uses a non-reentrant model
  5003 ;;
  5004                           
  5005                           
  5006                           ;psect for function ___ftmul
  5007  0B5A                     ___ftmul:	
  5008                           
  5009                           ;incstack = 0
  5010                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  5011  0B5A  1283               	bcf	3,5	;RP0=0, select bank0
  5012  0B5B  1303               	bcf	3,6	;RP1=0, select bank0
  5013  0B5C  0820               	movf	___ftmul@f1,w
  5014  0B5D  00A6               	movwf	??___ftmul
  5015  0B5E  0821               	movf	___ftmul@f1+1,w
  5016  0B5F  00A7               	movwf	??___ftmul+1
  5017  0B60  0822               	movf	___ftmul@f1+2,w
  5018  0B61  00A8               	movwf	??___ftmul+2
  5019  0B62  1003               	clrc
  5020  0B63  0D27               	rlf	??___ftmul+1,w
  5021  0B64  0D28               	rlf	??___ftmul+2,w
  5022  0B65  00A9               	movwf	??___ftmul+3
  5023  0B66  0829               	movf	??___ftmul+3,w
  5024  0B67  00AA               	movwf	___ftmul@exp
  5025  0B68  082A               	movf	___ftmul@exp,w
  5026  0B69  1D03               	btfss	3,2
  5027  0B6A  2B72               	goto	l2646
  5028  0B6B  3000               	movlw	0
  5029  0B6C  00A0               	movwf	?___ftmul
  5030  0B6D  3000               	movlw	0
  5031  0B6E  00A1               	movwf	?___ftmul+1
  5032  0B6F  3000               	movlw	0
  5033  0B70  00A2               	movwf	?___ftmul+2
  5034  0B71  0008               	return
  5035  0B72                     l2646:	
  5036  0B72  0823               	movf	___ftmul@f2,w
  5037  0B73  00A6               	movwf	??___ftmul
  5038  0B74  0824               	movf	___ftmul@f2+1,w
  5039  0B75  00A7               	movwf	??___ftmul+1
  5040  0B76  0825               	movf	___ftmul@f2+2,w
  5041  0B77  00A8               	movwf	??___ftmul+2
  5042  0B78  1003               	clrc
  5043  0B79  0D27               	rlf	??___ftmul+1,w
  5044  0B7A  0D28               	rlf	??___ftmul+2,w
  5045  0B7B  00A9               	movwf	??___ftmul+3
  5046  0B7C  0829               	movf	??___ftmul+3,w
  5047  0B7D  00AF               	movwf	___ftmul@sign
  5048  0B7E  082F               	movf	___ftmul@sign,w
  5049  0B7F  1D03               	btfss	3,2
  5050  0B80  2B88               	goto	l2652
  5051  0B81  3000               	movlw	0
  5052  0B82  00A0               	movwf	?___ftmul
  5053  0B83  3000               	movlw	0
  5054  0B84  00A1               	movwf	?___ftmul+1
  5055  0B85  3000               	movlw	0
  5056  0B86  00A2               	movwf	?___ftmul+2
  5057  0B87  0008               	return
  5058  0B88                     l2652:	
  5059  0B88  082F               	movf	___ftmul@sign,w
  5060  0B89  3E7B               	addlw	123
  5061  0B8A  00A6               	movwf	??___ftmul
  5062  0B8B  0826               	movf	??___ftmul,w
  5063  0B8C  07AA               	addwf	___ftmul@exp,f
  5064  0B8D  0820               	movf	___ftmul@f1,w
  5065  0B8E  00A6               	movwf	??___ftmul
  5066  0B8F  0821               	movf	___ftmul@f1+1,w
  5067  0B90  00A7               	movwf	??___ftmul+1
  5068  0B91  0822               	movf	___ftmul@f1+2,w
  5069  0B92  00A8               	movwf	??___ftmul+2
  5070  0B93  3010               	movlw	16
  5071  0B94                     u2385:	
  5072  0B94  1003               	clrc
  5073  0B95  0CA8               	rrf	??___ftmul+2,f
  5074  0B96  0CA7               	rrf	??___ftmul+1,f
  5075  0B97  0CA6               	rrf	??___ftmul,f
  5076  0B98  3EFF               	addlw	-1
  5077  0B99  1D03               	skipz
  5078  0B9A  2B94               	goto	u2385
  5079  0B9B  0826               	movf	??___ftmul,w
  5080  0B9C  00A9               	movwf	??___ftmul+3
  5081  0B9D  0829               	movf	??___ftmul+3,w
  5082  0B9E  00AF               	movwf	___ftmul@sign
  5083  0B9F  0823               	movf	___ftmul@f2,w
  5084  0BA0  00A6               	movwf	??___ftmul
  5085  0BA1  0824               	movf	___ftmul@f2+1,w
  5086  0BA2  00A7               	movwf	??___ftmul+1
  5087  0BA3  0825               	movf	___ftmul@f2+2,w
  5088  0BA4  00A8               	movwf	??___ftmul+2
  5089  0BA5  3010               	movlw	16
  5090  0BA6                     u2395:	
  5091  0BA6  1003               	clrc
  5092  0BA7  0CA8               	rrf	??___ftmul+2,f
  5093  0BA8  0CA7               	rrf	??___ftmul+1,f
  5094  0BA9  0CA6               	rrf	??___ftmul,f
  5095  0BAA  3EFF               	addlw	-1
  5096  0BAB  1D03               	skipz
  5097  0BAC  2BA6               	goto	u2395
  5098  0BAD  0826               	movf	??___ftmul,w
  5099  0BAE  00A9               	movwf	??___ftmul+3
  5100  0BAF  0829               	movf	??___ftmul+3,w
  5101  0BB0  06AF               	xorwf	___ftmul@sign,f
  5102  0BB1  3080               	movlw	128
  5103  0BB2  00A6               	movwf	??___ftmul
  5104  0BB3  0826               	movf	??___ftmul,w
  5105  0BB4  05AF               	andwf	___ftmul@sign,f
  5106  0BB5  17A1               	bsf	___ftmul@f1+1,7
  5107  0BB6  17A4               	bsf	___ftmul@f2+1,7
  5108  0BB7  30FF               	movlw	255
  5109  0BB8  05A3               	andwf	___ftmul@f2,f
  5110  0BB9  30FF               	movlw	255
  5111  0BBA  05A4               	andwf	___ftmul@f2+1,f
  5112  0BBB  3000               	movlw	0
  5113  0BBC  05A5               	andwf	___ftmul@f2+2,f
  5114  0BBD  3000               	movlw	0
  5115  0BBE  00AB               	movwf	___ftmul@f3_as_product
  5116  0BBF  3000               	movlw	0
  5117  0BC0  00AC               	movwf	___ftmul@f3_as_product+1
  5118  0BC1  3000               	movlw	0
  5119  0BC2  00AD               	movwf	___ftmul@f3_as_product+2
  5120  0BC3  3007               	movlw	7
  5121  0BC4  00A6               	movwf	??___ftmul
  5122  0BC5  0826               	movf	??___ftmul,w
  5123  0BC6  00AE               	movwf	___ftmul@cntr
  5124  0BC7                     l2664:	
  5125  0BC7  1C20               	btfss	___ftmul@f1,0
  5126  0BC8  2BD7               	goto	l2668
  5127  0BC9  0823               	movf	___ftmul@f2,w
  5128  0BCA  07AB               	addwf	___ftmul@f3_as_product,f
  5129  0BCB  0824               	movf	___ftmul@f2+1,w
  5130  0BCC  1103               	clrz
  5131  0BCD  1803               	skipnc
  5132  0BCE  0A24               	incf	___ftmul@f2+1,w
  5133  0BCF  1D03               	btfss	3,2
  5134  0BD0  07AC               	addwf	___ftmul@f3_as_product+1,f
  5135  0BD1  0825               	movf	___ftmul@f2+2,w
  5136  0BD2  1103               	clrz
  5137  0BD3  1803               	skipnc
  5138  0BD4  0A25               	incf	___ftmul@f2+2,w
  5139  0BD5  1D03               	btfss	3,2
  5140  0BD6  07AD               	addwf	___ftmul@f3_as_product+2,f
  5141  0BD7                     l2668:	
  5142  0BD7  3001               	movlw	1
  5143  0BD8                     u2425:	
  5144  0BD8  1003               	clrc
  5145  0BD9  0CA2               	rrf	___ftmul@f1+2,f
  5146  0BDA  0CA1               	rrf	___ftmul@f1+1,f
  5147  0BDB  0CA0               	rrf	___ftmul@f1,f
  5148  0BDC  3EFF               	addlw	-1
  5149  0BDD  1D03               	skipz
  5150  0BDE  2BD8               	goto	u2425
  5151  0BDF  3001               	movlw	1
  5152  0BE0                     u2435:	
  5153  0BE0  1003               	clrc
  5154  0BE1  0DA3               	rlf	___ftmul@f2,f
  5155  0BE2  0DA4               	rlf	___ftmul@f2+1,f
  5156  0BE3  0DA5               	rlf	___ftmul@f2+2,f
  5157  0BE4  3EFF               	addlw	-1
  5158  0BE5  1D03               	skipz
  5159  0BE6  2BE0               	goto	u2435
  5160  0BE7  3001               	movlw	1
  5161  0BE8  02AE               	subwf	___ftmul@cntr,f
  5162  0BE9  1D03               	btfss	3,2
  5163  0BEA  2BC7               	goto	l2664
  5164  0BEB  3009               	movlw	9
  5165  0BEC  00A6               	movwf	??___ftmul
  5166  0BED  0826               	movf	??___ftmul,w
  5167  0BEE  00AE               	movwf	___ftmul@cntr
  5168  0BEF                     l2676:	
  5169  0BEF  1C20               	btfss	___ftmul@f1,0
  5170  0BF0  2BFF               	goto	l2680
  5171  0BF1  0823               	movf	___ftmul@f2,w
  5172  0BF2  07AB               	addwf	___ftmul@f3_as_product,f
  5173  0BF3  0824               	movf	___ftmul@f2+1,w
  5174  0BF4  1103               	clrz
  5175  0BF5  1803               	skipnc
  5176  0BF6  0A24               	incf	___ftmul@f2+1,w
  5177  0BF7  1D03               	btfss	3,2
  5178  0BF8  07AC               	addwf	___ftmul@f3_as_product+1,f
  5179  0BF9  0825               	movf	___ftmul@f2+2,w
  5180  0BFA  1103               	clrz
  5181  0BFB  1803               	skipnc
  5182  0BFC  0A25               	incf	___ftmul@f2+2,w
  5183  0BFD  1D03               	btfss	3,2
  5184  0BFE  07AD               	addwf	___ftmul@f3_as_product+2,f
  5185  0BFF                     l2680:	
  5186  0BFF  3001               	movlw	1
  5187  0C00                     u2475:	
  5188  0C00  1003               	clrc
  5189  0C01  0CA2               	rrf	___ftmul@f1+2,f
  5190  0C02  0CA1               	rrf	___ftmul@f1+1,f
  5191  0C03  0CA0               	rrf	___ftmul@f1,f
  5192  0C04  3EFF               	addlw	-1
  5193  0C05  1D03               	skipz
  5194  0C06  2C00               	goto	u2475
  5195  0C07  3001               	movlw	1
  5196  0C08                     u2485:	
  5197  0C08  1003               	clrc
  5198  0C09  0CAD               	rrf	___ftmul@f3_as_product+2,f
  5199  0C0A  0CAC               	rrf	___ftmul@f3_as_product+1,f
  5200  0C0B  0CAB               	rrf	___ftmul@f3_as_product,f
  5201  0C0C  3EFF               	addlw	-1
  5202  0C0D  1D03               	skipz
  5203  0C0E  2C08               	goto	u2485
  5204  0C0F  3001               	movlw	1
  5205  0C10  02AE               	subwf	___ftmul@cntr,f
  5206  0C11  1D03               	btfss	3,2
  5207  0C12  2BEF               	goto	l2676
  5208  0C13  082B               	movf	___ftmul@f3_as_product,w
  5209  0C14  00F0               	movwf	___ftpack@arg
  5210  0C15  082C               	movf	___ftmul@f3_as_product+1,w
  5211  0C16  00F1               	movwf	___ftpack@arg+1
  5212  0C17  082D               	movf	___ftmul@f3_as_product+2,w
  5213  0C18  00F2               	movwf	___ftpack@arg+2
  5214  0C19  082A               	movf	___ftmul@exp,w
  5215  0C1A  00A6               	movwf	??___ftmul
  5216  0C1B  0826               	movf	??___ftmul,w
  5217  0C1C  00F3               	movwf	___ftpack@exp
  5218  0C1D  082F               	movf	___ftmul@sign,w
  5219  0C1E  00A7               	movwf	??___ftmul+1
  5220  0C1F  0827               	movf	??___ftmul+1,w
  5221  0C20  00F4               	movwf	___ftpack@sign
  5222  0C21  160A  118A  2794   	fcall	___ftpack
  5223  0C24  0870               	movf	?___ftpack,w
  5224  0C25  1283               	bcf	3,5	;RP0=0, select bank0
  5225  0C26  1303               	bcf	3,6	;RP1=0, select bank0
  5226  0C27  00A0               	movwf	?___ftmul
  5227  0C28  0871               	movf	?___ftpack+1,w
  5228  0C29  00A1               	movwf	?___ftmul+1
  5229  0C2A  0872               	movf	?___ftpack+2,w
  5230  0C2B  00A2               	movwf	?___ftmul+2
  5231  0C2C  0008               	return
  5232  0C2D                     __end_of___ftmul:	
  5233                           
  5234                           	psect	text14
  5235  1794                     __ptext14:	
  5236 ;; *************** function ___ftpack *****************
  5237 ;; Defined at:
  5238 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\float.c"
  5239 ;; Parameters:    Size  Location     Type
  5240 ;;  arg             3    0[COMMON] unsigned um
  5241 ;;  exp             1    3[COMMON] unsigned char 
  5242 ;;  sign            1    4[COMMON] unsigned char 
  5243 ;; Auto vars:     Size  Location     Type
  5244 ;;		None
  5245 ;; Return value:  Size  Location     Type
  5246 ;;                  3    0[COMMON] float 
  5247 ;; Registers used:
  5248 ;;		wreg, status,2, status,0
  5249 ;; Tracked objects:
  5250 ;;		On entry : 0/0
  5251 ;;		On exit  : 0/0
  5252 ;;		Unchanged: 0/0
  5253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5254 ;;      Params:         5       0       0       0       0
  5255 ;;      Locals:         0       0       0       0       0
  5256 ;;      Temps:          3       0       0       0       0
  5257 ;;      Totals:         8       0       0       0       0
  5258 ;;Total ram usage:        8 bytes
  5259 ;; Hardware stack levels used:    1
  5260 ;; This function calls:
  5261 ;;		Nothing
  5262 ;; This function is called by:
  5263 ;;		___ftmul
  5264 ;;		___lwtoft
  5265 ;; This function uses a non-reentrant model
  5266 ;;
  5267                           
  5268                           
  5269                           ;psect for function ___ftpack
  5270  1794                     ___ftpack:	
  5271                           
  5272                           ;incstack = 0
  5273                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  5274  1794  0873               	movf	___ftpack@exp,w
  5275  1795  1903               	btfsc	3,2
  5276  1796  2F9C               	goto	l2340
  5277  1797  0872               	movf	___ftpack@arg+2,w
  5278  1798  0471               	iorwf	___ftpack@arg+1,w
  5279  1799  0470               	iorwf	___ftpack@arg,w
  5280  179A  1D03               	skipz
  5281  179B  2FAF               	goto	l2346
  5282  179C                     l2340:	
  5283  179C  3000               	movlw	0
  5284  179D  00F0               	movwf	?___ftpack
  5285  179E  3000               	movlw	0
  5286  179F  00F1               	movwf	?___ftpack+1
  5287  17A0  3000               	movlw	0
  5288  17A1  00F2               	movwf	?___ftpack+2
  5289  17A2  0008               	return
  5290  17A3                     l2344:	
  5291  17A3  3001               	movlw	1
  5292  17A4  00F5               	movwf	??___ftpack
  5293  17A5  0875               	movf	??___ftpack,w
  5294  17A6  07F3               	addwf	___ftpack@exp,f
  5295  17A7  3001               	movlw	1
  5296  17A8                     u1855:	
  5297  17A8  1003               	clrc
  5298  17A9  0CF2               	rrf	___ftpack@arg+2,f
  5299  17AA  0CF1               	rrf	___ftpack@arg+1,f
  5300  17AB  0CF0               	rrf	___ftpack@arg,f
  5301  17AC  3EFF               	addlw	-1
  5302  17AD  1D03               	skipz
  5303  17AE  2FA8               	goto	u1855
  5304  17AF                     l2346:	
  5305  17AF  30FE               	movlw	254
  5306  17B0  0572               	andwf	___ftpack@arg+2,w
  5307  17B1  1903               	btfsc	3,2
  5308  17B2  2FCA               	goto	l689
  5309  17B3  2FA3               	goto	l2344
  5310  17B4                     l2348:	
  5311  17B4  3001               	movlw	1
  5312  17B5  00F5               	movwf	??___ftpack
  5313  17B6  0875               	movf	??___ftpack,w
  5314  17B7  07F3               	addwf	___ftpack@exp,f
  5315  17B8  3001               	movlw	1
  5316  17B9  07F0               	addwf	___ftpack@arg,f
  5317  17BA  3000               	movlw	0
  5318  17BB  1803               	skipnc
  5319  17BC  3001               	movlw	1
  5320  17BD  07F1               	addwf	___ftpack@arg+1,f
  5321  17BE  3000               	movlw	0
  5322  17BF  1803               	skipnc
  5323  17C0  3001               	movlw	1
  5324  17C1  07F2               	addwf	___ftpack@arg+2,f
  5325  17C2  3001               	movlw	1
  5326  17C3                     u1875:	
  5327  17C3  1003               	clrc
  5328  17C4  0CF2               	rrf	___ftpack@arg+2,f
  5329  17C5  0CF1               	rrf	___ftpack@arg+1,f
  5330  17C6  0CF0               	rrf	___ftpack@arg,f
  5331  17C7  3EFF               	addlw	-1
  5332  17C8  1D03               	skipz
  5333  17C9  2FC3               	goto	u1875
  5334  17CA                     l689:	
  5335  17CA  30FF               	movlw	255
  5336  17CB  0572               	andwf	___ftpack@arg+2,w
  5337  17CC  1903               	btfsc	3,2
  5338  17CD  2FD9               	goto	l2356
  5339  17CE  2FB4               	goto	l2348
  5340  17CF                     l2354:	
  5341  17CF  3001               	movlw	1
  5342  17D0  02F3               	subwf	___ftpack@exp,f
  5343  17D1  3001               	movlw	1
  5344  17D2                     u1895:	
  5345  17D2  1003               	clrc
  5346  17D3  0DF0               	rlf	___ftpack@arg,f
  5347  17D4  0DF1               	rlf	___ftpack@arg+1,f
  5348  17D5  0DF2               	rlf	___ftpack@arg+2,f
  5349  17D6  3EFF               	addlw	-1
  5350  17D7  1D03               	skipz
  5351  17D8  2FD2               	goto	u1895
  5352  17D9                     l2356:	
  5353  17D9  1BF1               	btfsc	___ftpack@arg+1,7
  5354  17DA  2FDF               	goto	l696
  5355  17DB  3002               	movlw	2
  5356  17DC  0273               	subwf	___ftpack@exp,w
  5357  17DD  1803               	skipnc
  5358  17DE  2FCF               	goto	l2354
  5359  17DF                     l696:	
  5360  17DF  1873               	btfsc	___ftpack@exp,0
  5361  17E0  2FE7               	goto	l697
  5362  17E1  30FF               	movlw	255
  5363  17E2  05F0               	andwf	___ftpack@arg,f
  5364  17E3  307F               	movlw	127
  5365  17E4  05F1               	andwf	___ftpack@arg+1,f
  5366  17E5  30FF               	movlw	255
  5367  17E6  05F2               	andwf	___ftpack@arg+2,f
  5368  17E7                     l697:	
  5369  17E7  1003               	clrc
  5370  17E8  0CF3               	rrf	___ftpack@exp,f
  5371  17E9  0873               	movf	___ftpack@exp,w
  5372  17EA  00F5               	movwf	??___ftpack
  5373  17EB  01F6               	clrf	??___ftpack+1
  5374  17EC  01F7               	clrf	??___ftpack+2
  5375  17ED  3010               	movlw	16
  5376  17EE                     u1935:	
  5377  17EE  1003               	clrc
  5378  17EF  0DF5               	rlf	??___ftpack,f
  5379  17F0  0DF6               	rlf	??___ftpack+1,f
  5380  17F1  0DF7               	rlf	??___ftpack+2,f
  5381  17F2  3EFF               	addlw	-1
  5382  17F3  1D03               	skipz
  5383  17F4  2FEE               	goto	u1935
  5384  17F5  0875               	movf	??___ftpack,w
  5385  17F6  04F0               	iorwf	___ftpack@arg,f
  5386  17F7  0876               	movf	??___ftpack+1,w
  5387  17F8  04F1               	iorwf	___ftpack@arg+1,f
  5388  17F9  0877               	movf	??___ftpack+2,w
  5389  17FA  04F2               	iorwf	___ftpack@arg+2,f
  5390  17FB  0874               	movf	___ftpack@sign,w
  5391  17FC  1903               	btfsc	3,2
  5392  17FD  0008               	return
  5393  17FE  17F2               	bsf	___ftpack@arg+2,7
  5394  17FF  0008               	return
  5395  1800                     __end_of___ftpack:	
  5396                           
  5397                           	psect	text15
  5398  15D2                     __ptext15:	
  5399 ;; *************** function _WriteTempToLCD *****************
  5400 ;; Defined at:
  5401 ;;		line 195 in file "LCD.c"
  5402 ;; Parameters:    Size  Location     Type
  5403 ;;  Temp            2    9[COMMON] int 
  5404 ;; Auto vars:     Size  Location     Type
  5405 ;;		None
  5406 ;; Return value:  Size  Location     Type
  5407 ;;		None               void
  5408 ;; Registers used:
  5409 ;;		wreg, status,2, status,0, pclath, cstack
  5410 ;; Tracked objects:
  5411 ;;		On entry : 0/0
  5412 ;;		On exit  : 0/0
  5413 ;;		Unchanged: 0/0
  5414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5415 ;;      Params:         2       0       0       0       0
  5416 ;;      Locals:         0       0       0       0       0
  5417 ;;      Temps:          0       0       0       0       0
  5418 ;;      Totals:         2       0       0       0       0
  5419 ;;Total ram usage:        2 bytes
  5420 ;; Hardware stack levels used:    1
  5421 ;; Hardware stack levels required when called:    2
  5422 ;; This function calls:
  5423 ;;		_WriteDataToLCD
  5424 ;;		___awdiv
  5425 ;;		___awmod
  5426 ;; This function is called by:
  5427 ;;		_displayState1
  5428 ;;		_displayState2
  5429 ;;		_displayState3
  5430 ;;		_displayState4
  5431 ;; This function uses a non-reentrant model
  5432 ;;
  5433                           
  5434                           
  5435                           ;psect for function _WriteTempToLCD
  5436  15D2                     _WriteTempToLCD:	
  5437                           
  5438                           ;LCD.c: 197: WriteDataToLCD(Temp / 10 + 0x30);
  5439                           
  5440                           ;incstack = 0
  5441                           ; Regs used in _WriteTempToLCD: [wreg+status,2+status,0+pclath+cstack]
  5442  15D2  300A               	movlw	10
  5443  15D3  00F0               	movwf	___awdiv@divisor
  5444  15D4  3000               	movlw	0
  5445  15D5  00F1               	movwf	___awdiv@divisor+1
  5446  15D6  087A               	movf	WriteTempToLCD@Temp+1,w
  5447  15D7  00F3               	movwf	___awdiv@dividend+1
  5448  15D8  0879               	movf	WriteTempToLCD@Temp,w
  5449  15D9  00F2               	movwf	___awdiv@dividend
  5450  15DA  160A  118A  26E2  160A  118A  	fcall	___awdiv
  5451  15DF  0870               	movf	?___awdiv,w
  5452  15E0  3E30               	addlw	48
  5453  15E1  120A  118A  200A  160A  118A  	fcall	_WriteDataToLCD
  5454                           
  5455                           ;LCD.c: 198: WriteDataToLCD(Temp % 10 + 0x30);
  5456  15E6  300A               	movlw	10
  5457  15E7  00F0               	movwf	___awmod@divisor
  5458  15E8  3000               	movlw	0
  5459  15E9  00F1               	movwf	___awmod@divisor+1
  5460  15EA  087A               	movf	WriteTempToLCD@Temp+1,w
  5461  15EB  00F3               	movwf	___awmod@dividend+1
  5462  15EC  0879               	movf	WriteTempToLCD@Temp,w
  5463  15ED  00F2               	movwf	___awmod@dividend
  5464  15EE  160A  118A  2697  160A  118A  	fcall	___awmod
  5465  15F3  0870               	movf	?___awmod,w
  5466  15F4  3E30               	addlw	48
  5467  15F5  120A  118A  200A   	fcall	_WriteDataToLCD
  5468  15F8  0008               	return
  5469  15F9                     __end_of_WriteTempToLCD:	
  5470                           
  5471                           	psect	text16
  5472  155F                     __ptext16:	
  5473 ;; *************** function _ReadADC *****************
  5474 ;; Defined at:
  5475 ;;		line 66 in file "main.c"
  5476 ;; Parameters:    Size  Location     Type
  5477 ;;		None
  5478 ;; Auto vars:     Size  Location     Type
  5479 ;;  nhietdo         2    2[COMMON] unsigned int 
  5480 ;; Return value:  Size  Location     Type
  5481 ;;                  2    0[COMMON] unsigned int 
  5482 ;; Registers used:
  5483 ;;		wreg, status,2
  5484 ;; Tracked objects:
  5485 ;;		On entry : 0/0
  5486 ;;		On exit  : 0/0
  5487 ;;		Unchanged: 0/0
  5488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5489 ;;      Params:         2       0       0       0       0
  5490 ;;      Locals:         2       0       0       0       0
  5491 ;;      Temps:          0       0       0       0       0
  5492 ;;      Totals:         4       0       0       0       0
  5493 ;;Total ram usage:        4 bytes
  5494 ;; Hardware stack levels used:    1
  5495 ;; This function calls:
  5496 ;;		Nothing
  5497 ;; This function is called by:
  5498 ;;		_displayState1
  5499 ;; This function uses a non-reentrant model
  5500 ;;
  5501                           
  5502                           
  5503                           ;psect for function _ReadADC
  5504  155F                     _ReadADC:	
  5505                           
  5506                           ;main.c: 67: unsigned int nhietdo = 0;
  5507                           
  5508                           ;incstack = 0
  5509                           ; Regs used in _ReadADC: [wreg+status,2]
  5510  155F  01F2               	clrf	ReadADC@nhietdo
  5511  1560  01F3               	clrf	ReadADC@nhietdo+1
  5512                           
  5513                           ;main.c: 68: ADCON0bits.GO_nDONE = 1;
  5514  1561  1283               	bcf	3,5	;RP0=0, select bank0
  5515  1562  1303               	bcf	3,6	;RP1=0, select bank0
  5516  1563  151F               	bsf	31,2	;volatile
  5517  1564                     l100:	
  5518                           ;main.c: 69: while (ADCON0bits.GO_nDONE);
  5519                           
  5520  1564  191F               	btfsc	31,2	;volatile
  5521  1565  2D64               	goto	l100
  5522                           
  5523                           ;main.c: 70: nhietdo = ADRESH * 256 + ADRESL;
  5524  1566  081E               	movf	30,w	;volatile
  5525  1567  00F3               	movwf	ReadADC@nhietdo+1
  5526  1568  1683               	bsf	3,5	;RP0=1, select bank1
  5527  1569  1303               	bcf	3,6	;RP1=0, select bank1
  5528  156A  081E               	movf	30,w	;volatile
  5529  156B  00F2               	movwf	ReadADC@nhietdo
  5530                           
  5531                           ;main.c: 71: return (nhietdo);
  5532  156C  0873               	movf	ReadADC@nhietdo+1,w
  5533  156D  00F1               	movwf	?_ReadADC+1
  5534  156E  0872               	movf	ReadADC@nhietdo,w
  5535  156F  00F0               	movwf	?_ReadADC
  5536  1570  0008               	return
  5537  1571                     __end_of_ReadADC:	
  5538                           
  5539                           	psect	text17
  5540  09FD                     __ptext17:	
  5541 ;; *************** function _Get_DS1307_RTC_Time *****************
  5542 ;; Defined at:
  5543 ;;		line 157 in file "DS1307.c"
  5544 ;; Parameters:    Size  Location     Type
  5545 ;;		None
  5546 ;; Auto vars:     Size  Location     Type
  5547 ;;		None
  5548 ;; Return value:  Size  Location     Type
  5549 ;;                  1    wreg      PTR unsigned char 
  5550 ;; Registers used:
  5551 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5552 ;; Tracked objects:
  5553 ;;		On entry : 0/0
  5554 ;;		On exit  : 0/0
  5555 ;;		Unchanged: 0/0
  5556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5557 ;;      Params:         0       0       0       0       0
  5558 ;;      Locals:         0       0       0       0       0
  5559 ;;      Temps:          4       0       0       0       0
  5560 ;;      Totals:         4       0       0       0       0
  5561 ;;Total ram usage:        4 bytes
  5562 ;; Hardware stack levels used:    1
  5563 ;; Hardware stack levels required when called:    2
  5564 ;; This function calls:
  5565 ;;		_Read_Bytes_From_DS1307_RTC
  5566 ;;		___bmul
  5567 ;; This function is called by:
  5568 ;;		_main
  5569 ;;		_displayState1
  5570 ;;		_displayState2
  5571 ;;		_displayState4
  5572 ;; This function uses a non-reentrant model
  5573 ;;
  5574                           
  5575                           
  5576                           ;psect for function _Get_DS1307_RTC_Time
  5577  09FD                     _Get_DS1307_RTC_Time:	
  5578                           
  5579                           ;DS1307.c: 159: Read_Bytes_From_DS1307_RTC(0x00, pRTCArray, 3);
  5580                           
  5581                           ;incstack = 0
  5582                           ; Regs used in _Get_DS1307_RTC_Time: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5583  09FD  3050               	movlw	(low (_pRTCArray| 0))& (0+255)
  5584  09FE  00F9               	movwf	??_Get_DS1307_RTC_Time
  5585  09FF  0879               	movf	??_Get_DS1307_RTC_Time,w
  5586  0A00  00F1               	movwf	Read_Bytes_From_DS1307_RTC@pData
  5587  0A01  3003               	movlw	3
  5588  0A02  00F2               	movwf	Read_Bytes_From_DS1307_RTC@NoOfBytes
  5589  0A03  3000               	movlw	0
  5590  0A04  00F3               	movwf	Read_Bytes_From_DS1307_RTC@NoOfBytes+1
  5591  0A05  3000               	movlw	0
  5592  0A06  160A  118A  273B  120A  158A  	fcall	_Read_Bytes_From_DS1307_RTC
  5593                           
  5594                           ;DS1307.c: 162: Temp = pRTCArray[0];
  5595  0A0B  1283               	bcf	3,5	;RP0=0, select bank0
  5596  0A0C  1303               	bcf	3,6	;RP1=0, select bank0
  5597  0A0D  0850               	movf	_pRTCArray,w
  5598  0A0E  00F9               	movwf	??_Get_DS1307_RTC_Time
  5599  0A0F  0879               	movf	??_Get_DS1307_RTC_Time,w
  5600  0A10  00FD               	movwf	_Temp
  5601                           
  5602                           ;DS1307.c: 163: pRTCArray[0] = ((Temp & 0x7F) >> 4)*10 + (Temp & 0x0F);
  5603  0A11  300F               	movlw	15
  5604  0A12  057D               	andwf	_Temp,w
  5605  0A13  00F9               	movwf	??_Get_DS1307_RTC_Time
  5606  0A14  300A               	movlw	10
  5607  0A15  00FA               	movwf	??_Get_DS1307_RTC_Time+1
  5608  0A16  087A               	movf	??_Get_DS1307_RTC_Time+1,w
  5609  0A17  00F0               	movwf	___bmul@multiplicand
  5610  0A18  087D               	movf	_Temp,w
  5611  0A19  00FB               	movwf	??_Get_DS1307_RTC_Time+2
  5612  0A1A  3004               	movlw	4
  5613  0A1B                     u2215:	
  5614  0A1B  1003               	clrc
  5615  0A1C  0CFB               	rrf	??_Get_DS1307_RTC_Time+2,f
  5616  0A1D  3EFF               	addlw	-1
  5617  0A1E  1D03               	skipz
  5618  0A1F  2A1B               	goto	u2215
  5619  0A20  087B               	movf	??_Get_DS1307_RTC_Time+2,w
  5620  0A21  3907               	andlw	7
  5621  0A22  160A  118A  254E  120A  158A  	fcall	___bmul
  5622  0A27  0779               	addwf	??_Get_DS1307_RTC_Time,w
  5623  0A28  00FC               	movwf	??_Get_DS1307_RTC_Time+3
  5624  0A29  087C               	movf	??_Get_DS1307_RTC_Time+3,w
  5625  0A2A  1283               	bcf	3,5	;RP0=0, select bank0
  5626  0A2B  1303               	bcf	3,6	;RP1=0, select bank0
  5627  0A2C  00D0               	movwf	_pRTCArray
  5628                           
  5629                           ;DS1307.c: 166: Temp = pRTCArray[1];
  5630  0A2D  0851               	movf	_pRTCArray+1,w
  5631  0A2E  00F9               	movwf	??_Get_DS1307_RTC_Time
  5632  0A2F  0879               	movf	??_Get_DS1307_RTC_Time,w
  5633  0A30  00FD               	movwf	_Temp
  5634                           
  5635                           ;DS1307.c: 167: pRTCArray[1] = (Temp >> 4)*10 + (Temp & 0x0F);
  5636  0A31  300F               	movlw	15
  5637  0A32  057D               	andwf	_Temp,w
  5638  0A33  00F9               	movwf	??_Get_DS1307_RTC_Time
  5639  0A34  300A               	movlw	10
  5640  0A35  00FA               	movwf	??_Get_DS1307_RTC_Time+1
  5641  0A36  087A               	movf	??_Get_DS1307_RTC_Time+1,w
  5642  0A37  00F0               	movwf	___bmul@multiplicand
  5643  0A38  087D               	movf	_Temp,w
  5644  0A39  00FB               	movwf	??_Get_DS1307_RTC_Time+2
  5645  0A3A  3004               	movlw	4
  5646  0A3B                     u2225:	
  5647  0A3B  1003               	clrc
  5648  0A3C  0CFB               	rrf	??_Get_DS1307_RTC_Time+2,f
  5649  0A3D  3EFF               	addlw	-1
  5650  0A3E  1D03               	skipz
  5651  0A3F  2A3B               	goto	u2225
  5652  0A40  087B               	movf	??_Get_DS1307_RTC_Time+2,w
  5653  0A41  160A  118A  254E  120A  158A  	fcall	___bmul
  5654  0A46  0779               	addwf	??_Get_DS1307_RTC_Time,w
  5655  0A47  00FC               	movwf	??_Get_DS1307_RTC_Time+3
  5656  0A48  087C               	movf	??_Get_DS1307_RTC_Time+3,w
  5657  0A49  1283               	bcf	3,5	;RP0=0, select bank0
  5658  0A4A  1303               	bcf	3,6	;RP1=0, select bank0
  5659  0A4B  00D1               	movwf	_pRTCArray+1
  5660                           
  5661                           ;DS1307.c: 170: if (pRTCArray[2]&0x40)
  5662  0A4C  1F52               	btfss	_pRTCArray+2,6
  5663  0A4D  2A75               	goto	l2486
  5664                           
  5665                           ;DS1307.c: 171: {
  5666                           ;DS1307.c: 172: if (pRTCArray[2]&0x20)
  5667  0A4E  1ED2               	btfss	_pRTCArray+2,5
  5668  0A4F  2A53               	goto	l2480
  5669                           
  5670                           ;DS1307.c: 173: pRTCArray[3] = 1;
  5671  0A50  01D3               	clrf	_pRTCArray+3
  5672  0A51  0AD3               	incf	_pRTCArray+3,f
  5673  0A52  2A54               	goto	l2482
  5674  0A53                     l2480:	
  5675                           
  5676                           ;DS1307.c: 174: else
  5677                           ;DS1307.c: 175: pRTCArray[3] = 0;
  5678  0A53  01D3               	clrf	_pRTCArray+3
  5679  0A54                     l2482:	
  5680                           
  5681                           ;DS1307.c: 177: Temp = pRTCArray[2];
  5682  0A54  0852               	movf	_pRTCArray+2,w
  5683  0A55  00F9               	movwf	??_Get_DS1307_RTC_Time
  5684  0A56  0879               	movf	??_Get_DS1307_RTC_Time,w
  5685  0A57  00FD               	movwf	_Temp
  5686                           
  5687                           ;DS1307.c: 178: pRTCArray[2] = ((Temp & 0x1F) >> 4)*10 + (Temp & 0x0F);
  5688  0A58  300F               	movlw	15
  5689  0A59  057D               	andwf	_Temp,w
  5690  0A5A  00F9               	movwf	??_Get_DS1307_RTC_Time
  5691  0A5B  300A               	movlw	10
  5692  0A5C  00FA               	movwf	??_Get_DS1307_RTC_Time+1
  5693  0A5D  087A               	movf	??_Get_DS1307_RTC_Time+1,w
  5694  0A5E  00F0               	movwf	___bmul@multiplicand
  5695  0A5F  087D               	movf	_Temp,w
  5696  0A60  00FB               	movwf	??_Get_DS1307_RTC_Time+2
  5697  0A61  3004               	movlw	4
  5698  0A62                     u2255:	
  5699  0A62  1003               	clrc
  5700  0A63  0CFB               	rrf	??_Get_DS1307_RTC_Time+2,f
  5701  0A64  3EFF               	addlw	-1
  5702  0A65  1D03               	skipz
  5703  0A66  2A62               	goto	u2255
  5704  0A67  087B               	movf	??_Get_DS1307_RTC_Time+2,w
  5705  0A68  3901               	andlw	1
  5706  0A69  160A  118A  254E  120A  158A  	fcall	___bmul
  5707  0A6E  0779               	addwf	??_Get_DS1307_RTC_Time,w
  5708  0A6F  00FC               	movwf	??_Get_DS1307_RTC_Time+3
  5709  0A70  087C               	movf	??_Get_DS1307_RTC_Time+3,w
  5710  0A71  1283               	bcf	3,5	;RP0=0, select bank0
  5711  0A72  1303               	bcf	3,6	;RP1=0, select bank0
  5712  0A73  00D2               	movwf	_pRTCArray+2
  5713                           
  5714                           ;DS1307.c: 179: } else
  5715  0A74  2A96               	goto	l2492
  5716  0A75                     l2486:	
  5717                           
  5718                           ;DS1307.c: 180: {
  5719                           ;DS1307.c: 181: Temp = pRTCArray[2];
  5720  0A75  0852               	movf	_pRTCArray+2,w
  5721  0A76  00F9               	movwf	??_Get_DS1307_RTC_Time
  5722  0A77  0879               	movf	??_Get_DS1307_RTC_Time,w
  5723  0A78  00FD               	movwf	_Temp
  5724                           
  5725                           ;DS1307.c: 182: pRTCArray[2] = (Temp >> 4)*10 + (Temp & 0x0F);
  5726  0A79  300F               	movlw	15
  5727  0A7A  057D               	andwf	_Temp,w
  5728  0A7B  00F9               	movwf	??_Get_DS1307_RTC_Time
  5729  0A7C  300A               	movlw	10
  5730  0A7D  00FA               	movwf	??_Get_DS1307_RTC_Time+1
  5731  0A7E  087A               	movf	??_Get_DS1307_RTC_Time+1,w
  5732  0A7F  00F0               	movwf	___bmul@multiplicand
  5733  0A80  087D               	movf	_Temp,w
  5734  0A81  00FB               	movwf	??_Get_DS1307_RTC_Time+2
  5735  0A82  3004               	movlw	4
  5736  0A83                     u2265:	
  5737  0A83  1003               	clrc
  5738  0A84  0CFB               	rrf	??_Get_DS1307_RTC_Time+2,f
  5739  0A85  3EFF               	addlw	-1
  5740  0A86  1D03               	skipz
  5741  0A87  2A83               	goto	u2265
  5742  0A88  087B               	movf	??_Get_DS1307_RTC_Time+2,w
  5743  0A89  160A  118A  254E   	fcall	___bmul
  5744  0A8C  0779               	addwf	??_Get_DS1307_RTC_Time,w
  5745  0A8D  00FC               	movwf	??_Get_DS1307_RTC_Time+3
  5746  0A8E  087C               	movf	??_Get_DS1307_RTC_Time+3,w
  5747  0A8F  1283               	bcf	3,5	;RP0=0, select bank0
  5748  0A90  1303               	bcf	3,6	;RP1=0, select bank0
  5749  0A91  00D2               	movwf	_pRTCArray+2
  5750                           
  5751                           ;DS1307.c: 183: pRTCArray[3] = 2;
  5752  0A92  3002               	movlw	2
  5753  0A93  00F9               	movwf	??_Get_DS1307_RTC_Time
  5754  0A94  0879               	movf	??_Get_DS1307_RTC_Time,w
  5755  0A95  00D3               	movwf	_pRTCArray+3
  5756  0A96                     l2492:	
  5757                           
  5758                           ;DS1307.c: 184: }
  5759                           ;DS1307.c: 186: return pRTCArray;
  5760  0A96  3050               	movlw	(low (_pRTCArray| 0))& (0+255)
  5761  0A97  0008               	return
  5762  0A98                     __end_of_Get_DS1307_RTC_Time:	
  5763                           
  5764                           	psect	text18
  5765  0807                     __ptext18:	
  5766 ;; *************** function _Get_DS1307_RTC_Date *****************
  5767 ;; Defined at:
  5768 ;;		line 220 in file "DS1307.c"
  5769 ;; Parameters:    Size  Location     Type
  5770 ;;		None
  5771 ;; Auto vars:     Size  Location     Type
  5772 ;;		None
  5773 ;; Return value:  Size  Location     Type
  5774 ;;                  1    wreg      PTR unsigned char 
  5775 ;; Registers used:
  5776 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5777 ;; Tracked objects:
  5778 ;;		On entry : 0/0
  5779 ;;		On exit  : 0/0
  5780 ;;		Unchanged: 0/0
  5781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5782 ;;      Params:         0       0       0       0       0
  5783 ;;      Locals:         0       0       0       0       0
  5784 ;;      Temps:          4       0       0       0       0
  5785 ;;      Totals:         4       0       0       0       0
  5786 ;;Total ram usage:        4 bytes
  5787 ;; Hardware stack levels used:    1
  5788 ;; Hardware stack levels required when called:    2
  5789 ;; This function calls:
  5790 ;;		_Read_Bytes_From_DS1307_RTC
  5791 ;;		___bmul
  5792 ;; This function is called by:
  5793 ;;		_displayState1
  5794 ;;		_displayState3
  5795 ;; This function uses a non-reentrant model
  5796 ;;
  5797                           
  5798                           
  5799                           ;psect for function _Get_DS1307_RTC_Date
  5800  0807                     _Get_DS1307_RTC_Date:	
  5801                           
  5802                           ;DS1307.c: 222: Read_Bytes_From_DS1307_RTC(0x03, pRTCArray, 4);
  5803                           
  5804                           ;incstack = 0
  5805                           ; Regs used in _Get_DS1307_RTC_Date: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5806  0807  3050               	movlw	(low (_pRTCArray| 0))& (0+255)
  5807  0808  00F9               	movwf	??_Get_DS1307_RTC_Date
  5808  0809  0879               	movf	??_Get_DS1307_RTC_Date,w
  5809  080A  00F1               	movwf	Read_Bytes_From_DS1307_RTC@pData
  5810  080B  3004               	movlw	4
  5811  080C  00F2               	movwf	Read_Bytes_From_DS1307_RTC@NoOfBytes
  5812  080D  3000               	movlw	0
  5813  080E  00F3               	movwf	Read_Bytes_From_DS1307_RTC@NoOfBytes+1
  5814  080F  3003               	movlw	3
  5815  0810  160A  118A  273B  120A  158A  	fcall	_Read_Bytes_From_DS1307_RTC
  5816                           
  5817                           ;DS1307.c: 225: Temp = pRTCArray[1];
  5818  0815  1283               	bcf	3,5	;RP0=0, select bank0
  5819  0816  1303               	bcf	3,6	;RP1=0, select bank0
  5820  0817  0851               	movf	_pRTCArray+1,w
  5821  0818  00F9               	movwf	??_Get_DS1307_RTC_Date
  5822  0819  0879               	movf	??_Get_DS1307_RTC_Date,w
  5823  081A  00FD               	movwf	_Temp
  5824                           
  5825                           ;DS1307.c: 226: pRTCArray[1] = (Temp >> 4)*10 + (Temp & 0x0F);
  5826  081B  300F               	movlw	15
  5827  081C  057D               	andwf	_Temp,w
  5828  081D  00F9               	movwf	??_Get_DS1307_RTC_Date
  5829  081E  300A               	movlw	10
  5830  081F  00FA               	movwf	??_Get_DS1307_RTC_Date+1
  5831  0820  087A               	movf	??_Get_DS1307_RTC_Date+1,w
  5832  0821  00F0               	movwf	___bmul@multiplicand
  5833  0822  087D               	movf	_Temp,w
  5834  0823  00FB               	movwf	??_Get_DS1307_RTC_Date+2
  5835  0824  3004               	movlw	4
  5836  0825                     u2335:	
  5837  0825  1003               	clrc
  5838  0826  0CFB               	rrf	??_Get_DS1307_RTC_Date+2,f
  5839  0827  3EFF               	addlw	-1
  5840  0828  1D03               	skipz
  5841  0829  2825               	goto	u2335
  5842  082A  087B               	movf	??_Get_DS1307_RTC_Date+2,w
  5843  082B  160A  118A  254E  120A  158A  	fcall	___bmul
  5844  0830  0779               	addwf	??_Get_DS1307_RTC_Date,w
  5845  0831  00FC               	movwf	??_Get_DS1307_RTC_Date+3
  5846  0832  087C               	movf	??_Get_DS1307_RTC_Date+3,w
  5847  0833  1283               	bcf	3,5	;RP0=0, select bank0
  5848  0834  1303               	bcf	3,6	;RP1=0, select bank0
  5849  0835  00D1               	movwf	_pRTCArray+1
  5850                           
  5851                           ;DS1307.c: 229: Temp = pRTCArray[2];
  5852  0836  0852               	movf	_pRTCArray+2,w
  5853  0837  00F9               	movwf	??_Get_DS1307_RTC_Date
  5854  0838  0879               	movf	??_Get_DS1307_RTC_Date,w
  5855  0839  00FD               	movwf	_Temp
  5856                           
  5857                           ;DS1307.c: 230: pRTCArray[2] = (Temp >> 4)*10 + (Temp & 0x0F);
  5858  083A  300F               	movlw	15
  5859  083B  057D               	andwf	_Temp,w
  5860  083C  00F9               	movwf	??_Get_DS1307_RTC_Date
  5861  083D  300A               	movlw	10
  5862  083E  00FA               	movwf	??_Get_DS1307_RTC_Date+1
  5863  083F  087A               	movf	??_Get_DS1307_RTC_Date+1,w
  5864  0840  00F0               	movwf	___bmul@multiplicand
  5865  0841  087D               	movf	_Temp,w
  5866  0842  00FB               	movwf	??_Get_DS1307_RTC_Date+2
  5867  0843  3004               	movlw	4
  5868  0844                     u2345:	
  5869  0844  1003               	clrc
  5870  0845  0CFB               	rrf	??_Get_DS1307_RTC_Date+2,f
  5871  0846  3EFF               	addlw	-1
  5872  0847  1D03               	skipz
  5873  0848  2844               	goto	u2345
  5874  0849  087B               	movf	??_Get_DS1307_RTC_Date+2,w
  5875  084A  160A  118A  254E  120A  158A  	fcall	___bmul
  5876  084F  0779               	addwf	??_Get_DS1307_RTC_Date,w
  5877  0850  00FC               	movwf	??_Get_DS1307_RTC_Date+3
  5878  0851  087C               	movf	??_Get_DS1307_RTC_Date+3,w
  5879  0852  1283               	bcf	3,5	;RP0=0, select bank0
  5880  0853  1303               	bcf	3,6	;RP1=0, select bank0
  5881  0854  00D2               	movwf	_pRTCArray+2
  5882                           
  5883                           ;DS1307.c: 233: Temp = pRTCArray[3];
  5884  0855  0853               	movf	_pRTCArray+3,w
  5885  0856  00F9               	movwf	??_Get_DS1307_RTC_Date
  5886  0857  0879               	movf	??_Get_DS1307_RTC_Date,w
  5887  0858  00FD               	movwf	_Temp
  5888                           
  5889                           ;DS1307.c: 234: pRTCArray[3] = (Temp >> 4)*10 + (Temp & 0x0F);
  5890  0859  300F               	movlw	15
  5891  085A  057D               	andwf	_Temp,w
  5892  085B  00F9               	movwf	??_Get_DS1307_RTC_Date
  5893  085C  300A               	movlw	10
  5894  085D  00FA               	movwf	??_Get_DS1307_RTC_Date+1
  5895  085E  087A               	movf	??_Get_DS1307_RTC_Date+1,w
  5896  085F  00F0               	movwf	___bmul@multiplicand
  5897  0860  087D               	movf	_Temp,w
  5898  0861  00FB               	movwf	??_Get_DS1307_RTC_Date+2
  5899  0862  3004               	movlw	4
  5900  0863                     u2355:	
  5901  0863  1003               	clrc
  5902  0864  0CFB               	rrf	??_Get_DS1307_RTC_Date+2,f
  5903  0865  3EFF               	addlw	-1
  5904  0866  1D03               	skipz
  5905  0867  2863               	goto	u2355
  5906  0868  087B               	movf	??_Get_DS1307_RTC_Date+2,w
  5907  0869  160A  118A  254E   	fcall	___bmul
  5908  086C  0779               	addwf	??_Get_DS1307_RTC_Date,w
  5909  086D  00FC               	movwf	??_Get_DS1307_RTC_Date+3
  5910  086E  087C               	movf	??_Get_DS1307_RTC_Date+3,w
  5911  086F  1283               	bcf	3,5	;RP0=0, select bank0
  5912  0870  1303               	bcf	3,6	;RP1=0, select bank0
  5913  0871  00D3               	movwf	_pRTCArray+3
  5914                           
  5915                           ;DS1307.c: 236: return pRTCArray;
  5916  0872  3050               	movlw	(low (_pRTCArray| 0))& (0+255)
  5917  0873  0008               	return
  5918  0874                     __end_of_Get_DS1307_RTC_Date:	
  5919                           
  5920                           	psect	text19
  5921  154E                     __ptext19:	
  5922 ;; *************** function ___bmul *****************
  5923 ;; Defined at:
  5924 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul8.c"
  5925 ;; Parameters:    Size  Location     Type
  5926 ;;  multiplier      1    wreg     unsigned char 
  5927 ;;  multiplicand    1    0[COMMON] unsigned char 
  5928 ;; Auto vars:     Size  Location     Type
  5929 ;;  multiplier      1    3[COMMON] unsigned char 
  5930 ;;  product         1    2[COMMON] unsigned char 
  5931 ;; Return value:  Size  Location     Type
  5932 ;;                  1    wreg      unsigned char 
  5933 ;; Registers used:
  5934 ;;		wreg, status,2, status,0
  5935 ;; Tracked objects:
  5936 ;;		On entry : 0/0
  5937 ;;		On exit  : 0/0
  5938 ;;		Unchanged: 0/0
  5939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5940 ;;      Params:         1       0       0       0       0
  5941 ;;      Locals:         2       0       0       0       0
  5942 ;;      Temps:          1       0       0       0       0
  5943 ;;      Totals:         4       0       0       0       0
  5944 ;;Total ram usage:        4 bytes
  5945 ;; Hardware stack levels used:    1
  5946 ;; This function calls:
  5947 ;;		Nothing
  5948 ;; This function is called by:
  5949 ;;		_Get_DS1307_RTC_Time
  5950 ;;		_Get_DS1307_RTC_Date
  5951 ;; This function uses a non-reentrant model
  5952 ;;
  5953                           
  5954                           
  5955                           ;psect for function ___bmul
  5956  154E                     ___bmul:	
  5957                           
  5958                           ;incstack = 0
  5959                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  5960                           ;___bmul@multiplier stored from wreg
  5961  154E  00F3               	movwf	___bmul@multiplier
  5962  154F  01F2               	clrf	___bmul@product
  5963  1550                     l2324:	
  5964  1550  1C73               	btfss	___bmul@multiplier,0
  5965  1551  2D56               	goto	l2328
  5966  1552  0870               	movf	___bmul@multiplicand,w
  5967  1553  00F1               	movwf	??___bmul
  5968  1554  0871               	movf	??___bmul,w
  5969  1555  07F2               	addwf	___bmul@product,f
  5970  1556                     l2328:	
  5971  1556  1003               	clrc
  5972  1557  0DF0               	rlf	___bmul@multiplicand,f
  5973  1558  1003               	clrc
  5974  1559  0CF3               	rrf	___bmul@multiplier,f
  5975  155A  0873               	movf	___bmul@multiplier,w
  5976  155B  1D03               	btfss	3,2
  5977  155C  2D50               	goto	l2324
  5978  155D  0872               	movf	___bmul@product,w
  5979  155E  0008               	return
  5980  155F                     __end_of___bmul:	
  5981                           
  5982                           	psect	text20
  5983  173B                     __ptext20:	
  5984 ;; *************** function _Read_Bytes_From_DS1307_RTC *****************
  5985 ;; Defined at:
  5986 ;;		line 88 in file "DS1307.c"
  5987 ;; Parameters:    Size  Location     Type
  5988 ;;  Address         1    wreg     unsigned char 
  5989 ;;  pData           1    1[COMMON] PTR unsigned char 
  5990 ;;		 -> pRTCArray(4), 
  5991 ;;  NoOfBytes       2    2[COMMON] unsigned int 
  5992 ;; Auto vars:     Size  Location     Type
  5993 ;;  Address         1    6[COMMON] unsigned char 
  5994 ;;  i               2    7[COMMON] unsigned int 
  5995 ;; Return value:  Size  Location     Type
  5996 ;;		None               void
  5997 ;; Registers used:
  5998 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5999 ;; Tracked objects:
  6000 ;;		On entry : 0/0
  6001 ;;		On exit  : 0/0
  6002 ;;		Unchanged: 0/0
  6003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6004 ;;      Params:         3       0       0       0       0
  6005 ;;      Locals:         3       0       0       0       0
  6006 ;;      Temps:          2       0       0       0       0
  6007 ;;      Totals:         8       0       0       0       0
  6008 ;;Total ram usage:        8 bytes
  6009 ;; Hardware stack levels used:    1
  6010 ;; Hardware stack levels required when called:    1
  6011 ;; This function calls:
  6012 ;;		_I2C_ReStart
  6013 ;;		_I2C_Read_Byte
  6014 ;;		_I2C_Send_ACK
  6015 ;;		_I2C_Send_NACK
  6016 ;;		_I2C_Start
  6017 ;;		_I2C_Stop
  6018 ;;		_I2C_Write_Byte
  6019 ;; This function is called by:
  6020 ;;		_Get_DS1307_RTC_Time
  6021 ;;		_Get_DS1307_RTC_Date
  6022 ;; This function uses a non-reentrant model
  6023 ;;
  6024                           
  6025                           
  6026                           ;psect for function _Read_Bytes_From_DS1307_RTC
  6027  173B                     _Read_Bytes_From_DS1307_RTC:	
  6028                           
  6029                           ;incstack = 0
  6030                           ; Regs used in _Read_Bytes_From_DS1307_RTC: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6031                           ;Read_Bytes_From_DS1307_RTC@Address stored from wreg
  6032  173B  00F6               	movwf	Read_Bytes_From_DS1307_RTC@Address
  6033  173C                     L4:	
  6034                           
  6035                           ;DS1307.c: 89: unsigned int i;
  6036                           ;DS1307.c: 91: I2C_Start();
  6037  173C  160A  118A  24EF  160A  118A  	fcall	_I2C_Start
  6038                           
  6039                           ;DS1307.c: 94: while (I2C_Write_Byte(0xD0 + 0) == 1)
  6040  1741  30D0               	movlw	208
  6041  1742  160A  118A  253E  160A  118A  	fcall	_I2C_Write_Byte
  6042  1747  1803               	btfsc	3,0
  6043  1748  2F3C               	goto	L4
  6044                           
  6045                           ;DS1307.c: 97: }
  6046                           ;DS1307.c: 99: I2C_Write_Byte(Address);
  6047                           
  6048                           ;DS1307.c: 95: {
  6049                           ;DS1307.c: 96: I2C_Start();
  6050  1749  0876               	movf	Read_Bytes_From_DS1307_RTC@Address,w
  6051  174A  160A  118A  253E  160A  118A  	fcall	_I2C_Write_Byte
  6052                           
  6053                           ;DS1307.c: 100: I2C_ReStart();
  6054  174F  160A  118A  24E7  160A  118A  	fcall	_I2C_ReStart
  6055                           
  6056                           ;DS1307.c: 103: I2C_Write_Byte(0xD0 + 1);
  6057  1754  30D1               	movlw	209
  6058  1755  160A  118A  253E  160A  118A  	fcall	_I2C_Write_Byte
  6059                           
  6060                           ;DS1307.c: 105: pData[0] = I2C_Read_Byte();
  6061  175A  160A  118A  2507  160A  118A  	fcall	_I2C_Read_Byte
  6062  175F  00F4               	movwf	??_Read_Bytes_From_DS1307_RTC
  6063  1760  0871               	movf	Read_Bytes_From_DS1307_RTC@pData,w
  6064  1761  0084               	movwf	4
  6065  1762  0874               	movf	??_Read_Bytes_From_DS1307_RTC,w
  6066  1763  1383               	bcf	3,7	;select IRP bank0
  6067  1764  0080               	movwf	0
  6068                           
  6069                           ;DS1307.c: 107: for (i = 1; i < NoOfBytes; i++)
  6070  1765  3001               	movlw	1
  6071  1766  00F7               	movwf	Read_Bytes_From_DS1307_RTC@i
  6072  1767  3000               	movlw	0
  6073  1768  00F8               	movwf	Read_Bytes_From_DS1307_RTC@i+1
  6074  1769                     l2318:	
  6075  1769  0873               	movf	Read_Bytes_From_DS1307_RTC@NoOfBytes+1,w
  6076  176A  0278               	subwf	Read_Bytes_From_DS1307_RTC@i+1,w
  6077  176B  1D03               	skipz
  6078  176C  2F6F               	goto	u1805
  6079  176D  0872               	movf	Read_Bytes_From_DS1307_RTC@NoOfBytes,w
  6080  176E  0277               	subwf	Read_Bytes_From_DS1307_RTC@i,w
  6081  176F                     u1805:	
  6082  176F  1803               	btfsc	3,0
  6083  1770  2F8B               	goto	l2320
  6084                           
  6085                           ;DS1307.c: 108: {
  6086                           ;DS1307.c: 109: I2C_Send_ACK();
  6087  1771  160A  118A  2510  160A  118A  	fcall	_I2C_Send_ACK
  6088                           
  6089                           ;DS1307.c: 110: pData[i] = I2C_Read_Byte();
  6090  1776  160A  118A  2507  160A  118A  	fcall	_I2C_Read_Byte
  6091  177B  00F4               	movwf	??_Read_Bytes_From_DS1307_RTC
  6092  177C  0877               	movf	Read_Bytes_From_DS1307_RTC@i,w
  6093  177D  0771               	addwf	Read_Bytes_From_DS1307_RTC@pData,w
  6094  177E  00F5               	movwf	??_Read_Bytes_From_DS1307_RTC+1
  6095  177F  0875               	movf	??_Read_Bytes_From_DS1307_RTC+1,w
  6096  1780  0084               	movwf	4
  6097  1781  0874               	movf	??_Read_Bytes_From_DS1307_RTC,w
  6098  1782  1383               	bcf	3,7	;select IRP bank0
  6099  1783  0080               	movwf	0
  6100  1784  3001               	movlw	1
  6101  1785  07F7               	addwf	Read_Bytes_From_DS1307_RTC@i,f
  6102  1786  1803               	skipnc
  6103  1787  0AF8               	incf	Read_Bytes_From_DS1307_RTC@i+1,f
  6104  1788  3000               	movlw	0
  6105  1789  07F8               	addwf	Read_Bytes_From_DS1307_RTC@i+1,f
  6106  178A  2F69               	goto	l2318
  6107  178B                     l2320:	
  6108                           
  6109                           ;DS1307.c: 111: }
  6110                           ;DS1307.c: 113: I2C_Send_NACK();
  6111  178B  160A  118A  2519  160A  118A  	fcall	_I2C_Send_NACK
  6112                           
  6113                           ;DS1307.c: 114: I2C_Stop();
  6114  1790  160A  118A  24F7   	fcall	_I2C_Stop
  6115  1793  0008               	return
  6116  1794                     __end_of_Read_Bytes_From_DS1307_RTC:	
  6117                           
  6118                           	psect	text21
  6119  153E                     __ptext21:	
  6120 ;; *************** function _I2C_Write_Byte *****************
  6121 ;; Defined at:
  6122 ;;		line 68 in file "I2C.c"
  6123 ;; Parameters:    Size  Location     Type
  6124 ;;  Byte            1    wreg     unsigned char 
  6125 ;; Auto vars:     Size  Location     Type
  6126 ;;  Byte            1    0[COMMON] unsigned char 
  6127 ;; Return value:  Size  Location     Type
  6128 ;;		None               void
  6129 ;; Registers used:
  6130 ;;		wreg, status,2, status,0
  6131 ;; Tracked objects:
  6132 ;;		On entry : 0/0
  6133 ;;		On exit  : 0/0
  6134 ;;		Unchanged: 0/0
  6135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6136 ;;      Params:         0       0       0       0       0
  6137 ;;      Locals:         1       0       0       0       0
  6138 ;;      Temps:          0       0       0       0       0
  6139 ;;      Totals:         1       0       0       0       0
  6140 ;;Total ram usage:        1 bytes
  6141 ;; Hardware stack levels used:    1
  6142 ;; This function calls:
  6143 ;;		Nothing
  6144 ;; This function is called by:
  6145 ;;		_Write_Bytes_To_DS1307_RTC
  6146 ;;		_Read_Bytes_From_DS1307_RTC
  6147 ;;		_Write_Byte_To_DS1307_RTC
  6148 ;;		_Read_Byte_From_DS1307_RTC
  6149 ;; This function uses a non-reentrant model
  6150 ;;
  6151                           
  6152                           
  6153                           ;psect for function _I2C_Write_Byte
  6154  153E                     _I2C_Write_Byte:	
  6155                           
  6156                           ;incstack = 0
  6157                           ; Regs used in _I2C_Write_Byte: [wreg+status,2+status,0]
  6158                           ;I2C_Write_Byte@Byte stored from wreg
  6159  153E  00F0               	movwf	I2C_Write_Byte@Byte
  6160                           
  6161                           ;I2C.c: 69: SSPBUF = Byte;
  6162  153F  0870               	movf	I2C_Write_Byte@Byte,w
  6163  1540  1283               	bcf	3,5	;RP0=0, select bank0
  6164  1541  1303               	bcf	3,6	;RP1=0, select bank0
  6165  1542  0093               	movwf	19	;volatile
  6166  1543                     l349:	
  6167                           ;I2C.c: 70: while (!SSPIF);
  6168                           
  6169  1543  1D8C               	btfss	12,3	;volatile
  6170  1544  2D43               	goto	l349
  6171                           
  6172                           ;I2C.c: 71: SSPIF = 0;
  6173  1545  118C               	bcf	12,3	;volatile
  6174                           
  6175                           ;I2C.c: 73: return ACKSTAT;
  6176  1546  1683               	bsf	3,5	;RP0=1, select bank1
  6177  1547  1303               	bcf	3,6	;RP1=0, select bank1
  6178  1548  1B11               	btfsc	17,6	;volatile
  6179  1549  2D4C               	goto	l2248
  6180  154A  1003               	clrc
  6181  154B  0008               	return
  6182  154C                     l2248:	
  6183  154C  1403               	setc
  6184  154D  0008               	return
  6185  154E                     __end_of_I2C_Write_Byte:	
  6186                           
  6187                           	psect	text22
  6188  14F7                     __ptext22:	
  6189 ;; *************** function _I2C_Stop *****************
  6190 ;; Defined at:
  6191 ;;		line 38 in file "I2C.c"
  6192 ;; Parameters:    Size  Location     Type
  6193 ;;		None
  6194 ;; Auto vars:     Size  Location     Type
  6195 ;;		None
  6196 ;; Return value:  Size  Location     Type
  6197 ;;		None               void
  6198 ;; Registers used:
  6199 ;;		None
  6200 ;; Tracked objects:
  6201 ;;		On entry : 0/0
  6202 ;;		On exit  : 0/0
  6203 ;;		Unchanged: 0/0
  6204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6205 ;;      Params:         0       0       0       0       0
  6206 ;;      Locals:         0       0       0       0       0
  6207 ;;      Temps:          0       0       0       0       0
  6208 ;;      Totals:         0       0       0       0       0
  6209 ;;Total ram usage:        0 bytes
  6210 ;; Hardware stack levels used:    1
  6211 ;; This function calls:
  6212 ;;		Nothing
  6213 ;; This function is called by:
  6214 ;;		_Write_Bytes_To_DS1307_RTC
  6215 ;;		_Read_Bytes_From_DS1307_RTC
  6216 ;;		_Write_Byte_To_DS1307_RTC
  6217 ;;		_Read_Byte_From_DS1307_RTC
  6218 ;; This function uses a non-reentrant model
  6219 ;;
  6220                           
  6221                           
  6222                           ;psect for function _I2C_Stop
  6223  14F7                     _I2C_Stop:	
  6224                           
  6225                           ;I2C.c: 39: PEN = 1;
  6226                           
  6227                           ;incstack = 0
  6228                           ; Regs used in _I2C_Stop: []
  6229  14F7  1683               	bsf	3,5	;RP0=1, select bank1
  6230  14F8  1303               	bcf	3,6	;RP1=0, select bank1
  6231  14F9  1511               	bsf	17,2	;volatile
  6232  14FA                     l331:	
  6233                           ;I2C.c: 40: while (!SSPIF);
  6234                           
  6235  14FA  1283               	bcf	3,5	;RP0=0, select bank0
  6236  14FB  1D8C               	btfss	12,3	;volatile
  6237  14FC  2CFA               	goto	l331
  6238                           
  6239                           ;I2C.c: 41: SSPIF = 0;
  6240  14FD  118C               	bcf	12,3	;volatile
  6241  14FE  0008               	return
  6242  14FF                     __end_of_I2C_Stop:	
  6243                           
  6244                           	psect	text23
  6245  14EF                     __ptext23:	
  6246 ;; *************** function _I2C_Start *****************
  6247 ;; Defined at:
  6248 ;;		line 20 in file "I2C.c"
  6249 ;; Parameters:    Size  Location     Type
  6250 ;;		None
  6251 ;; Auto vars:     Size  Location     Type
  6252 ;;		None
  6253 ;; Return value:  Size  Location     Type
  6254 ;;		None               void
  6255 ;; Registers used:
  6256 ;;		None
  6257 ;; Tracked objects:
  6258 ;;		On entry : 0/0
  6259 ;;		On exit  : 0/0
  6260 ;;		Unchanged: 0/0
  6261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6262 ;;      Params:         0       0       0       0       0
  6263 ;;      Locals:         0       0       0       0       0
  6264 ;;      Temps:          0       0       0       0       0
  6265 ;;      Totals:         0       0       0       0       0
  6266 ;;Total ram usage:        0 bytes
  6267 ;; Hardware stack levels used:    1
  6268 ;; This function calls:
  6269 ;;		Nothing
  6270 ;; This function is called by:
  6271 ;;		_Write_Bytes_To_DS1307_RTC
  6272 ;;		_Read_Bytes_From_DS1307_RTC
  6273 ;;		_Write_Byte_To_DS1307_RTC
  6274 ;;		_Read_Byte_From_DS1307_RTC
  6275 ;; This function uses a non-reentrant model
  6276 ;;
  6277                           
  6278                           
  6279                           ;psect for function _I2C_Start
  6280  14EF                     _I2C_Start:	
  6281                           
  6282                           ;I2C.c: 21: SEN = 1;
  6283                           
  6284                           ;incstack = 0
  6285                           ; Regs used in _I2C_Start: []
  6286  14EF  1683               	bsf	3,5	;RP0=1, select bank1
  6287  14F0  1303               	bcf	3,6	;RP1=0, select bank1
  6288  14F1  1411               	bsf	17,0	;volatile
  6289  14F2                     l319:	
  6290                           ;I2C.c: 22: while (!SSPIF);
  6291                           
  6292  14F2  1283               	bcf	3,5	;RP0=0, select bank0
  6293  14F3  1D8C               	btfss	12,3	;volatile
  6294  14F4  2CF2               	goto	l319
  6295                           
  6296                           ;I2C.c: 23: SSPIF = 0;
  6297  14F5  118C               	bcf	12,3	;volatile
  6298  14F6  0008               	return
  6299  14F7                     __end_of_I2C_Start:	
  6300                           
  6301                           	psect	text24
  6302  1519                     __ptext24:	
  6303 ;; *************** function _I2C_Send_NACK *****************
  6304 ;; Defined at:
  6305 ;;		line 58 in file "I2C.c"
  6306 ;; Parameters:    Size  Location     Type
  6307 ;;		None
  6308 ;; Auto vars:     Size  Location     Type
  6309 ;;		None
  6310 ;; Return value:  Size  Location     Type
  6311 ;;		None               void
  6312 ;; Registers used:
  6313 ;;		None
  6314 ;; Tracked objects:
  6315 ;;		On entry : 0/0
  6316 ;;		On exit  : 0/0
  6317 ;;		Unchanged: 0/0
  6318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6319 ;;      Params:         0       0       0       0       0
  6320 ;;      Locals:         0       0       0       0       0
  6321 ;;      Temps:          0       0       0       0       0
  6322 ;;      Totals:         0       0       0       0       0
  6323 ;;Total ram usage:        0 bytes
  6324 ;; Hardware stack levels used:    1
  6325 ;; This function calls:
  6326 ;;		Nothing
  6327 ;; This function is called by:
  6328 ;;		_Read_Bytes_From_DS1307_RTC
  6329 ;;		_Read_Byte_From_DS1307_RTC
  6330 ;; This function uses a non-reentrant model
  6331 ;;
  6332                           
  6333                           
  6334                           ;psect for function _I2C_Send_NACK
  6335  1519                     _I2C_Send_NACK:	
  6336                           
  6337                           ;I2C.c: 59: ACKDT = 1;
  6338                           
  6339                           ;incstack = 0
  6340                           ; Regs used in _I2C_Send_NACK: []
  6341  1519  1683               	bsf	3,5	;RP0=1, select bank1
  6342  151A  1303               	bcf	3,6	;RP1=0, select bank1
  6343  151B  1691               	bsf	17,5	;volatile
  6344                           
  6345                           ;I2C.c: 60: ACKEN = 1;
  6346  151C  1611               	bsf	17,4	;volatile
  6347  151D                     l343:	
  6348                           ;I2C.c: 61: while (!SSPIF);
  6349                           
  6350  151D  1283               	bcf	3,5	;RP0=0, select bank0
  6351  151E  1D8C               	btfss	12,3	;volatile
  6352  151F  2D1D               	goto	l343
  6353                           
  6354                           ;I2C.c: 62: SSPIF = 0;
  6355  1520  118C               	bcf	12,3	;volatile
  6356  1521  0008               	return
  6357  1522                     __end_of_I2C_Send_NACK:	
  6358                           
  6359                           	psect	text25
  6360  1510                     __ptext25:	
  6361 ;; *************** function _I2C_Send_ACK *****************
  6362 ;; Defined at:
  6363 ;;		line 48 in file "I2C.c"
  6364 ;; Parameters:    Size  Location     Type
  6365 ;;		None
  6366 ;; Auto vars:     Size  Location     Type
  6367 ;;		None
  6368 ;; Return value:  Size  Location     Type
  6369 ;;		None               void
  6370 ;; Registers used:
  6371 ;;		None
  6372 ;; Tracked objects:
  6373 ;;		On entry : 0/0
  6374 ;;		On exit  : 0/0
  6375 ;;		Unchanged: 0/0
  6376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6377 ;;      Params:         0       0       0       0       0
  6378 ;;      Locals:         0       0       0       0       0
  6379 ;;      Temps:          0       0       0       0       0
  6380 ;;      Totals:         0       0       0       0       0
  6381 ;;Total ram usage:        0 bytes
  6382 ;; Hardware stack levels used:    1
  6383 ;; This function calls:
  6384 ;;		Nothing
  6385 ;; This function is called by:
  6386 ;;		_Read_Bytes_From_DS1307_RTC
  6387 ;; This function uses a non-reentrant model
  6388 ;;
  6389                           
  6390                           
  6391                           ;psect for function _I2C_Send_ACK
  6392  1510                     _I2C_Send_ACK:	
  6393                           
  6394                           ;I2C.c: 49: ACKDT = 0;
  6395                           
  6396                           ;incstack = 0
  6397                           ; Regs used in _I2C_Send_ACK: []
  6398  1510  1683               	bsf	3,5	;RP0=1, select bank1
  6399  1511  1303               	bcf	3,6	;RP1=0, select bank1
  6400  1512  1291               	bcf	17,5	;volatile
  6401                           
  6402                           ;I2C.c: 50: ACKEN = 1;
  6403  1513  1611               	bsf	17,4	;volatile
  6404  1514                     l337:	
  6405                           ;I2C.c: 51: while (!SSPIF);
  6406                           
  6407  1514  1283               	bcf	3,5	;RP0=0, select bank0
  6408  1515  1D8C               	btfss	12,3	;volatile
  6409  1516  2D14               	goto	l337
  6410                           
  6411                           ;I2C.c: 52: SSPIF = 0;
  6412  1517  118C               	bcf	12,3	;volatile
  6413  1518  0008               	return
  6414  1519                     __end_of_I2C_Send_ACK:	
  6415                           
  6416                           	psect	text26
  6417  1507                     __ptext26:	
  6418 ;; *************** function _I2C_Read_Byte *****************
  6419 ;; Defined at:
  6420 ;;		line 79 in file "I2C.c"
  6421 ;; Parameters:    Size  Location     Type
  6422 ;;		None
  6423 ;; Auto vars:     Size  Location     Type
  6424 ;;		None
  6425 ;; Return value:  Size  Location     Type
  6426 ;;                  1    wreg      unsigned char 
  6427 ;; Registers used:
  6428 ;;		wreg
  6429 ;; Tracked objects:
  6430 ;;		On entry : 0/0
  6431 ;;		On exit  : 0/0
  6432 ;;		Unchanged: 0/0
  6433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6434 ;;      Params:         0       0       0       0       0
  6435 ;;      Locals:         0       0       0       0       0
  6436 ;;      Temps:          0       0       0       0       0
  6437 ;;      Totals:         0       0       0       0       0
  6438 ;;Total ram usage:        0 bytes
  6439 ;; Hardware stack levels used:    1
  6440 ;; This function calls:
  6441 ;;		Nothing
  6442 ;; This function is called by:
  6443 ;;		_Read_Bytes_From_DS1307_RTC
  6444 ;;		_Read_Byte_From_DS1307_RTC
  6445 ;; This function uses a non-reentrant model
  6446 ;;
  6447                           
  6448                           
  6449                           ;psect for function _I2C_Read_Byte
  6450  1507                     _I2C_Read_Byte:	
  6451                           
  6452                           ;I2C.c: 80: RCEN = 1;
  6453                           
  6454                           ;incstack = 0
  6455                           ; Regs used in _I2C_Read_Byte: [wreg]
  6456  1507  1683               	bsf	3,5	;RP0=1, select bank1
  6457  1508  1303               	bcf	3,6	;RP1=0, select bank1
  6458  1509  1591               	bsf	17,3	;volatile
  6459  150A                     l355:	
  6460                           ;I2C.c: 81: while (!SSPIF);
  6461                           
  6462  150A  1283               	bcf	3,5	;RP0=0, select bank0
  6463  150B  1D8C               	btfss	12,3	;volatile
  6464  150C  2D0A               	goto	l355
  6465                           
  6466                           ;I2C.c: 82: SSPIF = 0;
  6467  150D  118C               	bcf	12,3	;volatile
  6468                           
  6469                           ;I2C.c: 83: return SSPBUF;
  6470  150E  0813               	movf	19,w	;volatile
  6471  150F  0008               	return
  6472  1510                     __end_of_I2C_Read_Byte:	
  6473                           
  6474                           	psect	text27
  6475  14E7                     __ptext27:	
  6476 ;; *************** function _I2C_ReStart *****************
  6477 ;; Defined at:
  6478 ;;		line 29 in file "I2C.c"
  6479 ;; Parameters:    Size  Location     Type
  6480 ;;		None
  6481 ;; Auto vars:     Size  Location     Type
  6482 ;;		None
  6483 ;; Return value:  Size  Location     Type
  6484 ;;		None               void
  6485 ;; Registers used:
  6486 ;;		None
  6487 ;; Tracked objects:
  6488 ;;		On entry : 0/0
  6489 ;;		On exit  : 0/0
  6490 ;;		Unchanged: 0/0
  6491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6492 ;;      Params:         0       0       0       0       0
  6493 ;;      Locals:         0       0       0       0       0
  6494 ;;      Temps:          0       0       0       0       0
  6495 ;;      Totals:         0       0       0       0       0
  6496 ;;Total ram usage:        0 bytes
  6497 ;; Hardware stack levels used:    1
  6498 ;; This function calls:
  6499 ;;		Nothing
  6500 ;; This function is called by:
  6501 ;;		_Read_Bytes_From_DS1307_RTC
  6502 ;;		_Read_Byte_From_DS1307_RTC
  6503 ;; This function uses a non-reentrant model
  6504 ;;
  6505                           
  6506                           
  6507                           ;psect for function _I2C_ReStart
  6508  14E7                     _I2C_ReStart:	
  6509                           
  6510                           ;I2C.c: 30: RSEN = 1;
  6511                           
  6512                           ;incstack = 0
  6513                           ; Regs used in _I2C_ReStart: []
  6514  14E7  1683               	bsf	3,5	;RP0=1, select bank1
  6515  14E8  1303               	bcf	3,6	;RP1=0, select bank1
  6516  14E9  1491               	bsf	17,1	;volatile
  6517  14EA                     l325:	
  6518                           ;I2C.c: 31: while (!SSPIF);
  6519                           
  6520  14EA  1283               	bcf	3,5	;RP0=0, select bank0
  6521  14EB  1D8C               	btfss	12,3	;volatile
  6522  14EC  2CEA               	goto	l325
  6523                           
  6524                           ;I2C.c: 32: SSPIF = 0;
  6525  14ED  118C               	bcf	12,3	;volatile
  6526  14EE  0008               	return
  6527  14EF                     __end_of_I2C_ReStart:	
  6528                           
  6529                           	psect	text28
  6530  0034                     __ptext28:	
  6531 ;; *************** function _DisplayTimeToLCD *****************
  6532 ;; Defined at:
  6533 ;;		line 93 in file "LCD.c"
  6534 ;; Parameters:    Size  Location     Type
  6535 ;;  pTimeArray      1    wreg     PTR unsigned char 
  6536 ;;		 -> pRTCArray(4), 
  6537 ;; Auto vars:     Size  Location     Type
  6538 ;;  pTimeArray      1   11[COMMON] PTR unsigned char 
  6539 ;;		 -> pRTCArray(4), 
  6540 ;; Return value:  Size  Location     Type
  6541 ;;		None               void
  6542 ;; Registers used:
  6543 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6544 ;; Tracked objects:
  6545 ;;		On entry : 0/0
  6546 ;;		On exit  : 0/0
  6547 ;;		Unchanged: 0/0
  6548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6549 ;;      Params:         0       0       0       0       0
  6550 ;;      Locals:         1       0       0       0       0
  6551 ;;      Temps:          2       0       0       0       0
  6552 ;;      Totals:         3       0       0       0       0
  6553 ;;Total ram usage:        3 bytes
  6554 ;; Hardware stack levels used:    1
  6555 ;; Hardware stack levels required when called:    3
  6556 ;; This function calls:
  6557 ;;		_WriteCommandToLCD
  6558 ;;		_WriteDataToLCD
  6559 ;;		_WriteStringToLCD
  6560 ;;		___awdiv
  6561 ;;		___awmod
  6562 ;; This function is called by:
  6563 ;;		_displayState1
  6564 ;; This function uses a non-reentrant model
  6565 ;;
  6566                           
  6567                           
  6568                           ;psect for function _DisplayTimeToLCD
  6569  0034                     _DisplayTimeToLCD:	
  6570                           
  6571                           ;incstack = 0
  6572                           ; Regs used in _DisplayTimeToLCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6573                           ;DisplayTimeToLCD@pTimeArray stored from wreg
  6574  0034  00FB               	movwf	DisplayTimeToLCD@pTimeArray
  6575                           
  6576                           ;LCD.c: 98: if (pTimeArray[2] % 10 == 0) {
  6577  0035  300A               	movlw	10
  6578  0036  00F0               	movwf	___awmod@divisor
  6579  0037  3000               	movlw	0
  6580  0038  00F1               	movwf	___awmod@divisor+1
  6581  0039  087B               	movf	DisplayTimeToLCD@pTimeArray,w
  6582  003A  3E02               	addlw	2
  6583  003B  0084               	movwf	4
  6584  003C  1383               	bcf	3,7	;select IRP bank0
  6585  003D  0800               	movf	0,w
  6586  003E  00F9               	movwf	??_DisplayTimeToLCD
  6587  003F  01FA               	clrf	??_DisplayTimeToLCD+1
  6588  0040  0879               	movf	??_DisplayTimeToLCD,w
  6589  0041  00F2               	movwf	___awmod@dividend
  6590  0042  087A               	movf	??_DisplayTimeToLCD+1,w
  6591  0043  00F3               	movwf	___awmod@dividend+1
  6592  0044  160A  118A  2697  120A  118A  	fcall	___awmod
  6593  0049  0870               	movf	?___awmod,w
  6594  004A  0471               	iorwf	?___awmod+1,w
  6595  004B  1D03               	btfss	3,2
  6596  004C  286E               	goto	l2540
  6597                           
  6598                           ;LCD.c: 99: WriteCommandToLCD(0x80);
  6599  004D  3080               	movlw	128
  6600  004E  160A  118A  25F9  120A  118A  	fcall	_WriteCommandToLCD
  6601                           
  6602                           ;LCD.c: 100: WriteDataToLCD((pTimeArray[2] / 10) + 0x30);
  6603  0053  300A               	movlw	10
  6604  0054  00F0               	movwf	___awdiv@divisor
  6605  0055  3000               	movlw	0
  6606  0056  00F1               	movwf	___awdiv@divisor+1
  6607  0057  087B               	movf	DisplayTimeToLCD@pTimeArray,w
  6608  0058  3E02               	addlw	2
  6609  0059  0084               	movwf	4
  6610  005A  1383               	bcf	3,7	;select IRP bank0
  6611  005B  0800               	movf	0,w
  6612  005C  00F9               	movwf	??_DisplayTimeToLCD
  6613  005D  01FA               	clrf	??_DisplayTimeToLCD+1
  6614  005E  0879               	movf	??_DisplayTimeToLCD,w
  6615  005F  00F2               	movwf	___awdiv@dividend
  6616  0060  087A               	movf	??_DisplayTimeToLCD+1,w
  6617  0061  00F3               	movwf	___awdiv@dividend+1
  6618  0062  160A  118A  26E2  120A  118A  	fcall	___awdiv
  6619  0067  0870               	movf	?___awdiv,w
  6620  0068  3E30               	addlw	48
  6621  0069  120A  118A  200A  120A  118A  	fcall	_WriteDataToLCD
  6622  006E                     l2540:	
  6623                           
  6624                           ;LCD.c: 101: }
  6625                           ;LCD.c: 102: if (pTimeArray[1] / 10 == 0) {
  6626  006E  300A               	movlw	10
  6627  006F  00F0               	movwf	___awdiv@divisor
  6628  0070  3000               	movlw	0
  6629  0071  00F1               	movwf	___awdiv@divisor+1
  6630  0072  0A7B               	incf	DisplayTimeToLCD@pTimeArray,w
  6631  0073  0084               	movwf	4
  6632  0074  1383               	bcf	3,7	;select IRP bank0
  6633  0075  0800               	movf	0,w
  6634  0076  00F9               	movwf	??_DisplayTimeToLCD
  6635  0077  01FA               	clrf	??_DisplayTimeToLCD+1
  6636  0078  0879               	movf	??_DisplayTimeToLCD,w
  6637  0079  00F2               	movwf	___awdiv@dividend
  6638  007A  087A               	movf	??_DisplayTimeToLCD+1,w
  6639  007B  00F3               	movwf	___awdiv@dividend+1
  6640  007C  160A  118A  26E2  120A  118A  	fcall	___awdiv
  6641  0081  0870               	movf	?___awdiv,w
  6642  0082  0471               	iorwf	?___awdiv+1,w
  6643  0083  1D03               	btfss	3,2
  6644  0084  28A6               	goto	l2546
  6645                           
  6646                           ;LCD.c: 103: WriteCommandToLCD(0x80 + 1);
  6647  0085  3081               	movlw	129
  6648  0086  160A  118A  25F9  120A  118A  	fcall	_WriteCommandToLCD
  6649                           
  6650                           ;LCD.c: 104: WriteDataToLCD((pTimeArray[2] % 10) + 0x30);
  6651  008B  300A               	movlw	10
  6652  008C  00F0               	movwf	___awmod@divisor
  6653  008D  3000               	movlw	0
  6654  008E  00F1               	movwf	___awmod@divisor+1
  6655  008F  087B               	movf	DisplayTimeToLCD@pTimeArray,w
  6656  0090  3E02               	addlw	2
  6657  0091  0084               	movwf	4
  6658  0092  1383               	bcf	3,7	;select IRP bank0
  6659  0093  0800               	movf	0,w
  6660  0094  00F9               	movwf	??_DisplayTimeToLCD
  6661  0095  01FA               	clrf	??_DisplayTimeToLCD+1
  6662  0096  0879               	movf	??_DisplayTimeToLCD,w
  6663  0097  00F2               	movwf	___awmod@dividend
  6664  0098  087A               	movf	??_DisplayTimeToLCD+1,w
  6665  0099  00F3               	movwf	___awmod@dividend+1
  6666  009A  160A  118A  2697  120A  118A  	fcall	___awmod
  6667  009F  0870               	movf	?___awmod,w
  6668  00A0  3E30               	addlw	48
  6669  00A1  120A  118A  200A  120A  118A  	fcall	_WriteDataToLCD
  6670  00A6                     l2546:	
  6671                           
  6672                           ;LCD.c: 105: }
  6673                           ;LCD.c: 107: WriteCommandToLCD(0x80 + 2);
  6674  00A6  3082               	movlw	130
  6675  00A7  160A  118A  25F9  120A  118A  	fcall	_WriteCommandToLCD
  6676                           
  6677                           ;LCD.c: 108: WriteDataToLCD(':');
  6678  00AC  303A               	movlw	58
  6679  00AD  120A  118A  200A  120A  118A  	fcall	_WriteDataToLCD
  6680                           
  6681                           ;LCD.c: 111: if (pTimeArray[1] % 10 == 0) {
  6682  00B2  300A               	movlw	10
  6683  00B3  00F0               	movwf	___awmod@divisor
  6684  00B4  3000               	movlw	0
  6685  00B5  00F1               	movwf	___awmod@divisor+1
  6686  00B6  0A7B               	incf	DisplayTimeToLCD@pTimeArray,w
  6687  00B7  0084               	movwf	4
  6688  00B8  1383               	bcf	3,7	;select IRP bank0
  6689  00B9  0800               	movf	0,w
  6690  00BA  00F9               	movwf	??_DisplayTimeToLCD
  6691  00BB  01FA               	clrf	??_DisplayTimeToLCD+1
  6692  00BC  0879               	movf	??_DisplayTimeToLCD,w
  6693  00BD  00F2               	movwf	___awmod@dividend
  6694  00BE  087A               	movf	??_DisplayTimeToLCD+1,w
  6695  00BF  00F3               	movwf	___awmod@dividend+1
  6696  00C0  160A  118A  2697  120A  118A  	fcall	___awmod
  6697  00C5  0870               	movf	?___awmod,w
  6698  00C6  0471               	iorwf	?___awmod+1,w
  6699  00C7  1D03               	btfss	3,2
  6700  00C8  28E9               	goto	l2556
  6701                           
  6702                           ;LCD.c: 112: WriteCommandToLCD(0x80 + 3);
  6703  00C9  3083               	movlw	131
  6704  00CA  160A  118A  25F9  120A  118A  	fcall	_WriteCommandToLCD
  6705                           
  6706                           ;LCD.c: 113: WriteDataToLCD((pTimeArray[1] / 10) + 0x30);
  6707  00CF  300A               	movlw	10
  6708  00D0  00F0               	movwf	___awdiv@divisor
  6709  00D1  3000               	movlw	0
  6710  00D2  00F1               	movwf	___awdiv@divisor+1
  6711  00D3  0A7B               	incf	DisplayTimeToLCD@pTimeArray,w
  6712  00D4  0084               	movwf	4
  6713  00D5  1383               	bcf	3,7	;select IRP bank0
  6714  00D6  0800               	movf	0,w
  6715  00D7  00F9               	movwf	??_DisplayTimeToLCD
  6716  00D8  01FA               	clrf	??_DisplayTimeToLCD+1
  6717  00D9  0879               	movf	??_DisplayTimeToLCD,w
  6718  00DA  00F2               	movwf	___awdiv@dividend
  6719  00DB  087A               	movf	??_DisplayTimeToLCD+1,w
  6720  00DC  00F3               	movwf	___awdiv@dividend+1
  6721  00DD  160A  118A  26E2  120A  118A  	fcall	___awdiv
  6722  00E2  0870               	movf	?___awdiv,w
  6723  00E3  3E30               	addlw	48
  6724  00E4  120A  118A  200A  120A  118A  	fcall	_WriteDataToLCD
  6725  00E9                     l2556:	
  6726                           
  6727                           ;LCD.c: 114: }
  6728                           ;LCD.c: 115: if (pTimeArray[0] / 10 == 0) {
  6729  00E9  300A               	movlw	10
  6730  00EA  00F0               	movwf	___awdiv@divisor
  6731  00EB  3000               	movlw	0
  6732  00EC  00F1               	movwf	___awdiv@divisor+1
  6733  00ED  087B               	movf	DisplayTimeToLCD@pTimeArray,w
  6734  00EE  0084               	movwf	4
  6735  00EF  1383               	bcf	3,7	;select IRP bank0
  6736  00F0  0800               	movf	0,w
  6737  00F1  00F9               	movwf	??_DisplayTimeToLCD
  6738  00F2  01FA               	clrf	??_DisplayTimeToLCD+1
  6739  00F3  0879               	movf	??_DisplayTimeToLCD,w
  6740  00F4  00F2               	movwf	___awdiv@dividend
  6741  00F5  087A               	movf	??_DisplayTimeToLCD+1,w
  6742  00F6  00F3               	movwf	___awdiv@dividend+1
  6743  00F7  160A  118A  26E2  120A  118A  	fcall	___awdiv
  6744  00FC  0870               	movf	?___awdiv,w
  6745  00FD  0471               	iorwf	?___awdiv+1,w
  6746  00FE  1D03               	btfss	3,2
  6747  00FF  2920               	goto	l2562
  6748                           
  6749                           ;LCD.c: 116: WriteCommandToLCD(0x80 + 4);
  6750  0100  3084               	movlw	132
  6751  0101  160A  118A  25F9  120A  118A  	fcall	_WriteCommandToLCD
  6752                           
  6753                           ;LCD.c: 117: WriteDataToLCD((pTimeArray[1] % 10) + 0x30);
  6754  0106  300A               	movlw	10
  6755  0107  00F0               	movwf	___awmod@divisor
  6756  0108  3000               	movlw	0
  6757  0109  00F1               	movwf	___awmod@divisor+1
  6758  010A  0A7B               	incf	DisplayTimeToLCD@pTimeArray,w
  6759  010B  0084               	movwf	4
  6760  010C  1383               	bcf	3,7	;select IRP bank0
  6761  010D  0800               	movf	0,w
  6762  010E  00F9               	movwf	??_DisplayTimeToLCD
  6763  010F  01FA               	clrf	??_DisplayTimeToLCD+1
  6764  0110  0879               	movf	??_DisplayTimeToLCD,w
  6765  0111  00F2               	movwf	___awmod@dividend
  6766  0112  087A               	movf	??_DisplayTimeToLCD+1,w
  6767  0113  00F3               	movwf	___awmod@dividend+1
  6768  0114  160A  118A  2697  120A  118A  	fcall	___awmod
  6769  0119  0870               	movf	?___awmod,w
  6770  011A  3E30               	addlw	48
  6771  011B  120A  118A  200A  120A  118A  	fcall	_WriteDataToLCD
  6772  0120                     l2562:	
  6773                           
  6774                           ;LCD.c: 118: }
  6775                           ;LCD.c: 120: WriteCommandToLCD(0x80 + 5);
  6776  0120  3085               	movlw	133
  6777  0121  160A  118A  25F9  120A  118A  	fcall	_WriteCommandToLCD
  6778                           
  6779                           ;LCD.c: 121: WriteDataToLCD(':');
  6780  0126  303A               	movlw	58
  6781  0127  120A  118A  200A  120A  118A  	fcall	_WriteDataToLCD
  6782                           
  6783                           ;LCD.c: 124: if (pTimeArray[0] % 10 == 0) {
  6784  012C  300A               	movlw	10
  6785  012D  00F0               	movwf	___awmod@divisor
  6786  012E  3000               	movlw	0
  6787  012F  00F1               	movwf	___awmod@divisor+1
  6788  0130  087B               	movf	DisplayTimeToLCD@pTimeArray,w
  6789  0131  0084               	movwf	4
  6790  0132  1383               	bcf	3,7	;select IRP bank0
  6791  0133  0800               	movf	0,w
  6792  0134  00F9               	movwf	??_DisplayTimeToLCD
  6793  0135  01FA               	clrf	??_DisplayTimeToLCD+1
  6794  0136  0879               	movf	??_DisplayTimeToLCD,w
  6795  0137  00F2               	movwf	___awmod@dividend
  6796  0138  087A               	movf	??_DisplayTimeToLCD+1,w
  6797  0139  00F3               	movwf	___awmod@dividend+1
  6798  013A  160A  118A  2697  120A  118A  	fcall	___awmod
  6799  013F  0870               	movf	?___awmod,w
  6800  0140  0471               	iorwf	?___awmod+1,w
  6801  0141  1D03               	btfss	3,2
  6802  0142  2963               	goto	l2572
  6803                           
  6804                           ;LCD.c: 125: WriteCommandToLCD(0x80 + 6);
  6805  0143  3086               	movlw	134
  6806  0144  160A  118A  25F9  120A  118A  	fcall	_WriteCommandToLCD
  6807                           
  6808                           ;LCD.c: 126: WriteDataToLCD((pTimeArray[0] / 10) + 0x30);
  6809  0149  300A               	movlw	10
  6810  014A  00F0               	movwf	___awdiv@divisor
  6811  014B  3000               	movlw	0
  6812  014C  00F1               	movwf	___awdiv@divisor+1
  6813  014D  087B               	movf	DisplayTimeToLCD@pTimeArray,w
  6814  014E  0084               	movwf	4
  6815  014F  1383               	bcf	3,7	;select IRP bank0
  6816  0150  0800               	movf	0,w
  6817  0151  00F9               	movwf	??_DisplayTimeToLCD
  6818  0152  01FA               	clrf	??_DisplayTimeToLCD+1
  6819  0153  0879               	movf	??_DisplayTimeToLCD,w
  6820  0154  00F2               	movwf	___awdiv@dividend
  6821  0155  087A               	movf	??_DisplayTimeToLCD+1,w
  6822  0156  00F3               	movwf	___awdiv@dividend+1
  6823  0157  160A  118A  26E2  120A  118A  	fcall	___awdiv
  6824  015C  0870               	movf	?___awdiv,w
  6825  015D  3E30               	addlw	48
  6826  015E  120A  118A  200A  120A  118A  	fcall	_WriteDataToLCD
  6827  0163                     l2572:	
  6828                           
  6829                           ;LCD.c: 127: }
  6830                           ;LCD.c: 128: WriteCommandToLCD(0x80 + 7);
  6831  0163  3087               	movlw	135
  6832  0164  160A  118A  25F9  120A  118A  	fcall	_WriteCommandToLCD
  6833                           
  6834                           ;LCD.c: 129: WriteDataToLCD((pTimeArray[0] % 10) + 0x30);
  6835  0169  300A               	movlw	10
  6836  016A  00F0               	movwf	___awmod@divisor
  6837  016B  3000               	movlw	0
  6838  016C  00F1               	movwf	___awmod@divisor+1
  6839  016D  087B               	movf	DisplayTimeToLCD@pTimeArray,w
  6840  016E  0084               	movwf	4
  6841  016F  1383               	bcf	3,7	;select IRP bank0
  6842  0170  0800               	movf	0,w
  6843  0171  00F9               	movwf	??_DisplayTimeToLCD
  6844  0172  01FA               	clrf	??_DisplayTimeToLCD+1
  6845  0173  0879               	movf	??_DisplayTimeToLCD,w
  6846  0174  00F2               	movwf	___awmod@dividend
  6847  0175  087A               	movf	??_DisplayTimeToLCD+1,w
  6848  0176  00F3               	movwf	___awmod@dividend+1
  6849  0177  160A  118A  2697  120A  118A  	fcall	___awmod
  6850  017C  0870               	movf	?___awmod,w
  6851  017D  3E30               	addlw	48
  6852  017E  120A  118A  200A  120A  118A  	fcall	_WriteDataToLCD
  6853                           
  6854                           ;LCD.c: 132: WriteDataToLCD(' ');
  6855  0183  3020               	movlw	32
  6856  0184  120A  118A  200A  120A  118A  	fcall	_WriteDataToLCD
  6857                           
  6858                           ;LCD.c: 135: switch (pTimeArray[3]) {
  6859  0189  299F               	goto	l2584
  6860  018A                     l2576:	
  6861                           ;LCD.c: 136: case 0: WriteStringToLCD("AM");
  6862                           
  6863  018A  3005               	movlw	low (STR_39| (0+32768))
  6864  018B  00F4               	movwf	WriteStringToLCD@s
  6865  018C  3091               	movlw	high (STR_39| (0+32768))
  6866  018D  00F5               	movwf	WriteStringToLCD@s+1
  6867  018E  160A  118A  25AF   	fcall	_WriteStringToLCD
  6868                           
  6869                           ;LCD.c: 137: break;
  6870  0191  0008               	return
  6871  0192                     l2578:	
  6872                           ;LCD.c: 138: case 1: WriteStringToLCD("PM");
  6873                           
  6874  0192  3008               	movlw	low (STR_40| (0+32768))
  6875  0193  00F4               	movwf	WriteStringToLCD@s
  6876  0194  3091               	movlw	high (STR_40| (0+32768))
  6877  0195  00F5               	movwf	WriteStringToLCD@s+1
  6878  0196  160A  118A  25AF   	fcall	_WriteStringToLCD
  6879                           
  6880                           ;LCD.c: 139: break;
  6881  0199  0008               	return
  6882  019A                     l2580:	
  6883                           ;LCD.c: 141: default: WriteDataToLCD('H');
  6884                           
  6885  019A  3048               	movlw	72
  6886  019B  120A  118A  200A   	fcall	_WriteDataToLCD
  6887                           
  6888                           ;LCD.c: 144: }
  6889                           
  6890                           ;LCD.c: 143: break;
  6891  019E  0008               	return
  6892  019F                     l2584:	
  6893  019F  087B               	movf	DisplayTimeToLCD@pTimeArray,w
  6894  01A0  3E03               	addlw	3
  6895  01A1  0084               	movwf	4
  6896  01A2  1383               	bcf	3,7	;select IRP bank0
  6897  01A3  0800               	movf	0,w
  6898                           
  6899                           ; Switch size 1, requested type "space"
  6900                           ; Number of cases is 2, Range of values is 0 to 1
  6901                           ; switch strategies available:
  6902                           ; Name         Instructions Cycles
  6903                           ; simple_byte            7     4 (average)
  6904                           ; direct_byte           14     8 (fixed)
  6905                           ; jumptable            260     6 (fixed)
  6906                           ;	Chosen strategy is simple_byte
  6907  01A4  3A00               	xorlw	0	; case 0
  6908  01A5  1903               	skipnz
  6909  01A6  298A               	goto	l2576
  6910  01A7  3A01               	xorlw	1	; case 1
  6911  01A8  1903               	skipnz
  6912  01A9  2992               	goto	l2578
  6913  01AA  299A               	goto	l2580
  6914  01AB  0008               	return
  6915  01AC                     __end_of_DisplayTimeToLCD:	
  6916                           
  6917                           	psect	text29
  6918  0EEB                     __ptext29:	
  6919 ;; *************** function _DisplayDateOnLCD *****************
  6920 ;; Defined at:
  6921 ;;		line 148 in file "LCD.c"
  6922 ;; Parameters:    Size  Location     Type
  6923 ;;  pDateArray      1    wreg     PTR unsigned char 
  6924 ;;		 -> pRTCArray(4), 
  6925 ;; Auto vars:     Size  Location     Type
  6926 ;;  pDateArray      1   11[COMMON] PTR unsigned char 
  6927 ;;		 -> pRTCArray(4), 
  6928 ;; Return value:  Size  Location     Type
  6929 ;;		None               void
  6930 ;; Registers used:
  6931 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6932 ;; Tracked objects:
  6933 ;;		On entry : 0/0
  6934 ;;		On exit  : 0/0
  6935 ;;		Unchanged: 0/0
  6936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6937 ;;      Params:         0       0       0       0       0
  6938 ;;      Locals:         1       0       0       0       0
  6939 ;;      Temps:          2       0       0       0       0
  6940 ;;      Totals:         3       0       0       0       0
  6941 ;;Total ram usage:        3 bytes
  6942 ;; Hardware stack levels used:    1
  6943 ;; Hardware stack levels required when called:    3
  6944 ;; This function calls:
  6945 ;;		_WriteCommandToLCD
  6946 ;;		_WriteDataToLCD
  6947 ;;		_WriteStringToLCD
  6948 ;;		___awdiv
  6949 ;;		___awmod
  6950 ;; This function is called by:
  6951 ;;		_displayState1
  6952 ;; This function uses a non-reentrant model
  6953 ;;
  6954                           
  6955                           
  6956                           ;psect for function _DisplayDateOnLCD
  6957  0EEB                     _DisplayDateOnLCD:	
  6958                           
  6959                           ;incstack = 0
  6960                           ; Regs used in _DisplayDateOnLCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6961                           ;DisplayDateOnLCD@pDateArray stored from wreg
  6962  0EEB  00FB               	movwf	DisplayDateOnLCD@pDateArray
  6963                           
  6964                           ;LCD.c: 150: WriteCommandToLCD(0xc0);
  6965  0EEC  30C0               	movlw	192
  6966  0EED  160A  118A  25F9  120A  158A  	fcall	_WriteCommandToLCD
  6967                           
  6968                           ;LCD.c: 153: WriteDataToLCD((pDateArray[1] / 10) + 0x30);
  6969  0EF2  300A               	movlw	10
  6970  0EF3  00F0               	movwf	___awdiv@divisor
  6971  0EF4  3000               	movlw	0
  6972  0EF5  00F1               	movwf	___awdiv@divisor+1
  6973  0EF6  0A7B               	incf	DisplayDateOnLCD@pDateArray,w
  6974  0EF7  0084               	movwf	4
  6975  0EF8  1383               	bcf	3,7	;select IRP bank0
  6976  0EF9  0800               	movf	0,w
  6977  0EFA  00F9               	movwf	??_DisplayDateOnLCD
  6978  0EFB  01FA               	clrf	??_DisplayDateOnLCD+1
  6979  0EFC  0879               	movf	??_DisplayDateOnLCD,w
  6980  0EFD  00F2               	movwf	___awdiv@dividend
  6981  0EFE  087A               	movf	??_DisplayDateOnLCD+1,w
  6982  0EFF  00F3               	movwf	___awdiv@dividend+1
  6983  0F00  160A  118A  26E2  120A  158A  	fcall	___awdiv
  6984  0F05  0870               	movf	?___awdiv,w
  6985  0F06  3E30               	addlw	48
  6986  0F07  120A  118A  200A  120A  158A  	fcall	_WriteDataToLCD
  6987                           
  6988                           ;LCD.c: 154: WriteDataToLCD((pDateArray[1] % 10) + 0x30);
  6989  0F0C  300A               	movlw	10
  6990  0F0D  00F0               	movwf	___awmod@divisor
  6991  0F0E  3000               	movlw	0
  6992  0F0F  00F1               	movwf	___awmod@divisor+1
  6993  0F10  0A7B               	incf	DisplayDateOnLCD@pDateArray,w
  6994  0F11  0084               	movwf	4
  6995  0F12  1383               	bcf	3,7	;select IRP bank0
  6996  0F13  0800               	movf	0,w
  6997  0F14  00F9               	movwf	??_DisplayDateOnLCD
  6998  0F15  01FA               	clrf	??_DisplayDateOnLCD+1
  6999  0F16  0879               	movf	??_DisplayDateOnLCD,w
  7000  0F17  00F2               	movwf	___awmod@dividend
  7001  0F18  087A               	movf	??_DisplayDateOnLCD+1,w
  7002  0F19  00F3               	movwf	___awmod@dividend+1
  7003  0F1A  160A  118A  2697  120A  158A  	fcall	___awmod
  7004  0F1F  0870               	movf	?___awmod,w
  7005  0F20  3E30               	addlw	48
  7006  0F21  120A  118A  200A  120A  158A  	fcall	_WriteDataToLCD
  7007                           
  7008                           ;LCD.c: 157: WriteDataToLCD('/');
  7009  0F26  302F               	movlw	47
  7010  0F27  120A  118A  200A  120A  158A  	fcall	_WriteDataToLCD
  7011                           
  7012                           ;LCD.c: 160: WriteDataToLCD((pDateArray[2] / 10) + 0x30);
  7013  0F2C  300A               	movlw	10
  7014  0F2D  00F0               	movwf	___awdiv@divisor
  7015  0F2E  3000               	movlw	0
  7016  0F2F  00F1               	movwf	___awdiv@divisor+1
  7017  0F30  087B               	movf	DisplayDateOnLCD@pDateArray,w
  7018  0F31  3E02               	addlw	2
  7019  0F32  0084               	movwf	4
  7020  0F33  1383               	bcf	3,7	;select IRP bank0
  7021  0F34  0800               	movf	0,w
  7022  0F35  00F9               	movwf	??_DisplayDateOnLCD
  7023  0F36  01FA               	clrf	??_DisplayDateOnLCD+1
  7024  0F37  0879               	movf	??_DisplayDateOnLCD,w
  7025  0F38  00F2               	movwf	___awdiv@dividend
  7026  0F39  087A               	movf	??_DisplayDateOnLCD+1,w
  7027  0F3A  00F3               	movwf	___awdiv@dividend+1
  7028  0F3B  160A  118A  26E2  120A  158A  	fcall	___awdiv
  7029  0F40  0870               	movf	?___awdiv,w
  7030  0F41  3E30               	addlw	48
  7031  0F42  120A  118A  200A  120A  158A  	fcall	_WriteDataToLCD
  7032                           
  7033                           ;LCD.c: 161: WriteDataToLCD((pDateArray[2] % 10) + 0x30);
  7034  0F47  300A               	movlw	10
  7035  0F48  00F0               	movwf	___awmod@divisor
  7036  0F49  3000               	movlw	0
  7037  0F4A  00F1               	movwf	___awmod@divisor+1
  7038  0F4B  087B               	movf	DisplayDateOnLCD@pDateArray,w
  7039  0F4C  3E02               	addlw	2
  7040  0F4D  0084               	movwf	4
  7041  0F4E  1383               	bcf	3,7	;select IRP bank0
  7042  0F4F  0800               	movf	0,w
  7043  0F50  00F9               	movwf	??_DisplayDateOnLCD
  7044  0F51  01FA               	clrf	??_DisplayDateOnLCD+1
  7045  0F52  0879               	movf	??_DisplayDateOnLCD,w
  7046  0F53  00F2               	movwf	___awmod@dividend
  7047  0F54  087A               	movf	??_DisplayDateOnLCD+1,w
  7048  0F55  00F3               	movwf	___awmod@dividend+1
  7049  0F56  160A  118A  2697  120A  158A  	fcall	___awmod
  7050  0F5B  0870               	movf	?___awmod,w
  7051  0F5C  3E30               	addlw	48
  7052  0F5D  120A  118A  200A  120A  158A  	fcall	_WriteDataToLCD
  7053                           
  7054                           ;LCD.c: 164: WriteDataToLCD('/');
  7055  0F62  302F               	movlw	47
  7056  0F63  120A  118A  200A  120A  158A  	fcall	_WriteDataToLCD
  7057                           
  7058                           ;LCD.c: 167: WriteDataToLCD((pDateArray[3] / 10) + 0x30);
  7059  0F68  300A               	movlw	10
  7060  0F69  00F0               	movwf	___awdiv@divisor
  7061  0F6A  3000               	movlw	0
  7062  0F6B  00F1               	movwf	___awdiv@divisor+1
  7063  0F6C  087B               	movf	DisplayDateOnLCD@pDateArray,w
  7064  0F6D  3E03               	addlw	3
  7065  0F6E  0084               	movwf	4
  7066  0F6F  1383               	bcf	3,7	;select IRP bank0
  7067  0F70  0800               	movf	0,w
  7068  0F71  00F9               	movwf	??_DisplayDateOnLCD
  7069  0F72  01FA               	clrf	??_DisplayDateOnLCD+1
  7070  0F73  0879               	movf	??_DisplayDateOnLCD,w
  7071  0F74  00F2               	movwf	___awdiv@dividend
  7072  0F75  087A               	movf	??_DisplayDateOnLCD+1,w
  7073  0F76  00F3               	movwf	___awdiv@dividend+1
  7074  0F77  160A  118A  26E2  120A  158A  	fcall	___awdiv
  7075  0F7C  0870               	movf	?___awdiv,w
  7076  0F7D  3E30               	addlw	48
  7077  0F7E  120A  118A  200A  120A  158A  	fcall	_WriteDataToLCD
  7078                           
  7079                           ;LCD.c: 168: WriteDataToLCD((pDateArray[3] % 10) + 0x30);
  7080  0F83  300A               	movlw	10
  7081  0F84  00F0               	movwf	___awmod@divisor
  7082  0F85  3000               	movlw	0
  7083  0F86  00F1               	movwf	___awmod@divisor+1
  7084  0F87  087B               	movf	DisplayDateOnLCD@pDateArray,w
  7085  0F88  3E03               	addlw	3
  7086  0F89  0084               	movwf	4
  7087  0F8A  1383               	bcf	3,7	;select IRP bank0
  7088  0F8B  0800               	movf	0,w
  7089  0F8C  00F9               	movwf	??_DisplayDateOnLCD
  7090  0F8D  01FA               	clrf	??_DisplayDateOnLCD+1
  7091  0F8E  0879               	movf	??_DisplayDateOnLCD,w
  7092  0F8F  00F2               	movwf	___awmod@dividend
  7093  0F90  087A               	movf	??_DisplayDateOnLCD+1,w
  7094  0F91  00F3               	movwf	___awmod@dividend+1
  7095  0F92  160A  118A  2697  120A  158A  	fcall	___awmod
  7096  0F97  0870               	movf	?___awmod,w
  7097  0F98  3E30               	addlw	48
  7098  0F99  120A  118A  200A  120A  158A  	fcall	_WriteDataToLCD
  7099                           
  7100                           ;LCD.c: 170: WriteDataToLCD(' ');
  7101  0F9E  3020               	movlw	32
  7102  0F9F  120A  118A  200A  120A  158A  	fcall	_WriteDataToLCD
  7103                           
  7104                           ;LCD.c: 173: switch (pDateArray[0]) {
  7105  0FA4  2FE5               	goto	l2636
  7106  0FA5                     l2618:	
  7107                           ;LCD.c: 174: case 1: WriteStringToLCD("MON");
  7108                           
  7109  0FA5  30F5               	movlw	low (STR_13| (0+32768))
  7110  0FA6  00F4               	movwf	WriteStringToLCD@s
  7111  0FA7  3090               	movlw	high (STR_13| (0+32768))
  7112  0FA8  00F5               	movwf	WriteStringToLCD@s+1
  7113  0FA9  160A  118A  25AF   	fcall	_WriteStringToLCD
  7114                           
  7115                           ;LCD.c: 175: break;
  7116  0FAC  0008               	return
  7117  0FAD                     l2620:	
  7118                           ;LCD.c: 176: case 2: WriteStringToLCD("TUE");
  7119                           
  7120  0FAD  30ED               	movlw	low (STR_14| (0+32768))
  7121  0FAE  00F4               	movwf	WriteStringToLCD@s
  7122  0FAF  3090               	movlw	high (STR_14| (0+32768))
  7123  0FB0  00F5               	movwf	WriteStringToLCD@s+1
  7124  0FB1  160A  118A  25AF   	fcall	_WriteStringToLCD
  7125                           
  7126                           ;LCD.c: 177: break;
  7127  0FB4  0008               	return
  7128  0FB5                     l2622:	
  7129                           ;LCD.c: 178: case 3: WriteStringToLCD("WED");
  7130                           
  7131  0FB5  30E9               	movlw	low (STR_15| (0+32768))
  7132  0FB6  00F4               	movwf	WriteStringToLCD@s
  7133  0FB7  3090               	movlw	high (STR_15| (0+32768))
  7134  0FB8  00F5               	movwf	WriteStringToLCD@s+1
  7135  0FB9  160A  118A  25AF   	fcall	_WriteStringToLCD
  7136                           
  7137                           ;LCD.c: 179: break;
  7138  0FBC  0008               	return
  7139  0FBD                     l2624:	
  7140                           ;LCD.c: 180: case 4: WriteStringToLCD("THU");
  7141                           
  7142  0FBD  3001               	movlw	low (STR_16| (0+32768))
  7143  0FBE  00F4               	movwf	WriteStringToLCD@s
  7144  0FBF  3091               	movlw	high (STR_16| (0+32768))
  7145  0FC0  00F5               	movwf	WriteStringToLCD@s+1
  7146  0FC1  160A  118A  25AF   	fcall	_WriteStringToLCD
  7147                           
  7148                           ;LCD.c: 181: break;
  7149  0FC4  0008               	return
  7150  0FC5                     l2626:	
  7151                           ;LCD.c: 182: case 5: WriteStringToLCD("FRI");
  7152                           
  7153  0FC5  30F1               	movlw	low (STR_17| (0+32768))
  7154  0FC6  00F4               	movwf	WriteStringToLCD@s
  7155  0FC7  3090               	movlw	high (STR_17| (0+32768))
  7156  0FC8  00F5               	movwf	WriteStringToLCD@s+1
  7157  0FC9  160A  118A  25AF   	fcall	_WriteStringToLCD
  7158                           
  7159                           ;LCD.c: 183: break;
  7160  0FCC  0008               	return
  7161  0FCD                     l2628:	
  7162                           ;LCD.c: 184: case 6: WriteStringToLCD("SAT");
  7163                           
  7164  0FCD  30FD               	movlw	low (STR_18| (0+32768))
  7165  0FCE  00F4               	movwf	WriteStringToLCD@s
  7166  0FCF  3090               	movlw	high (STR_18| (0+32768))
  7167  0FD0  00F5               	movwf	WriteStringToLCD@s+1
  7168  0FD1  160A  118A  25AF   	fcall	_WriteStringToLCD
  7169                           
  7170                           ;LCD.c: 185: break;
  7171  0FD4  0008               	return
  7172  0FD5                     l2630:	
  7173                           ;LCD.c: 186: case 7: WriteStringToLCD("SUN");
  7174                           
  7175  0FD5  30F9               	movlw	low (STR_19| (0+32768))
  7176  0FD6  00F4               	movwf	WriteStringToLCD@s
  7177  0FD7  3090               	movlw	high (STR_19| (0+32768))
  7178  0FD8  00F5               	movwf	WriteStringToLCD@s+1
  7179  0FD9  160A  118A  25AF   	fcall	_WriteStringToLCD
  7180                           
  7181                           ;LCD.c: 187: break;
  7182  0FDC  0008               	return
  7183  0FDD                     l2632:	
  7184                           ;LCD.c: 189: default: WriteStringToLCD("???");
  7185                           
  7186  0FDD  30E5               	movlw	low (STR_20| (0+32768))
  7187  0FDE  00F4               	movwf	WriteStringToLCD@s
  7188  0FDF  3090               	movlw	high (STR_20| (0+32768))
  7189  0FE0  00F5               	movwf	WriteStringToLCD@s+1
  7190  0FE1  160A  118A  25AF   	fcall	_WriteStringToLCD
  7191                           
  7192                           ;LCD.c: 192: }
  7193                           
  7194                           ;LCD.c: 191: break;
  7195  0FE4  0008               	return
  7196  0FE5                     l2636:	
  7197  0FE5  087B               	movf	DisplayDateOnLCD@pDateArray,w
  7198  0FE6  0084               	movwf	4
  7199  0FE7  1383               	bcf	3,7	;select IRP bank0
  7200  0FE8  0800               	movf	0,w
  7201                           
  7202                           ; Switch size 1, requested type "space"
  7203                           ; Number of cases is 7, Range of values is 1 to 7
  7204                           ; switch strategies available:
  7205                           ; Name         Instructions Cycles
  7206                           ; simple_byte           22    12 (average)
  7207                           ; direct_byte           32    11 (fixed)
  7208                           ; jumptable            263     9 (fixed)
  7209                           ;	Chosen strategy is simple_byte
  7210  0FE9  3A01               	xorlw	1	; case 1
  7211  0FEA  1903               	skipnz
  7212  0FEB  2FA5               	goto	l2618
  7213  0FEC  3A03               	xorlw	3	; case 2
  7214  0FED  1903               	skipnz
  7215  0FEE  2FAD               	goto	l2620
  7216  0FEF  3A01               	xorlw	1	; case 3
  7217  0FF0  1903               	skipnz
  7218  0FF1  2FB5               	goto	l2622
  7219  0FF2  3A07               	xorlw	7	; case 4
  7220  0FF3  1903               	skipnz
  7221  0FF4  2FBD               	goto	l2624
  7222  0FF5  3A01               	xorlw	1	; case 5
  7223  0FF6  1903               	skipnz
  7224  0FF7  2FC5               	goto	l2626
  7225  0FF8  3A03               	xorlw	3	; case 6
  7226  0FF9  1903               	skipnz
  7227  0FFA  2FCD               	goto	l2628
  7228  0FFB  3A01               	xorlw	1	; case 7
  7229  0FFC  1903               	skipnz
  7230  0FFD  2FD5               	goto	l2630
  7231  0FFE  2FDD               	goto	l2632
  7232  0FFF  0008               	return
  7233  1000                     __end_of_DisplayDateOnLCD:	
  7234                           
  7235                           	psect	text30
  7236  1697                     __ptext30:	
  7237 ;; *************** function ___awmod *****************
  7238 ;; Defined at:
  7239 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awmod.c"
  7240 ;; Parameters:    Size  Location     Type
  7241 ;;  divisor         2    0[COMMON] int 
  7242 ;;  dividend        2    2[COMMON] int 
  7243 ;; Auto vars:     Size  Location     Type
  7244 ;;  sign            1    6[COMMON] unsigned char 
  7245 ;;  counter         1    5[COMMON] unsigned char 
  7246 ;; Return value:  Size  Location     Type
  7247 ;;                  2    0[COMMON] int 
  7248 ;; Registers used:
  7249 ;;		wreg, status,2, status,0
  7250 ;; Tracked objects:
  7251 ;;		On entry : 0/0
  7252 ;;		On exit  : 0/0
  7253 ;;		Unchanged: 0/0
  7254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7255 ;;      Params:         4       0       0       0       0
  7256 ;;      Locals:         2       0       0       0       0
  7257 ;;      Temps:          1       0       0       0       0
  7258 ;;      Totals:         7       0       0       0       0
  7259 ;;Total ram usage:        7 bytes
  7260 ;; Hardware stack levels used:    1
  7261 ;; This function calls:
  7262 ;;		Nothing
  7263 ;; This function is called by:
  7264 ;;		_Set_DS1307_RTC_Time
  7265 ;;		_Set_DS1307_RTC_Date
  7266 ;;		_DisplayTimeToLCD
  7267 ;;		_DisplayDateOnLCD
  7268 ;;		_WriteTempToLCD
  7269 ;;		_DisplayFirstTimeToLCD
  7270 ;; This function uses a non-reentrant model
  7271 ;;
  7272                           
  7273                           
  7274                           ;psect for function ___awmod
  7275  1697                     ___awmod:	
  7276                           
  7277                           ;incstack = 0
  7278                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  7279  1697  01F6               	clrf	___awmod@sign
  7280  1698  1FF3               	btfss	___awmod@dividend+1,7
  7281  1699  2EA1               	goto	l2420
  7282  169A  09F2               	comf	___awmod@dividend,f
  7283  169B  09F3               	comf	___awmod@dividend+1,f
  7284  169C  0AF2               	incf	___awmod@dividend,f
  7285  169D  1903               	skipnz
  7286  169E  0AF3               	incf	___awmod@dividend+1,f
  7287  169F  01F6               	clrf	___awmod@sign
  7288  16A0  0AF6               	incf	___awmod@sign,f
  7289  16A1                     l2420:	
  7290  16A1  1FF1               	btfss	___awmod@divisor+1,7
  7291  16A2  2EA8               	goto	l2424
  7292  16A3  09F0               	comf	___awmod@divisor,f
  7293  16A4  09F1               	comf	___awmod@divisor+1,f
  7294  16A5  0AF0               	incf	___awmod@divisor,f
  7295  16A6  1903               	skipnz
  7296  16A7  0AF1               	incf	___awmod@divisor+1,f
  7297  16A8                     l2424:	
  7298  16A8  0870               	movf	___awmod@divisor,w
  7299  16A9  0471               	iorwf	___awmod@divisor+1,w
  7300  16AA  1903               	btfsc	3,2
  7301  16AB  2ED5               	goto	l2442
  7302  16AC  01F5               	clrf	___awmod@counter
  7303  16AD  0AF5               	incf	___awmod@counter,f
  7304  16AE                     l2432:	
  7305  16AE  1BF1               	btfsc	___awmod@divisor+1,7
  7306  16AF  2EBC               	goto	l2434
  7307  16B0  3001               	movlw	1
  7308  16B1                     u2085:	
  7309  16B1  1003               	clrc
  7310  16B2  0DF0               	rlf	___awmod@divisor,f
  7311  16B3  0DF1               	rlf	___awmod@divisor+1,f
  7312  16B4  3EFF               	addlw	-1
  7313  16B5  1D03               	skipz
  7314  16B6  2EB1               	goto	u2085
  7315  16B7  3001               	movlw	1
  7316  16B8  00F4               	movwf	??___awmod
  7317  16B9  0874               	movf	??___awmod,w
  7318  16BA  07F5               	addwf	___awmod@counter,f
  7319  16BB  2EAE               	goto	l2432
  7320  16BC                     l2434:	
  7321  16BC  0871               	movf	___awmod@divisor+1,w
  7322  16BD  0273               	subwf	___awmod@dividend+1,w
  7323  16BE  1D03               	skipz
  7324  16BF  2EC2               	goto	u2105
  7325  16C0  0870               	movf	___awmod@divisor,w
  7326  16C1  0272               	subwf	___awmod@dividend,w
  7327  16C2                     u2105:	
  7328  16C2  1C03               	skipc
  7329  16C3  2ECA               	goto	l2438
  7330  16C4  0870               	movf	___awmod@divisor,w
  7331  16C5  02F2               	subwf	___awmod@dividend,f
  7332  16C6  0871               	movf	___awmod@divisor+1,w
  7333  16C7  1C03               	skipc
  7334  16C8  03F3               	decf	___awmod@dividend+1,f
  7335  16C9  02F3               	subwf	___awmod@dividend+1,f
  7336  16CA                     l2438:	
  7337  16CA  3001               	movlw	1
  7338  16CB                     u2115:	
  7339  16CB  1003               	clrc
  7340  16CC  0CF1               	rrf	___awmod@divisor+1,f
  7341  16CD  0CF0               	rrf	___awmod@divisor,f
  7342  16CE  3EFF               	addlw	-1
  7343  16CF  1D03               	skipz
  7344  16D0  2ECB               	goto	u2115
  7345  16D1  3001               	movlw	1
  7346  16D2  02F5               	subwf	___awmod@counter,f
  7347  16D3  1D03               	btfss	3,2
  7348  16D4  2EBC               	goto	l2434
  7349  16D5                     l2442:	
  7350  16D5  0876               	movf	___awmod@sign,w
  7351  16D6  1903               	btfsc	3,2
  7352  16D7  2EDD               	goto	l2446
  7353  16D8  09F2               	comf	___awmod@dividend,f
  7354  16D9  09F3               	comf	___awmod@dividend+1,f
  7355  16DA  0AF2               	incf	___awmod@dividend,f
  7356  16DB  1903               	skipnz
  7357  16DC  0AF3               	incf	___awmod@dividend+1,f
  7358  16DD                     l2446:	
  7359  16DD  0873               	movf	___awmod@dividend+1,w
  7360  16DE  00F1               	movwf	?___awmod+1
  7361  16DF  0872               	movf	___awmod@dividend,w
  7362  16E0  00F0               	movwf	?___awmod
  7363  16E1  0008               	return
  7364  16E2                     __end_of___awmod:	
  7365                           
  7366                           	psect	text31
  7367  16E2                     __ptext31:	
  7368 ;; *************** function ___awdiv *****************
  7369 ;; Defined at:
  7370 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  7371 ;; Parameters:    Size  Location     Type
  7372 ;;  divisor         2    0[COMMON] int 
  7373 ;;  dividend        2    2[COMMON] int 
  7374 ;; Auto vars:     Size  Location     Type
  7375 ;;  quotient        2    7[COMMON] int 
  7376 ;;  sign            1    6[COMMON] unsigned char 
  7377 ;;  counter         1    5[COMMON] unsigned char 
  7378 ;; Return value:  Size  Location     Type
  7379 ;;                  2    0[COMMON] int 
  7380 ;; Registers used:
  7381 ;;		wreg, status,2, status,0
  7382 ;; Tracked objects:
  7383 ;;		On entry : 0/0
  7384 ;;		On exit  : 0/0
  7385 ;;		Unchanged: 0/0
  7386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7387 ;;      Params:         4       0       0       0       0
  7388 ;;      Locals:         4       0       0       0       0
  7389 ;;      Temps:          1       0       0       0       0
  7390 ;;      Totals:         9       0       0       0       0
  7391 ;;Total ram usage:        9 bytes
  7392 ;; Hardware stack levels used:    1
  7393 ;; This function calls:
  7394 ;;		Nothing
  7395 ;; This function is called by:
  7396 ;;		_Set_DS1307_RTC_Time
  7397 ;;		_Set_DS1307_RTC_Date
  7398 ;;		_DisplayTimeToLCD
  7399 ;;		_DisplayDateOnLCD
  7400 ;;		_WriteTempToLCD
  7401 ;;		_DisplayFirstTimeToLCD
  7402 ;; This function uses a non-reentrant model
  7403 ;;
  7404                           
  7405                           
  7406                           ;psect for function ___awdiv
  7407  16E2                     ___awdiv:	
  7408                           
  7409                           ;incstack = 0
  7410                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  7411  16E2  01F6               	clrf	___awdiv@sign
  7412  16E3  1FF1               	btfss	___awdiv@divisor+1,7
  7413  16E4  2EEC               	goto	l2376
  7414  16E5  09F0               	comf	___awdiv@divisor,f
  7415  16E6  09F1               	comf	___awdiv@divisor+1,f
  7416  16E7  0AF0               	incf	___awdiv@divisor,f
  7417  16E8  1903               	skipnz
  7418  16E9  0AF1               	incf	___awdiv@divisor+1,f
  7419  16EA  01F6               	clrf	___awdiv@sign
  7420  16EB  0AF6               	incf	___awdiv@sign,f
  7421  16EC                     l2376:	
  7422  16EC  1FF3               	btfss	___awdiv@dividend+1,7
  7423  16ED  2EF7               	goto	l2382
  7424  16EE  09F2               	comf	___awdiv@dividend,f
  7425  16EF  09F3               	comf	___awdiv@dividend+1,f
  7426  16F0  0AF2               	incf	___awdiv@dividend,f
  7427  16F1  1903               	skipnz
  7428  16F2  0AF3               	incf	___awdiv@dividend+1,f
  7429  16F3  3001               	movlw	1
  7430  16F4  00F4               	movwf	??___awdiv
  7431  16F5  0874               	movf	??___awdiv,w
  7432  16F6  06F6               	xorwf	___awdiv@sign,f
  7433  16F7                     l2382:	
  7434  16F7  01F7               	clrf	___awdiv@quotient
  7435  16F8  01F8               	clrf	___awdiv@quotient+1
  7436  16F9  0870               	movf	___awdiv@divisor,w
  7437  16FA  0471               	iorwf	___awdiv@divisor+1,w
  7438  16FB  1903               	btfsc	3,2
  7439  16FC  2F2E               	goto	l2404
  7440  16FD  01F5               	clrf	___awdiv@counter
  7441  16FE  0AF5               	incf	___awdiv@counter,f
  7442  16FF                     l2392:	
  7443  16FF  1BF1               	btfsc	___awdiv@divisor+1,7
  7444  1700  2F0D               	goto	l2394
  7445  1701  3001               	movlw	1
  7446  1702                     u1985:	
  7447  1702  1003               	clrc
  7448  1703  0DF0               	rlf	___awdiv@divisor,f
  7449  1704  0DF1               	rlf	___awdiv@divisor+1,f
  7450  1705  3EFF               	addlw	-1
  7451  1706  1D03               	skipz
  7452  1707  2F02               	goto	u1985
  7453  1708  3001               	movlw	1
  7454  1709  00F4               	movwf	??___awdiv
  7455  170A  0874               	movf	??___awdiv,w
  7456  170B  07F5               	addwf	___awdiv@counter,f
  7457  170C  2EFF               	goto	l2392
  7458  170D                     l2394:	
  7459  170D  3001               	movlw	1
  7460  170E                     u2005:	
  7461  170E  1003               	clrc
  7462  170F  0DF7               	rlf	___awdiv@quotient,f
  7463  1710  0DF8               	rlf	___awdiv@quotient+1,f
  7464  1711  3EFF               	addlw	-1
  7465  1712  1D03               	skipz
  7466  1713  2F0E               	goto	u2005
  7467  1714  0871               	movf	___awdiv@divisor+1,w
  7468  1715  0273               	subwf	___awdiv@dividend+1,w
  7469  1716  1D03               	skipz
  7470  1717  2F1A               	goto	u2015
  7471  1718  0870               	movf	___awdiv@divisor,w
  7472  1719  0272               	subwf	___awdiv@dividend,w
  7473  171A                     u2015:	
  7474  171A  1C03               	skipc
  7475  171B  2F23               	goto	l2400
  7476  171C  0870               	movf	___awdiv@divisor,w
  7477  171D  02F2               	subwf	___awdiv@dividend,f
  7478  171E  0871               	movf	___awdiv@divisor+1,w
  7479  171F  1C03               	skipc
  7480  1720  03F3               	decf	___awdiv@dividend+1,f
  7481  1721  02F3               	subwf	___awdiv@dividend+1,f
  7482  1722  1477               	bsf	___awdiv@quotient,0
  7483  1723                     l2400:	
  7484  1723  3001               	movlw	1
  7485  1724                     u2025:	
  7486  1724  1003               	clrc
  7487  1725  0CF1               	rrf	___awdiv@divisor+1,f
  7488  1726  0CF0               	rrf	___awdiv@divisor,f
  7489  1727  3EFF               	addlw	-1
  7490  1728  1D03               	skipz
  7491  1729  2F24               	goto	u2025
  7492  172A  3001               	movlw	1
  7493  172B  02F5               	subwf	___awdiv@counter,f
  7494  172C  1D03               	btfss	3,2
  7495  172D  2F0D               	goto	l2394
  7496  172E                     l2404:	
  7497  172E  0876               	movf	___awdiv@sign,w
  7498  172F  1903               	btfsc	3,2
  7499  1730  2F36               	goto	l2408
  7500  1731  09F7               	comf	___awdiv@quotient,f
  7501  1732  09F8               	comf	___awdiv@quotient+1,f
  7502  1733  0AF7               	incf	___awdiv@quotient,f
  7503  1734  1903               	skipnz
  7504  1735  0AF8               	incf	___awdiv@quotient+1,f
  7505  1736                     l2408:	
  7506  1736  0878               	movf	___awdiv@quotient+1,w
  7507  1737  00F1               	movwf	?___awdiv+1
  7508  1738  0877               	movf	___awdiv@quotient,w
  7509  1739  00F0               	movwf	?___awdiv
  7510  173A  0008               	return
  7511  173B                     __end_of___awdiv:	
  7512                           
  7513                           	psect	text32
  7514  15AF                     __ptext32:	
  7515 ;; *************** function _WriteStringToLCD *****************
  7516 ;; Defined at:
  7517 ;;		line 82 in file "LCD.c"
  7518 ;; Parameters:    Size  Location     Type
  7519 ;;  s               2    4[COMMON] PTR const unsigned char 
  7520 ;;		 -> STR_50(3), STR_49(3), STR_48(4), STR_47(4), 
  7521 ;;		 -> STR_46(4), STR_45(4), STR_44(4), STR_43(4), 
  7522 ;;		 -> STR_42(4), STR_41(4), STR_40(3), STR_39(3), 
  7523 ;;		 -> STR_38(14), STR_37(16), STR_36(14), STR_35(2), 
  7524 ;;		 -> STR_34(2), STR_33(16), STR_32(4), STR_31(4), 
  7525 ;;		 -> STR_30(4), STR_29(4), STR_28(4), STR_27(4), 
  7526 ;;		 -> STR_26(4), STR_25(4), STR_24(19), STR_23(16), 
  7527 ;;		 -> STR_22(20), STR_21(16), STR_20(4), STR_19(4), 
  7528 ;;		 -> STR_18(4), STR_17(4), STR_16(4), STR_15(4), 
  7529 ;;		 -> STR_14(4), STR_13(4), STR_12(2), STR_11(2), 
  7530 ;;		 -> STR_10(2), STR_9(18), STR_8(18), STR_7(20), 
  7531 ;;		 -> STR_6(20), STR_5(2), STR_4(2), STR_3(15), 
  7532 ;;		 -> STR_2(2), STR_1(7), 
  7533 ;; Auto vars:     Size  Location     Type
  7534 ;;		None
  7535 ;; Return value:  Size  Location     Type
  7536 ;;		None               void
  7537 ;; Registers used:
  7538 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7539 ;; Tracked objects:
  7540 ;;		On entry : 0/0
  7541 ;;		On exit  : 0/0
  7542 ;;		Unchanged: 0/0
  7543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7544 ;;      Params:         2       0       0       0       0
  7545 ;;      Locals:         0       0       0       0       0
  7546 ;;      Temps:          0       0       0       0       0
  7547 ;;      Totals:         2       0       0       0       0
  7548 ;;Total ram usage:        2 bytes
  7549 ;; Hardware stack levels used:    1
  7550 ;; Hardware stack levels required when called:    2
  7551 ;; This function calls:
  7552 ;;		_WriteDataToLCD
  7553 ;; This function is called by:
  7554 ;;		_displayState1
  7555 ;;		_displayState2
  7556 ;;		_displayState3
  7557 ;;		_displayState4
  7558 ;;		_DisplayTimeToLCD
  7559 ;;		_DisplayDateOnLCD
  7560 ;;		_DisplayFirstTimeToLCD
  7561 ;; This function uses a non-reentrant model
  7562 ;;
  7563                           
  7564                           
  7565                           ;psect for function _WriteStringToLCD
  7566  15AF                     _WriteStringToLCD:	
  7567  15AF                     l2272:	
  7568                           ;LCD.c: 83: while (*s)
  7569                           
  7570                           ;incstack = 0
  7571                           ; Regs used in _WriteStringToLCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7572                           
  7573  15AF  0875               	movf	WriteStringToLCD@s+1,w
  7574  15B0  1283               	bcf	3,5	;RP0=0, select bank0
  7575  15B1  1303               	bcf	3,6	;RP1=0, select bank0
  7576  15B2  00FF               	movwf	127
  7577  15B3  0874               	movf	WriteStringToLCD@s,w
  7578  15B4  0084               	movwf	4
  7579  15B5  160A  118A  210F  160A  118A  	fcall	stringtab
  7580  15BA  3A00               	xorlw	0
  7581  15BB  1903               	btfsc	3,2
  7582  15BC  0008               	return
  7583                           
  7584                           ;LCD.c: 84: WriteDataToLCD(*s++);
  7585  15BD  0875               	movf	WriteStringToLCD@s+1,w
  7586  15BE  1283               	bcf	3,5	;RP0=0, select bank0
  7587  15BF  1303               	bcf	3,6	;RP1=0, select bank0
  7588  15C0  00FF               	movwf	127
  7589  15C1  0874               	movf	WriteStringToLCD@s,w
  7590  15C2  0084               	movwf	4
  7591  15C3  160A  118A  210F  160A  118A  	fcall	stringtab
  7592  15C8  120A  118A  200A  160A  118A  	fcall	_WriteDataToLCD
  7593  15CD  3001               	movlw	1
  7594  15CE  07F4               	addwf	WriteStringToLCD@s,f
  7595  15CF  1803               	skipnc
  7596  15D0  0AF5               	incf	WriteStringToLCD@s+1,f
  7597  15D1  2DAF               	goto	l2272
  7598  15D2                     __end_of_WriteStringToLCD:	
  7599                           
  7600                           	psect	text33
  7601  000A                     __ptext33:	
  7602 ;; *************** function _WriteDataToLCD *****************
  7603 ;; Defined at:
  7604 ;;		line 22 in file "LCD.c"
  7605 ;; Parameters:    Size  Location     Type
  7606 ;;  LCDChar         1    wreg     unsigned char 
  7607 ;; Auto vars:     Size  Location     Type
  7608 ;;  LCDChar         1    3[COMMON] unsigned char 
  7609 ;; Return value:  Size  Location     Type
  7610 ;;		None               void
  7611 ;; Registers used:
  7612 ;;		wreg, status,2, status,0, pclath, cstack
  7613 ;; Tracked objects:
  7614 ;;		On entry : 0/0
  7615 ;;		On exit  : 0/0
  7616 ;;		Unchanged: 0/0
  7617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7618 ;;      Params:         0       0       0       0       0
  7619 ;;      Locals:         1       0       0       0       0
  7620 ;;      Temps:          2       0       0       0       0
  7621 ;;      Totals:         3       0       0       0       0
  7622 ;;Total ram usage:        3 bytes
  7623 ;; Hardware stack levels used:    1
  7624 ;; Hardware stack levels required when called:    1
  7625 ;; This function calls:
  7626 ;;		_ToggleEpinOfLCD
  7627 ;; This function is called by:
  7628 ;;		_displayState1
  7629 ;;		_WriteStringToLCD
  7630 ;;		_DisplayTimeToLCD
  7631 ;;		_DisplayDateOnLCD
  7632 ;;		_WriteTempToLCD
  7633 ;;		_DisplayFirstTimeToLCD
  7634 ;; This function uses a non-reentrant model
  7635 ;;
  7636                           
  7637                           
  7638                           ;psect for function _WriteDataToLCD
  7639  000A                     _WriteDataToLCD:	
  7640                           
  7641                           ;incstack = 0
  7642                           ; Regs used in _WriteDataToLCD: [wreg+status,2+status,0+pclath+cstack]
  7643                           ;WriteDataToLCD@LCDChar stored from wreg
  7644  000A  00F3               	movwf	WriteDataToLCD@LCDChar
  7645                           
  7646                           ;LCD.c: 23: RB1 = 1;
  7647  000B  1283               	bcf	3,5	;RP0=0, select bank0
  7648  000C  1303               	bcf	3,6	;RP1=0, select bank0
  7649  000D  1486               	bsf	6,1	;volatile
  7650                           
  7651                           ;LCD.c: 25: PORTB &= 0x0F;
  7652  000E  300F               	movlw	15
  7653  000F  00F1               	movwf	??_WriteDataToLCD
  7654  0010  0871               	movf	??_WriteDataToLCD,w
  7655  0011  0586               	andwf	6,f	;volatile
  7656                           
  7657                           ;LCD.c: 26: PORTB |= (LCDChar & 0xF0);
  7658  0012  0873               	movf	WriteDataToLCD@LCDChar,w
  7659  0013  39F0               	andlw	240
  7660  0014  00F1               	movwf	??_WriteDataToLCD
  7661  0015  0871               	movf	??_WriteDataToLCD,w
  7662  0016  0486               	iorwf	6,f	;volatile
  7663                           
  7664                           ;LCD.c: 27: ToggleEpinOfLCD();
  7665  0017  160A  118A  2585  120A  118A  	fcall	_ToggleEpinOfLCD
  7666                           
  7667                           ;LCD.c: 29: PORTB &= 0x0F;
  7668  001C  300F               	movlw	15
  7669  001D  00F1               	movwf	??_WriteDataToLCD
  7670  001E  0871               	movf	??_WriteDataToLCD,w
  7671  001F  1283               	bcf	3,5	;RP0=0, select bank0
  7672  0020  1303               	bcf	3,6	;RP1=0, select bank0
  7673  0021  0586               	andwf	6,f	;volatile
  7674                           
  7675                           ;LCD.c: 30: PORTB |= ((LCDChar << 4)&0xF0);
  7676  0022  0873               	movf	WriteDataToLCD@LCDChar,w
  7677  0023  00F1               	movwf	??_WriteDataToLCD
  7678  0024  3003               	movlw	3
  7679  0025                     u1675:	
  7680  0025  1003               	clrc
  7681  0026  0DF1               	rlf	??_WriteDataToLCD,f
  7682  0027  3EFF               	addlw	-1
  7683  0028  1D03               	skipz
  7684  0029  2825               	goto	u1675
  7685  002A  1003               	clrc
  7686  002B  0D71               	rlf	??_WriteDataToLCD,w
  7687  002C  39F0               	andlw	240
  7688  002D  00F2               	movwf	??_WriteDataToLCD+1
  7689  002E  0872               	movf	??_WriteDataToLCD+1,w
  7690  002F  0486               	iorwf	6,f	;volatile
  7691                           
  7692                           ;LCD.c: 31: ToggleEpinOfLCD();
  7693  0030  160A  118A  2585   	fcall	_ToggleEpinOfLCD
  7694  0033  0008               	return
  7695  0034                     __end_of_WriteDataToLCD:	
  7696                           
  7697                           	psect	text34
  7698  159A                     __ptext34:	
  7699 ;; *************** function _ADCinit *****************
  7700 ;; Defined at:
  7701 ;;		line 56 in file "main.c"
  7702 ;; Parameters:    Size  Location     Type
  7703 ;;		None
  7704 ;; Auto vars:     Size  Location     Type
  7705 ;;		None
  7706 ;; Return value:  Size  Location     Type
  7707 ;;		None               void
  7708 ;; Registers used:
  7709 ;;		wreg, status,2, status,0
  7710 ;; Tracked objects:
  7711 ;;		On entry : 0/0
  7712 ;;		On exit  : 0/0
  7713 ;;		Unchanged: 0/0
  7714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7715 ;;      Params:         0       0       0       0       0
  7716 ;;      Locals:         0       0       0       0       0
  7717 ;;      Temps:          0       0       0       0       0
  7718 ;;      Totals:         0       0       0       0       0
  7719 ;;Total ram usage:        0 bytes
  7720 ;; Hardware stack levels used:    1
  7721 ;; This function calls:
  7722 ;;		Nothing
  7723 ;; This function is called by:
  7724 ;;		_displayState1
  7725 ;; This function uses a non-reentrant model
  7726 ;;
  7727                           
  7728                           
  7729                           ;psect for function _ADCinit
  7730  159A                     _ADCinit:	
  7731                           
  7732                           ;main.c: 58: ADCON1bits.ADCS2 = 0, ADCON0bits.ADCS1 = 0, ADCON0bits.ADCS0 = 0;
  7733                           
  7734                           ;incstack = 0
  7735                           ; Regs used in _ADCinit: [wreg+status,2+status,0]
  7736  159A  1683               	bsf	3,5	;RP0=1, select bank1
  7737  159B  1303               	bcf	3,6	;RP1=0, select bank1
  7738  159C  131F               	bcf	31,6	;volatile
  7739  159D  1283               	bcf	3,5	;RP0=0, select bank0
  7740  159E  1303               	bcf	3,6	;RP1=0, select bank0
  7741  159F  139F               	bcf	31,7	;volatile
  7742  15A0  131F               	bcf	31,6	;volatile
  7743                           
  7744                           ;main.c: 59: CHS2 = 0, CHS1 = 0, CHS0 = 0;
  7745  15A1  129F               	bcf	31,5	;volatile
  7746  15A2  121F               	bcf	31,4	;volatile
  7747  15A3  119F               	bcf	31,3	;volatile
  7748                           
  7749                           ;main.c: 60: ADCON1bits.ADFM = 1;
  7750  15A4  1683               	bsf	3,5	;RP0=1, select bank1
  7751  15A5  1303               	bcf	3,6	;RP1=0, select bank1
  7752  15A6  179F               	bsf	31,7	;volatile
  7753                           
  7754                           ;main.c: 61: ADCON1bits.PCFG = 0XE;
  7755  15A7  081F               	movf	31,w	;volatile
  7756  15A8  39F0               	andlw	-16
  7757  15A9  380E               	iorlw	14
  7758  15AA  009F               	movwf	31	;volatile
  7759                           
  7760                           ;main.c: 62: ADCON0bits.ADON = 1;
  7761  15AB  1283               	bcf	3,5	;RP0=0, select bank0
  7762  15AC  1303               	bcf	3,6	;RP1=0, select bank0
  7763  15AD  141F               	bsf	31,0	;volatile
  7764  15AE  0008               	return
  7765  15AF                     __end_of_ADCinit:	
  7766                           
  7767                           	psect	text35
  7768  08E8                     __ptext35:	
  7769 ;; *************** function _InitLCD *****************
  7770 ;; Defined at:
  7771 ;;		line 34 in file "LCD.c"
  7772 ;; Parameters:    Size  Location     Type
  7773 ;;		None
  7774 ;; Auto vars:     Size  Location     Type
  7775 ;;		None
  7776 ;; Return value:  Size  Location     Type
  7777 ;;		None               void
  7778 ;; Registers used:
  7779 ;;		wreg, status,2, status,0, pclath, cstack
  7780 ;; Tracked objects:
  7781 ;;		On entry : 0/0
  7782 ;;		On exit  : 0/0
  7783 ;;		Unchanged: 0/0
  7784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7785 ;;      Params:         0       0       0       0       0
  7786 ;;      Locals:         0       0       0       0       0
  7787 ;;      Temps:          2       0       0       0       0
  7788 ;;      Totals:         2       0       0       0       0
  7789 ;;Total ram usage:        2 bytes
  7790 ;; Hardware stack levels used:    1
  7791 ;; Hardware stack levels required when called:    2
  7792 ;; This function calls:
  7793 ;;		_ToggleEpinOfLCD
  7794 ;;		_WriteCommandToLCD
  7795 ;; This function is called by:
  7796 ;;		_main
  7797 ;; This function uses a non-reentrant model
  7798 ;;
  7799                           
  7800                           
  7801                           ;psect for function _InitLCD
  7802  08E8                     _InitLCD:	
  7803                           
  7804                           ;LCD.c: 36: RB0 = 0;
  7805                           
  7806                           ;incstack = 0
  7807                           ; Regs used in _InitLCD: [wreg+status,2+status,0+pclath+cstack]
  7808  08E8  1283               	bcf	3,5	;RP0=0, select bank0
  7809  08E9  1303               	bcf	3,6	;RP1=0, select bank0
  7810  08EA  1006               	bcf	6,0	;volatile
  7811                           
  7812                           ;LCD.c: 37: RB1 = 0;
  7813  08EB  1086               	bcf	6,1	;volatile
  7814                           
  7815                           ;LCD.c: 38: RB4 = 0;
  7816  08EC  1206               	bcf	6,4	;volatile
  7817                           
  7818                           ;LCD.c: 39: RB5 = 0;
  7819  08ED  1286               	bcf	6,5	;volatile
  7820                           
  7821                           ;LCD.c: 40: RB6 = 0;
  7822  08EE  1306               	bcf	6,6	;volatile
  7823                           
  7824                           ;LCD.c: 41: RB7 = 0;
  7825  08EF  1386               	bcf	6,7	;volatile
  7826                           
  7827                           ;LCD.c: 42: TRISB0 = 0;
  7828  08F0  1683               	bsf	3,5	;RP0=1, select bank1
  7829  08F1  1303               	bcf	3,6	;RP1=0, select bank1
  7830  08F2  1006               	bcf	6,0	;volatile
  7831                           
  7832                           ;LCD.c: 43: TRISB1 = 0;
  7833  08F3  1086               	bcf	6,1	;volatile
  7834                           
  7835                           ;LCD.c: 44: TRISB4 = 0;
  7836  08F4  1206               	bcf	6,4	;volatile
  7837                           
  7838                           ;LCD.c: 45: TRISB5 = 0;
  7839  08F5  1286               	bcf	6,5	;volatile
  7840                           
  7841                           ;LCD.c: 46: TRISB6 = 0;
  7842  08F6  1306               	bcf	6,6	;volatile
  7843                           
  7844                           ;LCD.c: 47: TRISB7 = 0;
  7845  08F7  1386               	bcf	6,7	;volatile
  7846                           
  7847                           ;LCD.c: 50: _delay((unsigned long)((40)*(10000000/4000.0)));
  7848  08F8  3082               	movlw	130
  7849  08F9  00F5               	movwf	??_InitLCD+1
  7850  08FA  30DD               	movlw	221
  7851  08FB  00F4               	movwf	??_InitLCD
  7852  08FC                     u3327:	
  7853  08FC  0BF4               	decfsz	??_InitLCD,f
  7854  08FD  28FC               	goto	u3327
  7855  08FE  0BF5               	decfsz	??_InitLCD+1,f
  7856  08FF  28FC               	goto	u3327
  7857  0900  2901               	nop2
  7858                           
  7859                           ;LCD.c: 52: PORTB &= 0x0F;
  7860  0901  300F               	movlw	15
  7861  0902  00F4               	movwf	??_InitLCD
  7862  0903  0874               	movf	??_InitLCD,w
  7863  0904  1283               	bcf	3,5	;RP0=0, select bank0
  7864  0905  1303               	bcf	3,6	;RP1=0, select bank0
  7865  0906  0586               	andwf	6,f	;volatile
  7866                           
  7867                           ;LCD.c: 53: PORTB |= 0x30;
  7868  0907  3030               	movlw	48
  7869  0908  00F4               	movwf	??_InitLCD
  7870  0909  0874               	movf	??_InitLCD,w
  7871  090A  0486               	iorwf	6,f	;volatile
  7872                           
  7873                           ;LCD.c: 54: ToggleEpinOfLCD();
  7874  090B  160A  118A  2585  120A  158A  	fcall	_ToggleEpinOfLCD
  7875                           
  7876                           ;LCD.c: 56: _delay((unsigned long)((6)*(10000000/4000.0)));
  7877  0910  3014               	movlw	20
  7878  0911  00F5               	movwf	??_InitLCD+1
  7879  0912  3079               	movlw	121
  7880  0913  00F4               	movwf	??_InitLCD
  7881  0914                     u3337:	
  7882  0914  0BF4               	decfsz	??_InitLCD,f
  7883  0915  2914               	goto	u3337
  7884  0916  0BF5               	decfsz	??_InitLCD+1,f
  7885  0917  2914               	goto	u3337
  7886  0918  2919               	nop2
  7887                           
  7888                           ;LCD.c: 58: PORTB &= 0x0F;
  7889  0919  300F               	movlw	15
  7890  091A  00F4               	movwf	??_InitLCD
  7891  091B  0874               	movf	??_InitLCD,w
  7892  091C  1283               	bcf	3,5	;RP0=0, select bank0
  7893  091D  1303               	bcf	3,6	;RP1=0, select bank0
  7894  091E  0586               	andwf	6,f	;volatile
  7895                           
  7896                           ;LCD.c: 59: PORTB |= 0x30;
  7897  091F  3030               	movlw	48
  7898  0920  00F4               	movwf	??_InitLCD
  7899  0921  0874               	movf	??_InitLCD,w
  7900  0922  0486               	iorwf	6,f	;volatile
  7901                           
  7902                           ;LCD.c: 60: ToggleEpinOfLCD();
  7903  0923  160A  118A  2585  120A  158A  	fcall	_ToggleEpinOfLCD
  7904                           
  7905                           ;LCD.c: 62: _delay((unsigned long)((300)*(10000000/4000000.0)));
  7906  0928  30F9               	movlw	249
  7907  0929  00F4               	movwf	??_InitLCD
  7908  092A                     u3347:	
  7909  092A  0BF4               	decfsz	??_InitLCD,f
  7910  092B  292A               	goto	u3347
  7911  092C  292D               	nop2	;nop
  7912                           
  7913                           ;LCD.c: 64: PORTB &= 0x0F;
  7914  092D  300F               	movlw	15
  7915  092E  00F4               	movwf	??_InitLCD
  7916  092F  0874               	movf	??_InitLCD,w
  7917  0930  1283               	bcf	3,5	;RP0=0, select bank0
  7918  0931  1303               	bcf	3,6	;RP1=0, select bank0
  7919  0932  0586               	andwf	6,f	;volatile
  7920                           
  7921                           ;LCD.c: 65: PORTB |= 0x30;
  7922  0933  3030               	movlw	48
  7923  0934  00F4               	movwf	??_InitLCD
  7924  0935  0874               	movf	??_InitLCD,w
  7925  0936  0486               	iorwf	6,f	;volatile
  7926                           
  7927                           ;LCD.c: 66: ToggleEpinOfLCD();
  7928  0937  160A  118A  2585  120A  158A  	fcall	_ToggleEpinOfLCD
  7929                           
  7930                           ;LCD.c: 68: _delay((unsigned long)((2)*(10000000/4000.0)));
  7931  093C  3007               	movlw	7
  7932  093D  00F5               	movwf	??_InitLCD+1
  7933  093E  307D               	movlw	125
  7934  093F  00F4               	movwf	??_InitLCD
  7935  0940                     u3357:	
  7936  0940  0BF4               	decfsz	??_InitLCD,f
  7937  0941  2940               	goto	u3357
  7938  0942  0BF5               	decfsz	??_InitLCD+1,f
  7939  0943  2940               	goto	u3357
  7940                           
  7941                           ;LCD.c: 70: PORTB &= 0x0F;
  7942  0944  300F               	movlw	15
  7943  0945  00F4               	movwf	??_InitLCD
  7944  0946  0874               	movf	??_InitLCD,w
  7945  0947  1283               	bcf	3,5	;RP0=0, select bank0
  7946  0948  1303               	bcf	3,6	;RP1=0, select bank0
  7947  0949  0586               	andwf	6,f	;volatile
  7948                           
  7949                           ;LCD.c: 71: PORTB |= 0x20;
  7950  094A  1686               	bsf	6,5	;volatile
  7951                           
  7952                           ;LCD.c: 72: ToggleEpinOfLCD();
  7953  094B  160A  118A  2585  120A  158A  	fcall	_ToggleEpinOfLCD
  7954                           
  7955                           ;LCD.c: 74: _delay((unsigned long)((2)*(10000000/4000.0)));
  7956  0950  3007               	movlw	7
  7957  0951  00F5               	movwf	??_InitLCD+1
  7958  0952  307D               	movlw	125
  7959  0953  00F4               	movwf	??_InitLCD
  7960  0954                     u3367:	
  7961  0954  0BF4               	decfsz	??_InitLCD,f
  7962  0955  2954               	goto	u3367
  7963  0956  0BF5               	decfsz	??_InitLCD+1,f
  7964  0957  2954               	goto	u3367
  7965                           
  7966                           ;LCD.c: 76: WriteCommandToLCD(0x28);
  7967  0958  3028               	movlw	40
  7968  0959  160A  118A  25F9  120A  158A  	fcall	_WriteCommandToLCD
  7969                           
  7970                           ;LCD.c: 77: WriteCommandToLCD(0x0c);
  7971  095E  300C               	movlw	12
  7972  095F  160A  118A  25F9  120A  158A  	fcall	_WriteCommandToLCD
  7973                           
  7974                           ;LCD.c: 78: WriteCommandToLCD(0x01);
  7975  0964  3001               	movlw	1
  7976  0965  160A  118A  25F9  120A  158A  	fcall	_WriteCommandToLCD
  7977                           
  7978                           ;LCD.c: 79: WriteCommandToLCD(0x06);
  7979  096A  3006               	movlw	6
  7980  096B  160A  118A  25F9   	fcall	_WriteCommandToLCD
  7981  096E  0008               	return
  7982  096F                     __end_of_InitLCD:	
  7983                           
  7984                           	psect	text36
  7985  15F9                     __ptext36:	
  7986 ;; *************** function _WriteCommandToLCD *****************
  7987 ;; Defined at:
  7988 ;;		line 10 in file "LCD.c"
  7989 ;; Parameters:    Size  Location     Type
  7990 ;;  Command         1    wreg     unsigned char 
  7991 ;; Auto vars:     Size  Location     Type
  7992 ;;  Command         1    3[COMMON] unsigned char 
  7993 ;; Return value:  Size  Location     Type
  7994 ;;		None               void
  7995 ;; Registers used:
  7996 ;;		wreg, status,2, status,0, pclath, cstack
  7997 ;; Tracked objects:
  7998 ;;		On entry : 0/0
  7999 ;;		On exit  : 0/0
  8000 ;;		Unchanged: 0/0
  8001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8002 ;;      Params:         0       0       0       0       0
  8003 ;;      Locals:         1       0       0       0       0
  8004 ;;      Temps:          2       0       0       0       0
  8005 ;;      Totals:         3       0       0       0       0
  8006 ;;Total ram usage:        3 bytes
  8007 ;; Hardware stack levels used:    1
  8008 ;; Hardware stack levels required when called:    1
  8009 ;; This function calls:
  8010 ;;		_ToggleEpinOfLCD
  8011 ;; This function is called by:
  8012 ;;		_displayState1
  8013 ;;		_displayState2
  8014 ;;		_displayState3
  8015 ;;		_displayState4
  8016 ;;		_InitLCD
  8017 ;;		_ClearLCDScreen
  8018 ;;		_DisplayTimeToLCD
  8019 ;;		_DisplayDateOnLCD
  8020 ;; This function uses a non-reentrant model
  8021 ;;
  8022                           
  8023                           
  8024                           ;psect for function _WriteCommandToLCD
  8025  15F9                     _WriteCommandToLCD:	
  8026                           
  8027                           ;incstack = 0
  8028                           ; Regs used in _WriteCommandToLCD: [wreg+status,2+status,0+pclath+cstack]
  8029                           ;WriteCommandToLCD@Command stored from wreg
  8030  15F9  00F3               	movwf	WriteCommandToLCD@Command
  8031                           
  8032                           ;LCD.c: 11: RB1 = 0;
  8033  15FA  1283               	bcf	3,5	;RP0=0, select bank0
  8034  15FB  1303               	bcf	3,6	;RP1=0, select bank0
  8035  15FC  1086               	bcf	6,1	;volatile
  8036                           
  8037                           ;LCD.c: 13: PORTB &= 0x0F;
  8038  15FD  300F               	movlw	15
  8039  15FE  00F1               	movwf	??_WriteCommandToLCD
  8040  15FF  0871               	movf	??_WriteCommandToLCD,w
  8041  1600  0586               	andwf	6,f	;volatile
  8042                           
  8043                           ;LCD.c: 14: PORTB |= (Command & 0xF0);
  8044  1601  0873               	movf	WriteCommandToLCD@Command,w
  8045  1602  39F0               	andlw	240
  8046  1603  00F1               	movwf	??_WriteCommandToLCD
  8047  1604  0871               	movf	??_WriteCommandToLCD,w
  8048  1605  0486               	iorwf	6,f	;volatile
  8049                           
  8050                           ;LCD.c: 15: ToggleEpinOfLCD();
  8051  1606  160A  118A  2585  160A  118A  	fcall	_ToggleEpinOfLCD
  8052                           
  8053                           ;LCD.c: 17: PORTB &= 0x0F;
  8054  160B  300F               	movlw	15
  8055  160C  00F1               	movwf	??_WriteCommandToLCD
  8056  160D  0871               	movf	??_WriteCommandToLCD,w
  8057  160E  1283               	bcf	3,5	;RP0=0, select bank0
  8058  160F  1303               	bcf	3,6	;RP1=0, select bank0
  8059  1610  0586               	andwf	6,f	;volatile
  8060                           
  8061                           ;LCD.c: 18: PORTB |= ((Command << 4)&0xF0);
  8062  1611  0873               	movf	WriteCommandToLCD@Command,w
  8063  1612  00F1               	movwf	??_WriteCommandToLCD
  8064  1613  3003               	movlw	3
  8065  1614                     u1665:	
  8066  1614  1003               	clrc
  8067  1615  0DF1               	rlf	??_WriteCommandToLCD,f
  8068  1616  3EFF               	addlw	-1
  8069  1617  1D03               	skipz
  8070  1618  2E14               	goto	u1665
  8071  1619  1003               	clrc
  8072  161A  0D71               	rlf	??_WriteCommandToLCD,w
  8073  161B  39F0               	andlw	240
  8074  161C  00F2               	movwf	??_WriteCommandToLCD+1
  8075  161D  0872               	movf	??_WriteCommandToLCD+1,w
  8076  161E  0486               	iorwf	6,f	;volatile
  8077                           
  8078                           ;LCD.c: 19: ToggleEpinOfLCD();
  8079  161F  160A  118A  2585   	fcall	_ToggleEpinOfLCD
  8080  1622  0008               	return
  8081  1623                     __end_of_WriteCommandToLCD:	
  8082                           
  8083                           	psect	text37
  8084  1585                     __ptext37:	
  8085 ;; *************** function _ToggleEpinOfLCD *****************
  8086 ;; Defined at:
  8087 ;;		line 3 in file "LCD.c"
  8088 ;; Parameters:    Size  Location     Type
  8089 ;;		None
  8090 ;; Auto vars:     Size  Location     Type
  8091 ;;		None
  8092 ;; Return value:  Size  Location     Type
  8093 ;;		None               void
  8094 ;; Registers used:
  8095 ;;		wreg
  8096 ;; Tracked objects:
  8097 ;;		On entry : 0/0
  8098 ;;		On exit  : 0/0
  8099 ;;		Unchanged: 0/0
  8100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8101 ;;      Params:         0       0       0       0       0
  8102 ;;      Locals:         0       0       0       0       0
  8103 ;;      Temps:          1       0       0       0       0
  8104 ;;      Totals:         1       0       0       0       0
  8105 ;;Total ram usage:        1 bytes
  8106 ;; Hardware stack levels used:    1
  8107 ;; This function calls:
  8108 ;;		Nothing
  8109 ;; This function is called by:
  8110 ;;		_WriteCommandToLCD
  8111 ;;		_WriteDataToLCD
  8112 ;;		_InitLCD
  8113 ;; This function uses a non-reentrant model
  8114 ;;
  8115                           
  8116                           
  8117                           ;psect for function _ToggleEpinOfLCD
  8118  1585                     _ToggleEpinOfLCD:	
  8119                           
  8120                           ;LCD.c: 4: RB0 = 1;
  8121                           
  8122                           ;incstack = 0
  8123                           ; Regs used in _ToggleEpinOfLCD: [wreg]
  8124  1585  1283               	bcf	3,5	;RP0=0, select bank0
  8125  1586  1303               	bcf	3,6	;RP1=0, select bank0
  8126  1587  1406               	bsf	6,0	;volatile
  8127                           
  8128                           ;LCD.c: 5: _delay((unsigned long)((500)*(10000000/4000000.0)));
  8129  1588  30F9               	movlw	249
  8130  1589  00F0               	movwf	??_ToggleEpinOfLCD
  8131  158A                     u3377:	
  8132  158A  2D8B               	nop2
  8133  158B  0BF0               	decfsz	??_ToggleEpinOfLCD,f
  8134  158C  2D8A               	goto	u3377
  8135  158D  2D8E               	nop2	;nop
  8136  158E  2D8F               	nop2	;nop
  8137                           
  8138                           ;LCD.c: 6: RB0 = 0;
  8139  158F  1283               	bcf	3,5	;RP0=0, select bank0
  8140  1590  1303               	bcf	3,6	;RP1=0, select bank0
  8141  1591  1006               	bcf	6,0	;volatile
  8142                           
  8143                           ;LCD.c: 7: _delay((unsigned long)((500)*(10000000/4000000.0)));
  8144  1592  30F9               	movlw	249
  8145  1593  00F0               	movwf	??_ToggleEpinOfLCD
  8146  1594                     u3387:	
  8147  1594  2D95               	nop2
  8148  1595  0BF0               	decfsz	??_ToggleEpinOfLCD,f
  8149  1596  2D94               	goto	u3387
  8150  1597  2D98               	nop2	;nop
  8151  1598  2D99               	nop2	;nop
  8152  1599  0008               	return
  8153  159A                     __end_of_ToggleEpinOfLCD:	
  8154                           
  8155                           	psect	text38
  8156  1522                     __ptext38:	
  8157 ;; *************** function _InitI2C *****************
  8158 ;; Defined at:
  8159 ;;		line 8 in file "I2C.c"
  8160 ;; Parameters:    Size  Location     Type
  8161 ;;		None
  8162 ;; Auto vars:     Size  Location     Type
  8163 ;;		None
  8164 ;; Return value:  Size  Location     Type
  8165 ;;		None               void
  8166 ;; Registers used:
  8167 ;;		wreg
  8168 ;; Tracked objects:
  8169 ;;		On entry : 0/0
  8170 ;;		On exit  : 0/0
  8171 ;;		Unchanged: 0/0
  8172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8173 ;;      Params:         0       0       0       0       0
  8174 ;;      Locals:         0       0       0       0       0
  8175 ;;      Temps:          0       0       0       0       0
  8176 ;;      Totals:         0       0       0       0       0
  8177 ;;Total ram usage:        0 bytes
  8178 ;; Hardware stack levels used:    1
  8179 ;; This function calls:
  8180 ;;		Nothing
  8181 ;; This function is called by:
  8182 ;;		_main
  8183 ;; This function uses a non-reentrant model
  8184 ;;
  8185                           
  8186                           
  8187                           ;psect for function _InitI2C
  8188  1522                     _InitI2C:	
  8189                           
  8190                           ;I2C.c: 9: TRISC4 = 1;
  8191                           
  8192                           ;incstack = 0
  8193                           ; Regs used in _InitI2C: [wreg]
  8194  1522  1683               	bsf	3,5	;RP0=1, select bank1
  8195  1523  1303               	bcf	3,6	;RP1=0, select bank1
  8196  1524  1607               	bsf	7,4	;volatile
  8197                           
  8198                           ;I2C.c: 10: TRISC3 = 1;
  8199  1525  1587               	bsf	7,3	;volatile
  8200                           
  8201                           ;I2C.c: 12: SSPADD = ((10000000 / 4000) / 100) - 1;
  8202  1526  3018               	movlw	24
  8203  1527  0093               	movwf	19	;volatile
  8204                           
  8205                           ;I2C.c: 13: SSPSTAT = 0x80;
  8206  1528  3080               	movlw	128
  8207  1529  0094               	movwf	20	;volatile
  8208                           
  8209                           ;I2C.c: 14: SSPCON = 0x28;
  8210  152A  3028               	movlw	40
  8211  152B  1283               	bcf	3,5	;RP0=0, select bank0
  8212  152C  1303               	bcf	3,6	;RP1=0, select bank0
  8213  152D  0094               	movwf	20	;volatile
  8214  152E  0008               	return
  8215  152F                     __end_of_InitI2C:	
  8216  007E                     btemp	set	126	;btemp
  8217  007E                     wtemp	set	126
  8218  007E                     wtemp0	set	126
  8219  0080                     wtemp1	set	128
  8220  0082                     wtemp2	set	130
  8221  0084                     wtemp3	set	132
  8222  0086                     wtemp4	set	134
  8223  0088                     wtemp5	set	136
  8224  007F                     wtemp6	set	127
  8225  007E                     ttemp	set	126
  8226  007E                     ttemp0	set	126
  8227  0081                     ttemp1	set	129
  8228  0084                     ttemp2	set	132
  8229  0087                     ttemp3	set	135
  8230  007F                     ttemp4	set	127
  8231  007E                     ltemp	set	126
  8232  007E                     ltemp0	set	126
  8233  0082                     ltemp1	set	130
  8234  0086                     ltemp2	set	134
  8235  0080                     ltemp3	set	128


Data Sizes:
    Strings     271
    Constant    0
    Data        2
    BSS         19
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     36      56
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    DisplayFirstTimeToLCD@pTimeArray	PTR unsigned char  size(1) Largest target is 4
		 -> pRTCArray(BANK0[4]), 

    DisplayDateOnLCD@pDateArray	PTR unsigned char  size(1) Largest target is 4
		 -> pRTCArray(BANK0[4]), 

    DisplayTimeToLCD@pTimeArray	PTR unsigned char  size(1) Largest target is 4
		 -> pRTCArray(BANK0[4]), 

    WriteStringToLCD@s	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_50(CODE[3]), STR_49(CODE[3]), STR_48(CODE[4]), STR_47(CODE[4]), 
		 -> STR_46(CODE[4]), STR_45(CODE[4]), STR_44(CODE[4]), STR_43(CODE[4]), 
		 -> STR_42(CODE[4]), STR_41(CODE[4]), STR_40(CODE[3]), STR_39(CODE[3]), 
		 -> STR_38(CODE[14]), STR_37(CODE[16]), STR_36(CODE[14]), STR_35(CODE[2]), 
		 -> STR_34(CODE[2]), STR_33(CODE[16]), STR_32(CODE[4]), STR_31(CODE[4]), 
		 -> STR_30(CODE[4]), STR_29(CODE[4]), STR_28(CODE[4]), STR_27(CODE[4]), 
		 -> STR_26(CODE[4]), STR_25(CODE[4]), STR_24(CODE[19]), STR_23(CODE[16]), 
		 -> STR_22(CODE[20]), STR_21(CODE[16]), STR_20(CODE[4]), STR_19(CODE[4]), 
		 -> STR_18(CODE[4]), STR_17(CODE[4]), STR_16(CODE[4]), STR_15(CODE[4]), 
		 -> STR_14(CODE[4]), STR_13(CODE[4]), STR_12(CODE[2]), STR_11(CODE[2]), 
		 -> STR_10(CODE[2]), STR_9(CODE[18]), STR_8(CODE[18]), STR_7(CODE[20]), 
		 -> STR_6(CODE[20]), STR_5(CODE[2]), STR_4(CODE[2]), STR_3(CODE[15]), 
		 -> STR_2(CODE[2]), STR_1(CODE[7]), 

    Read_Bytes_From_DS1307_RTC@pData	PTR unsigned char  size(1) Largest target is 4
		 -> pRTCArray(BANK0[4]), 

    Write_Bytes_To_DS1307_RTC@pData	PTR unsigned char  size(1) Largest target is 4
		 -> pRTCArray(BANK0[4]), 

    sp__Get_DS1307_RTC_Date	PTR unsigned char  size(1) Largest target is 4
		 -> pRTCArray(BANK0[4]), 

    sp__Get_DS1307_RTC_Time	PTR unsigned char  size(1) Largest target is 4
		 -> pRTCArray(BANK0[4]), 


Critical Paths under _main in COMMON

    _main->_Get_DS1307_RTC_Time
    _main->_Set_DS1307_RTC_Date
    _main->_Set_DS1307_RTC_Time
    _displayState4->_Get_DS1307_RTC_Time
    _DisplayFirstTimeToLCD->___awdiv
    _displayState3->_Get_DS1307_RTC_Date
    _displayState3->_Set_DS1307_RTC_Date
    _Set_DS1307_RTC_Date->___awdiv
    _displayState2->_Get_DS1307_RTC_Time
    _displayState2->_Set_DS1307_RTC_Time
    _Set_DS1307_RTC_Time->___awdiv
    _Write_Bytes_To_DS1307_RTC->_I2C_Write_Byte
    _ClearLCDScreen->_WriteCommandToLCD
    _displayState1->_Get_DS1307_RTC_Date
    _displayState1->_Get_DS1307_RTC_Time
    ___lwtoft->___ftpack
    ___fttol->___lwtoft
    ___ftmul->___lwtoft
    _WriteTempToLCD->___awdiv
    _Get_DS1307_RTC_Time->_Read_Bytes_From_DS1307_RTC
    _Get_DS1307_RTC_Date->_Read_Bytes_From_DS1307_RTC
    _Read_Bytes_From_DS1307_RTC->_I2C_Write_Byte
    _DisplayTimeToLCD->___awdiv
    _DisplayDateOnLCD->___awdiv
    _WriteStringToLCD->_WriteDataToLCD
    _WriteDataToLCD->_ToggleEpinOfLCD
    _InitLCD->_WriteCommandToLCD
    _WriteCommandToLCD->_ToggleEpinOfLCD

Critical Paths under _main in BANK0

    _main->_displayState1
    _displayState3->_Set_DS1307_RTC_Date
    _displayState2->_Set_DS1307_RTC_Time
    _displayState1->___fttol
    ___fttol->___ftmul

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0  100522
                                             33 BANK0      3     3      0
              _DisplayFirstTimeToLCD
                _Get_DS1307_RTC_Time
                            _InitI2C
                            _InitLCD
                _Set_DS1307_RTC_Date
                _Set_DS1307_RTC_Time
                      _displayState1
                      _displayState2
                      _displayState3
                      _displayState4
 ---------------------------------------------------------------------------------
 (1) _displayState4                                        6     6      0   18108
                                              0 BANK0      6     6      0
                     _ClearLCDScreen
              _DisplayFirstTimeToLCD
                _Get_DS1307_RTC_Time
                  _WriteCommandToLCD
                   _WriteStringToLCD
                     _WriteTempToLCD
 ---------------------------------------------------------------------------------
 (2) _DisplayFirstTimeToLCD                                3     3      0    7765
                                              9 COMMON     3     3      0
                     _ClearLCDScreen
                     _WriteDataToLCD
                   _WriteStringToLCD
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _displayState3                                       11    11      0   16026
                                              8 BANK0     11    11      0
                     _ClearLCDScreen
                _Get_DS1307_RTC_Date
                _Set_DS1307_RTC_Date
                  _WriteCommandToLCD
                   _WriteStringToLCD
                     _WriteTempToLCD
 ---------------------------------------------------------------------------------
 (2) _Set_DS1307_RTC_Date                                 12     9      3    5570
                                              9 COMMON     4     1      3
                                              0 BANK0      8     8      0
          _Write_Bytes_To_DS1307_RTC
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _displayState2                                        9     9      0   15891
                                              8 BANK0      9     9      0
                     _ClearLCDScreen
                _Get_DS1307_RTC_Time
                _Set_DS1307_RTC_Time
                  _WriteCommandToLCD
                   _WriteStringToLCD
                     _WriteTempToLCD
 ---------------------------------------------------------------------------------
 (2) _Set_DS1307_RTC_Time                                 12     9      3    5548
                                              9 COMMON     4     1      3
                                              0 BANK0      8     8      0
          _Write_Bytes_To_DS1307_RTC
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) _Write_Bytes_To_DS1307_RTC                            7     5      2     346
                                              1 COMMON     7     5      2
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (3) _ClearLCDScreen                                       2     2      0      44
                                              4 COMMON     2     2      0
                  _WriteCommandToLCD
 ---------------------------------------------------------------------------------
 (1) _displayState1                                        3     3      0   30739
                                             30 BANK0      3     3      0
                            _ADCinit
                   _DisplayDateOnLCD
                   _DisplayTimeToLCD
                _Get_DS1307_RTC_Date
                _Get_DS1307_RTC_Time
                            _ReadADC
                  _WriteCommandToLCD
                     _WriteDataToLCD
                   _WriteStringToLCD
                     _WriteTempToLCD
                            ___ftmul
                            ___fttol
                            ___lwdiv
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             4     1      3    1704
                                              8 COMMON     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     268
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     305
                                             16 BANK0     14    10      4
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    2061
                                              0 BANK0     16    10      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    1629
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (2) _WriteTempToLCD                                       2     0      2    6302
                                              9 COMMON     2     0      2
                     _WriteDataToLCD
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) _ReadADC                                              4     2      2      24
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (2) _Get_DS1307_RTC_Time                                  4     4      0     831
                                              9 COMMON     4     4      0
         _Read_Bytes_From_DS1307_RTC
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) _Get_DS1307_RTC_Date                                  4     4      0     831
                                              9 COMMON     4     4      0
         _Read_Bytes_From_DS1307_RTC
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1     463
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (3) _Read_Bytes_From_DS1307_RTC                           8     5      3     368
                                              1 COMMON     8     5      3
                        _I2C_ReStart
                      _I2C_Read_Byte
                       _I2C_Send_ACK
                      _I2C_Send_NACK
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (4) _I2C_Write_Byte                                       1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _I2C_Stop                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _I2C_Start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _I2C_Send_NACK                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _I2C_Send_ACK                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _I2C_Read_Byte                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _I2C_ReStart                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DisplayTimeToLCD                                     3     3      0    7848
                                              9 COMMON     3     3      0
                  _WriteCommandToLCD
                     _WriteDataToLCD
                   _WriteStringToLCD
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) _DisplayDateOnLCD                                     3     3      0    7738
                                              9 COMMON     3     3      0
                  _WriteCommandToLCD
                     _WriteDataToLCD
                   _WriteStringToLCD
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4    2416
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4    2314
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (2) _WriteStringToLCD                                     2     0      2    2739
                                              4 COMMON     2     0      2
                     _WriteDataToLCD
 ---------------------------------------------------------------------------------
 (3) _WriteDataToLCD                                       3     3      0      44
                                              1 COMMON     3     3      0
                    _ToggleEpinOfLCD
 ---------------------------------------------------------------------------------
 (2) _ADCinit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitLCD                                              2     2      0      44
                                              4 COMMON     2     2      0
                    _ToggleEpinOfLCD
                  _WriteCommandToLCD
 ---------------------------------------------------------------------------------
 (2) _WriteCommandToLCD                                    3     3      0      44
                                              1 COMMON     3     3      0
                    _ToggleEpinOfLCD
 ---------------------------------------------------------------------------------
 (4) _ToggleEpinOfLCD                                      1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitI2C                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DisplayFirstTimeToLCD
     _ClearLCDScreen
       _WriteCommandToLCD
         _ToggleEpinOfLCD
     _WriteDataToLCD
       _ToggleEpinOfLCD
     _WriteStringToLCD
       _WriteDataToLCD
         _ToggleEpinOfLCD
     ___awdiv
     ___awmod
   _Get_DS1307_RTC_Time
     _Read_Bytes_From_DS1307_RTC
       _I2C_ReStart
       _I2C_Read_Byte
       _I2C_Send_ACK
       _I2C_Send_NACK
       _I2C_Start
       _I2C_Stop
       _I2C_Write_Byte
     ___bmul
   _InitI2C
   _InitLCD
     _ToggleEpinOfLCD
     _WriteCommandToLCD
       _ToggleEpinOfLCD
   _Set_DS1307_RTC_Date
     _Write_Bytes_To_DS1307_RTC
       _I2C_Start
       _I2C_Stop
       _I2C_Write_Byte
     ___awdiv
     ___awmod
   _Set_DS1307_RTC_Time
     _Write_Bytes_To_DS1307_RTC
       _I2C_Start
       _I2C_Stop
       _I2C_Write_Byte
     ___awdiv
     ___awmod
   _displayState1
     _ADCinit
     _DisplayDateOnLCD
       _WriteCommandToLCD
         _ToggleEpinOfLCD
       _WriteDataToLCD
         _ToggleEpinOfLCD
       _WriteStringToLCD
         _WriteDataToLCD
           _ToggleEpinOfLCD
       ___awdiv
       ___awmod
     _DisplayTimeToLCD
       _WriteCommandToLCD
         _ToggleEpinOfLCD
       _WriteDataToLCD
         _ToggleEpinOfLCD
       _WriteStringToLCD
         _WriteDataToLCD
           _ToggleEpinOfLCD
       ___awdiv
       ___awmod
     _Get_DS1307_RTC_Date
       _Read_Bytes_From_DS1307_RTC
         _I2C_ReStart
         _I2C_Read_Byte
         _I2C_Send_ACK
         _I2C_Send_NACK
         _I2C_Start
         _I2C_Stop
         _I2C_Write_Byte
       ___bmul
     _Get_DS1307_RTC_Time
       _Read_Bytes_From_DS1307_RTC
         _I2C_ReStart
         _I2C_Read_Byte
         _I2C_Send_ACK
         _I2C_Send_NACK
         _I2C_Start
         _I2C_Stop
         _I2C_Write_Byte
       ___bmul
     _ReadADC
     _WriteCommandToLCD
       _ToggleEpinOfLCD
     _WriteDataToLCD
       _ToggleEpinOfLCD
     _WriteStringToLCD
       _WriteDataToLCD
         _ToggleEpinOfLCD
     _WriteTempToLCD
       _WriteDataToLCD
         _ToggleEpinOfLCD
       ___awdiv
       ___awmod
     ___ftmul
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwdiv
     ___lwtoft
       ___ftpack
   _displayState2
     _ClearLCDScreen
       _WriteCommandToLCD
         _ToggleEpinOfLCD
     _Get_DS1307_RTC_Time
       _Read_Bytes_From_DS1307_RTC
         _I2C_ReStart
         _I2C_Read_Byte
         _I2C_Send_ACK
         _I2C_Send_NACK
         _I2C_Start
         _I2C_Stop
         _I2C_Write_Byte
       ___bmul
     _Set_DS1307_RTC_Time
       _Write_Bytes_To_DS1307_RTC
         _I2C_Start
         _I2C_Stop
         _I2C_Write_Byte
       ___awdiv
       ___awmod
     _WriteCommandToLCD
       _ToggleEpinOfLCD
     _WriteStringToLCD
       _WriteDataToLCD
         _ToggleEpinOfLCD
     _WriteTempToLCD
       _WriteDataToLCD
         _ToggleEpinOfLCD
       ___awdiv
       ___awmod
   _displayState3
     _ClearLCDScreen
       _WriteCommandToLCD
         _ToggleEpinOfLCD
     _Get_DS1307_RTC_Date
       _Read_Bytes_From_DS1307_RTC
         _I2C_ReStart
         _I2C_Read_Byte
         _I2C_Send_ACK
         _I2C_Send_NACK
         _I2C_Start
         _I2C_Stop
         _I2C_Write_Byte
       ___bmul
     _Set_DS1307_RTC_Date
       _Write_Bytes_To_DS1307_RTC
         _I2C_Start
         _I2C_Stop
         _I2C_Write_Byte
       ___awdiv
       ___awmod
     _WriteCommandToLCD
       _ToggleEpinOfLCD
     _WriteStringToLCD
       _WriteDataToLCD
         _ToggleEpinOfLCD
     _WriteTempToLCD
       _WriteDataToLCD
         _ToggleEpinOfLCD
       ___awdiv
       ___awmod
   _displayState4
     _ClearLCDScreen
       _WriteCommandToLCD
         _ToggleEpinOfLCD
     _DisplayFirstTimeToLCD
       _ClearLCDScreen
         _WriteCommandToLCD
           _ToggleEpinOfLCD
       _WriteDataToLCD
         _ToggleEpinOfLCD
       _WriteStringToLCD
         _WriteDataToLCD
           _ToggleEpinOfLCD
       ___awdiv
       ___awmod
     _Get_DS1307_RTC_Time
       _Read_Bytes_From_DS1307_RTC
         _I2C_ReStart
         _I2C_Read_Byte
         _I2C_Send_ACK
         _I2C_Send_NACK
         _I2C_Start
         _I2C_Stop
         _I2C_Write_Byte
       ___bmul
     _WriteCommandToLCD
       _ToggleEpinOfLCD
     _WriteStringToLCD
       _WriteDataToLCD
         _ToggleEpinOfLCD
     _WriteTempToLCD
       _WriteDataToLCD
         _ToggleEpinOfLCD
       ___awdiv
       ___awmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     24      38       5       70.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      D       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      46      12        0.0%
ABS                  0      0      46       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Tue Apr 12 15:03:05 2016

                                  _f 0044                                    pc 0002  
                     ___bmul@product 0072                   __size_of_I2C_Start 0008  
                        __CFG_CP$OFF 0000                         ___awdiv@sign 0076  
                                 fsr 0004                                  l100 1564  
                                l112 0EE3                                  l106 0DEE  
                                l123 03D6                                  l124 03E5  
                                l160 062E                                  l331 14FA  
                                l325 14EA                                  l149 061B  
                                l343 151D                                  l319 14F2  
                                l159 061F                                  l337 1514  
                                l355 150A                                  l268 0B3E  
                                l349 1543                                  l198 021F  
                                l199 022E                                  l780 09E3  
                                l696 17DF                                  l697 17E7  
                                l689 17CA                                  _RA1 0029  
                                _RB0 0030                                  _RA2 002A  
                                _RB1 0031                                  _RA3 002B  
                                _RA4 002C                                  _RD0 0040  
                                _RB4 0034                                  _RB5 0035  
                                _RB6 0036                                  _RB7 0037  
                                _PEN 048A                         __CFG_CPD$OFF 0000  
                                _SEN 0488                 __size_of_I2C_ReStart 0008  
                                fsr0 0004                                  indf 0000  
                       ___awmod@sign 0076                   I2C_Write_Byte@Byte 0070  
                       __CFG_FOSC$HS 0000                      __end_of_ADCinit 15AF  
                       __CFG_LVP$OFF 0000                       ?_displayState1 0070  
                     ?_displayState2 0070                       ?_displayState3 0070  
                     ?_displayState4 0070              Set_DS1307_RTC_Time@Mode 007C  
            Set_DS1307_RTC_Time@Mins 007A              Set_DS1307_RTC_Time@Secs 007B  
                               l3010 05B7                                 l3020 05E9  
                               l3012 05C1                                 l3022 05F3  
                               l3014 05CB                                 l2400 1723  
                               l2320 178B                                 l3016 05D5  
                               l3008 05AD                                 l3130 0765  
                               l3018 05DF                                 l3026 05FD  
                               l2404 172E                                 l2420 16A1  
                               l2324 1550                                 l2340 179C  
                               l3140 0797                                 l3132 076F  
                               l3124 074A                                 l3108 071E  
                               l3052 0663                                 l2318 1769  
                               l3134 0779                                 l3126 0751  
                               l3118 073E                                 l3062 0683  
                               l3150 07D3                                 l3038 0632  
                               l2510 0CE4                                 l3222 0262  
                               l3310 08CD                                 l2272 15AF  
                               l2408 1736                                 l2432 16AE  
                               l2424 16A8                                 l2248 154C  
                               l2328 1556                                 l2344 17A3  
                               l3136 0783                                 l3128 075B  
                               l3144 07A1                                 l2512 0CEC  
                               l3232 0282                                 l3208 0231  
                               l3304 08BB                                 l2434 16BC  
                               l2442 16D5                                 l2354 17CF  
                               l2346 17AF                                 l3138 078D  
                               l2514 0CF4                                 l3306 08C1  
                               l3314 08D2                                 l2620 0FAD  
                               l2540 006E                                 l2356 17D9  
                               l2348 17B4                                 l2292 1639  
                               l2452 0B40                                 l3076 06B4  
                               l3148 07C0                                 l3180 01CA  
                               l3308 08C7                                 l2382 16F7  
                               l2446 16DD                                 l2438 16CA  
                               l2630 0FD5                                 l2622 0FB5  
                               l2294 1657                                 l3086 06D4  
                               l2518 0CF9                                 l3246 02B3  
                               l2392 16FF                                 l2376 16EC  
                               l2632 0FDD                                 l2624 0FBD  
                               l2480 0A53                                 l2456 0B45  
                               l3256 02D3                                 l3280 031D  
                               l2394 170D                                 l2626 0FC5  
                               l2618 0FA5                                 l2562 0120  
                               l2546 00A6                                 l2482 0A54  
                               l2722 09D8                                 l2714 09BB  
                               l2458 0B4D                                 l3098 06FE  
                               l3282 032F                                 l3178 01C6  
                               l2628 0FCD                                 l2636 0FE5  
                               l2580 019A                                 l2572 0163  
                               l2556 00E9                                 l2492 0A96  
                               l2652 0B88                                 l2724 09E6  
                               l2716 09CB                                 l3268 02FD  
                               l2486 0A75                                 l2646 0B72  
                               l2750 1687                                 l2742 1663  
                               l2830 0EA1                                 l2576 018A  
                               l2584 019F                                 l2680 0BFF  
                               l2664 0BC7                                 l2728 09F4  
                               l2744 1671                                 l2578 0192  
                               l2754 1692                                 l2818 0E23  
                               l2930 046B                                 l2906 041A  
                               l3490 07A8                                 l2676 0BEF  
                               l2668 0BD7                                 l2940 048B  
                               l2916 043A                                 l3492 07C5  
                               l3484 08D9                                 l2838 0EB5  
                               l3494 04DC                                 l3486 0324  
                               l2696 0989                                 l2952 04B5  
                               l2864 038A                                 l3488 0604  
                               l2892 03E9                                 l2964 04D5  
                               l2966 04E7                                 l2990 055B  
                               _CHS0 00FB                                 _CHS1 00FC  
                               _CHS2 00FD                                 STR_1 10DE  
                               STR_2 110D                                 STR_3 10B3  
                               STR_4 110B                                 STR_5 110B  
                               STR_6 1000                                 STR_7 1028  
                               STR_8 1061                                 STR_9 104F  
                               u2005 170E                                 u2015 171A  
                               u2025 1724                                 u2105 16C2  
                               u2115 16CB                                 u2205 0DD6  
                               u2215 0A1B                                 u2225 0A3B  
                               u2145 0AC6                                 u2155 0AFC  
                               u2085 16B1                                 u2165 0B32  
                               u2335 0825                                 u2255 0A62  
                               u2175 0D34                                 u2345 0844  
                               u2265 0A83                                 u2425 0BD8  
                               u2185 0D6A                                 u2355 0863  
                               u2435 0BE0                                 u2515 0990  
                               u2195 0DA0                                 u1805 176F  
                               u3317 1539                                 u3327 08FC  
                               u2615 1666                                 u1665 1614  
                               u3337 0914                                 u2385 0B94  
                               u2545 09BC                                 u3347 092A  
                               u1675 0025                                 u2475 0C00  
                               u2395 0BA6                                 u2635 1672  
                               u2715 0ECA                                 u3357 0940  
                               u2485 0C08                                 u2645 167E  
                               u2725 0EE1                                 u3367 0954  
                               u1935 17EE                                 u1855 17A8  
                               u2575 09DA                                 u2655 1688  
                               u3377 158A                                 u1785 1642  
                               u3387 1594                                 u1875 17C3  
                               u1895 17D2                                 u1985 1702  
                               _RCEN 048B                                 _RSEN 0489  
                       __CFG_WRT$OFF 0000                                 _Temp 007D  
        ??_Write_Bytes_To_DS1307_RTC 0073              ??_DisplayFirstTimeToLCD 0079  
                               _main 0874                         ___ftpack@arg 0070  
                       ___ftpack@exp 0073                                 btemp 007E  
                   __end_of_I2C_Stop 14FF                                 ltemp 007E  
              __size_of_I2C_Send_ACK 0009                                 start 0000  
                               ttemp 007E                                 wtemp 007E  
                  ___bmul@multiplier 0073                         ___ftmul@cntr 002E  
                       ___ftmul@sign 002F                      __end_of_InitI2C 152F  
                    __end_of_ReadADC 1571                      __end_of_InitLCD 096F  
                       ___fttol@exp1 003D                         ___fttol@lval 0039  
           Set_DS1307_RTC_Time@Hours 0079                                ?_main 0070  
                              _ACKEN 048C                                _ACKDT 048D  
                    __end_of___awdiv 173B                                STR_10 110B  
                              STR_11 110B                                STR_12 1081  
                              STR_20 10E5                                STR_13 10F5  
                              STR_21 1093                                STR_30 10FD  
                              STR_14 10ED                                STR_22 1014  
                              STR_31 10F9                                STR_15 10E9  
                              STR_23 10A3                                STR_32 10E5  
                              STR_40 1108                                STR_16 1101  
                              STR_24 103C                                STR_41 10F5  
                              STR_25 10F5                                STR_17 10F1  
                              STR_33 1073                        __CFG_WDTE$OFF 0000  
                              STR_34 110B                                STR_42 10ED  
                              STR_26 10ED                                STR_50 1108  
                              STR_18 10FD                                STR_35 110B  
                              STR_43 10E9                                STR_27 10E9  
                              STR_19 10F9                                STR_44 1101  
                              STR_28 1101                                STR_36 10C2  
                    __end_of___awmod 16E2                                STR_45 10F1  
                              STR_29 10F1                                STR_37 1083  
                              STR_46 10FD                                STR_38 10D0  
                              STR_47 10F9                                STR_39 1105  
                              STR_48 10E5                                STR_49 1105  
                    __end_of___ftmul 0C2D                      ___awdiv@divisor 0070  
                    __end_of___fttol 09FD                      __end_of___lwdiv 1697  
                    ___awdiv@counter 0075                                _PORTB 0006  
                              _TRISA 0085                                _TRISC 0087  
                              _TRISD 0088                                _SSPIF 0063  
    DisplayFirstTimeToLCD@pTimeArray 007B   __end_of_Read_Bytes_From_DS1307_RTC 1794  
         _Read_Bytes_From_DS1307_RTC 173B               __size_of_I2C_Read_Byte 0009  
                       _I2C_Send_ACK 1510                        ___ftpack@sign 0074  
                              _state 0056                    __end_of_I2C_Start 14F7  
                     __CFG_BOREN$OFF 0000                                pclath 000A  
                              ltemp0 007E                                ltemp1 0082  
                              ltemp2 0086                                ltemp3 0080  
                              ttemp0 007E                                ttemp1 0081  
                              ttemp2 0084                                ttemp3 0087  
                              ttemp4 007F               __size_of_I2C_Send_NACK 0009  
                              status 0003              __size_of_WriteDataToLCD 002A  
                              wtemp0 007E                                wtemp1 0080  
                              wtemp2 0082                                wtemp3 0084  
                              wtemp4 0086                                wtemp5 0088  
                              wtemp6 007F                      _ToggleEpinOfLCD 1585  
                    __initialization 07E8                         __end_of_main 08E8  
        __end_of_Get_DS1307_RTC_Date 0874          __end_of_Set_DS1307_RTC_Date 0DEE  
        __end_of_Get_DS1307_RTC_Time 0A98            _Write_Bytes_To_DS1307_RTC 1623  
        __end_of_Set_DS1307_RTC_Time 0B5A                         _switch_state 004C  
                          ??_ADCinit 0070                               ??_main 0041  
                      ___fttol@sign1 0038                     ??_ClearLCDScreen 0074  
                     ReadADC@nhietdo 0072                      ??_displayState1 003E  
                    ??_displayState2 0028                      ??_displayState3 0028  
                    ??_displayState4 007D                               _ADRESH 001E  
                             _ADRESL 009E                     ___awdiv@dividend 0072  
                   __end_of___ftpack 1800                     __end_of___lwtoft 1585  
                             _SSPADD 0093                               _TRISB0 0430  
                             _TRISB1 0431                               _TRISB4 0434  
                             _TRISC3 043B                               _TRISB5 0435  
                             _TRISC4 043C                               _TRISB6 0436  
                             _TRISB7 0437                               _SSPCON 0014  
                             _SSPBUF 0013            __size_of_DisplayDateOnLCD 0115  
                          ??_InitI2C 0070                            ??_ReadADC 0072  
                          ??_InitLCD 0074                       __CFG_PWRTE$OFF 0000  
            __size_of_WriteTempToLCD 0027                               ___bmul 154E  
                      _I2C_Read_Byte 1507                            ??___awdiv 0074  
                          ??___awmod 0074                            ??___ftmul 0026  
                          ??___fttol 0034                            ??___lwdiv 0074  
                   ___awdiv@quotient 0077                      ___awmod@divisor 0070  
                  WriteStringToLCD@s 0074                        _I2C_Send_NACK 1519  
                    ___awmod@counter 0075                ___ftmul@f3_as_product 002B  
                  ?_WriteStringToLCD 0074                            ?_I2C_Stop 0070  
                 ??_WriteStringToLCD 0076              __end_of_ToggleEpinOfLCD 159A  
            __end_of__initialization 07FC                   WriteTempToLCD@Temp 0079  
Read_Bytes_From_DS1307_RTC@NoOfBytes 0072                  ___bmul@multiplicand 0070  
                         ___ftmul@f1 0020                           ___ftmul@f2 0023  
          __size_of_DisplayTimeToLCD 0178                       ?_I2C_Read_Byte 0070  
                         ___fttol@f1 0030                       __pcstackCOMMON 0070  
                       __pidataBANK0 0008                       ?_I2C_Send_NACK 0070  
                         ___lwtoft@c 0078             WriteCommandToLCD@Command 0073  
                         ??_I2C_Stop 0070                           __pbssBANK0 0044  
                     _WriteDataToLCD 000A       __size_of_DisplayFirstTimeToLCD 00D9  
      __end_of_DisplayFirstTimeToLCD 0D06                           __pmaintext 0874  
                            ?___bmul 0070                WriteDataToLCD@LCDChar 0073  
            __size_of_I2C_Write_Byte 0010                              _ACKSTAT 048E  
                      ??_I2C_ReStart 0070                            ?___ftpack 0070  
                            _ADCinit 159A                            ?___lwtoft 0078  
        ?_Read_Bytes_From_DS1307_RTC 0071   __size_of_Write_Bytes_To_DS1307_RTC 0038  
                            _SSPSTAT 0094               __end_of_WriteDataToLCD 0034  
                         __stringtab 110F                     ?_ToggleEpinOfLCD 0070  
                   _DisplayDateOnLCD 0EEB                              _InitI2C 1522  
                            _ReadADC 155F                              _InitLCD 08E8  
                          _I2C_Start 14EF                      ??_I2C_Read_Byte 0070  
                     _WriteTempToLCD 15D2                      __size_of___bmul 0011  
                    ??_I2C_Send_NACK 0070                              ___awdiv 16E2  
                            ___awmod 1697                              ___ftmul 0B5A  
                            ___fttol 096F                              ___lwdiv 165B  
                            _h_alarm 0046                           ??___ftpack 0075  
                            __ptext1 01AC                              __ptext2 0C2D  
                            __ptext3 04FC                              __ptext4 0D06  
                            __ptext5 033E                              __ptext6 0A98  
                            __ptext7 1623                              __ptext8 152F  
                            __ptext9 0DEE                              _m_alarm 0048  
                         ??___lwtoft 007B                              _s_alarm 004A  
                   ___awmod@dividend 0072                  __end_of_I2C_ReStart 14EF  
                            clrloop0 1500                              _voltage 004E  
         DisplayDateOnLCD@pDateArray 007B    __end_of_Write_Bytes_To_DS1307_RTC 165B  
               end_of_initialization 07FC                      ?_WriteDataToLCD 0070  
                     displayState3@d 002F                       displayState2@h 002D  
                     displayState2@m 002F                       displayState4@h 0022  
                     displayState3@m 0031                       displayState2@s 002B  
                     displayState4@m 0024                       displayState3@w 002D  
                     displayState4@s 0020                       displayState3@y 002B  
             __end_of_WriteTempToLCD 15F9                           ?_I2C_Start 0070  
                   _DisplayTimeToLCD 0034                         __pstringtext 1000  
       __size_of_Get_DS1307_RTC_Date 006D         __size_of_Set_DS1307_RTC_Date 00E8  
       __size_of_Get_DS1307_RTC_Time 009B         __size_of_Set_DS1307_RTC_Time 00C2  
         Write_Bytes_To_DS1307_RTC@i 0076                    __size_of_I2C_Stop 0008  
              __end_of_displayState1 0EEB                __end_of_displayState2 04FC  
              __end_of_displayState3 07E8                __end_of_displayState4 033E  
  Read_Bytes_From_DS1307_RTC@Address 0076                      ?_WriteTempToLCD 0079  
          __size_of_WriteStringToLCD 0023     Write_Bytes_To_DS1307_RTC@Address 0075  
                        ___ftmul@exp 002A  __size_of_Read_Bytes_From_DS1307_RTC 0059  
                     __end_of___bmul 155F                       _I2C_Write_Byte 153E  
                        _I2C_ReStart 14E7                  start_initialization 07E8  
            __size_of_ClearLCDScreen 000F                          ??_I2C_Start 0070  
             __end_of_I2C_Write_Byte 154E                             ??___bmul 0071  
                        __pdataBANK0 0056          Read_Bytes_From_DS1307_RTC@i 0077  
                           ?_ADCinit 0070             __end_of_DisplayDateOnLCD 1000  
                          _pRTCArray 0050                    __size_of___ftpack 006C  
                        __pbssCOMMON 007D                            ___latbits 0002  
                  __size_of___lwtoft 0014                        __pcstackBANK0 0020  
     Write_Bytes_To_DS1307_RTC@pData 0071                        ?_I2C_Send_ACK 0070  
                           ?_InitI2C 0070                             ?_ReadADC 0070  
                           ?_InitLCD 0070                     ___lwdiv@dividend 0072  
              _DisplayFirstTimeToLCD 0C2D                      ?_I2C_Write_Byte 0070  
         DisplayTimeToLCD@pTimeArray 007B                             ?___awdiv 0070  
                           ?___awmod 0070                             ?___ftmul 0020  
                           ?___fttol 0030                             ?___lwdiv 0070  
                          __pstrings 110F                     ??_WriteDataToLCD 0071  
                           _I2C_Stop 14F7             __end_of_DisplayTimeToLCD 01AC  
                     ??_I2C_Send_ACK 0070                     ___lwdiv@quotient 0075  
                           _ADCvalue 0054                     _WriteStringToLCD 15AF  
                          clear_ram0 14FF                  _Get_DS1307_RTC_Date 0807  
                _Set_DS1307_RTC_Date 0D06                  _Get_DS1307_RTC_Time 09FD  
              __end_of_I2C_Read_Byte 1510                  _Set_DS1307_RTC_Time 0A98  
           __size_of_ToggleEpinOfLCD 0015      Read_Bytes_From_DS1307_RTC@pData 0071  
              __end_of_I2C_Send_NACK 1522                           _ADCON0bits 001F  
                        __stringbase 1121                           _ADCON1bits 009F  
                   __size_of_ADCinit 0015                 ?_Get_DS1307_RTC_Date 0070  
               ?_Set_DS1307_RTC_Date 0079                 ?_Get_DS1307_RTC_Time 0070  
               ?_Set_DS1307_RTC_Time 0079                     ??_WriteTempToLCD 007B  
                     _ClearLCDScreen 152F           ?_Write_Bytes_To_DS1307_RTC 0071  
                  _WriteCommandToLCD 15F9                   ?_WriteCommandToLCD 0070  
                   __size_of_InitI2C 000D                     __size_of_ReadADC 0012  
                   __size_of_InitLCD 0087               ?_DisplayFirstTimeToLCD 0070  
                ??_WriteCommandToLCD 0071                     __size_of___awdiv 0059  
                   __size_of___awmod 004B                     __size_of___ftmul 00D3  
                   __size_of___fttol 008E                     __size_of___lwdiv 003C  
                           ___ftpack 1794                         ?_I2C_ReStart 0070  
                 __end_of__stringtab 1121                             ___lwtoft 1571  
              ??_Get_DS1307_RTC_Date 0079                ??_Set_DS1307_RTC_Date 0020  
              ??_Get_DS1307_RTC_Time 0079                ??_Set_DS1307_RTC_Time 0020  
                    ___lwdiv@divisor 0070               __end_of_ClearLCDScreen 153E  
                    ___lwdiv@counter 0077                             __ptext10 1571  
                           __ptext11 165B                             __ptext20 173B  
                           __ptext12 096F                             __ptext21 153E  
                           __ptext13 0B5A                             __ptext30 1697  
                           __ptext22 14F7                             __ptext14 1794  
                           __ptext31 16E2                             __ptext23 14EF  
                           __ptext15 15D2                             __ptext32 15AF  
                           __ptext24 1519                             __ptext16 155F  
                           __ptext33 000A                             __ptext25 1510  
                           __ptext17 09FD                             __ptext34 159A  
                           __ptext26 1507                             __ptext18 0807  
                           __ptext35 08E8                             __ptext27 14E7  
                           __ptext19 154E                             __ptext36 15F9  
                           __ptext28 0034                             __ptext37 1585  
                           __ptext29 0EEB                             __ptext38 1522  
          __end_of_WriteCommandToLCD 1623                        __size_of_main 0074  
               __end_of_I2C_Send_ACK 1519               __size_of_displayState1 00FD  
             __size_of_displayState2 01BE               __size_of_displayState3 02EC  
             __size_of_displayState4 0192                    ??_ToggleEpinOfLCD 0070  
                  ?_DisplayDateOnLCD 0070                   ??_DisplayDateOnLCD 0079  
       ??_Read_Bytes_From_DS1307_RTC 0074                      ?_ClearLCDScreen 0070  
 Write_Bytes_To_DS1307_RTC@NoOfBytes 0072                     ??_I2C_Write_Byte 0070  
           Set_DS1307_RTC_Date@Month 0079                            stringcode 1119  
           __end_of_WriteStringToLCD 15D2              Set_DS1307_RTC_Date@Date 007C  
            Set_DS1307_RTC_Date@Year 007A                             stringtab 110F  
                  ?_DisplayTimeToLCD 0070           __size_of_WriteCommandToLCD 002A  
                      _displayState1 0DEE                        _displayState2 033E  
                      _displayState3 04FC                        _displayState4 01AC  
                 ??_DisplayTimeToLCD 0079               Set_DS1307_RTC_Date@Day 007B  
